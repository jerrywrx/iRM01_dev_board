
iRM01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005460  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005570  08005570  00015570  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055e4  080055e4  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080055e4  080055e4  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055e4  080055e4  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055e4  080055e4  000155e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055e8  080055e8  000155e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080055ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d78  20000060  0800564c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001dd8  0800564c  00021dd8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020089  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001941a  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b05  00000000  00000000  000394e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001618  00000000  00000000  0003cff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112d  00000000  00000000  0003e608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a0cf  00000000  00000000  0003f735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019fdc  00000000  00000000  00059804  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00096485  00000000  00000000  000737e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005eb4  00000000  00000000  00109c68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0010fb1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	08005558 	.word	0x08005558

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	08005558 	.word	0x08005558

08000150 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b082      	sub	sp, #8
 8000154:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000156:	4b10      	ldr	r3, [pc, #64]	; (8000198 <MX_DMA_Init+0x48>)
 8000158:	695b      	ldr	r3, [r3, #20]
 800015a:	4a0f      	ldr	r2, [pc, #60]	; (8000198 <MX_DMA_Init+0x48>)
 800015c:	f043 0301 	orr.w	r3, r3, #1
 8000160:	6153      	str	r3, [r2, #20]
 8000162:	4b0d      	ldr	r3, [pc, #52]	; (8000198 <MX_DMA_Init+0x48>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	f003 0301 	and.w	r3, r3, #1
 800016a:	607b      	str	r3, [r7, #4]
 800016c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800016e:	2200      	movs	r2, #0
 8000170:	2105      	movs	r1, #5
 8000172:	200c      	movs	r0, #12
 8000174:	f000 fd2f 	bl	8000bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000178:	200c      	movs	r0, #12
 800017a:	f000 fd48 	bl	8000c0e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800017e:	2200      	movs	r2, #0
 8000180:	2105      	movs	r1, #5
 8000182:	200d      	movs	r0, #13
 8000184:	f000 fd27 	bl	8000bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8000188:	200d      	movs	r0, #13
 800018a:	f000 fd40 	bl	8000c0e <HAL_NVIC_EnableIRQ>

}
 800018e:	bf00      	nop
 8000190:	3708      	adds	r7, #8
 8000192:	46bd      	mov	sp, r7
 8000194:	bd80      	pop	{r7, pc}
 8000196:	bf00      	nop
 8000198:	40021000 	.word	0x40021000

0800019c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001a0:	4a04      	ldr	r2, [pc, #16]	; (80001b4 <MX_FREERTOS_Init+0x18>)
 80001a2:	2100      	movs	r1, #0
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <MX_FREERTOS_Init+0x1c>)
 80001a6:	f002 fc4f 	bl	8002a48 <osThreadNew>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a03      	ldr	r2, [pc, #12]	; (80001bc <MX_FREERTOS_Init+0x20>)
 80001ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80001b0:	bf00      	nop
 80001b2:	bd80      	pop	{r7, pc}
 80001b4:	08005594 	.word	0x08005594
 80001b8:	080001c1 	.word	0x080001c1
 80001bc:	2000007c 	.word	0x2000007c

080001c0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80001c0:	b580      	push	{r7, lr}
 80001c2:	b082      	sub	sp, #8
 80001c4:	af00      	add	r7, sp, #0
 80001c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80001c8:	2001      	movs	r0, #1
 80001ca:	f002 fce7 	bl	8002b9c <osDelay>
 80001ce:	e7fb      	b.n	80001c8 <StartDefaultTask+0x8>

080001d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b086      	sub	sp, #24
 80001d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d6:	f107 0308 	add.w	r3, r7, #8
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
 80001de:	605a      	str	r2, [r3, #4]
 80001e0:	609a      	str	r2, [r3, #8]
 80001e2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e4:	4b37      	ldr	r3, [pc, #220]	; (80002c4 <MX_GPIO_Init+0xf4>)
 80001e6:	699b      	ldr	r3, [r3, #24]
 80001e8:	4a36      	ldr	r2, [pc, #216]	; (80002c4 <MX_GPIO_Init+0xf4>)
 80001ea:	f043 0304 	orr.w	r3, r3, #4
 80001ee:	6193      	str	r3, [r2, #24]
 80001f0:	4b34      	ldr	r3, [pc, #208]	; (80002c4 <MX_GPIO_Init+0xf4>)
 80001f2:	699b      	ldr	r3, [r3, #24]
 80001f4:	f003 0304 	and.w	r3, r3, #4
 80001f8:	607b      	str	r3, [r7, #4]
 80001fa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001fc:	4b31      	ldr	r3, [pc, #196]	; (80002c4 <MX_GPIO_Init+0xf4>)
 80001fe:	699b      	ldr	r3, [r3, #24]
 8000200:	4a30      	ldr	r2, [pc, #192]	; (80002c4 <MX_GPIO_Init+0xf4>)
 8000202:	f043 0308 	orr.w	r3, r3, #8
 8000206:	6193      	str	r3, [r2, #24]
 8000208:	4b2e      	ldr	r3, [pc, #184]	; (80002c4 <MX_GPIO_Init+0xf4>)
 800020a:	699b      	ldr	r3, [r3, #24]
 800020c:	f003 0308 	and.w	r3, r3, #8
 8000210:	603b      	str	r3, [r7, #0]
 8000212:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|SPI1_CS_ACC_Pin, GPIO_PIN_RESET);
 8000214:	2200      	movs	r2, #0
 8000216:	f248 0101 	movw	r1, #32769	; 0x8001
 800021a:	482b      	ldr	r0, [pc, #172]	; (80002c8 <MX_GPIO_Init+0xf8>)
 800021c:	f000 fff6 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GYRO_GPIO_Port, SPI1_CS_GYRO_Pin, GPIO_PIN_RESET);
 8000220:	2200      	movs	r2, #0
 8000222:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000226:	4829      	ldr	r0, [pc, #164]	; (80002cc <MX_GPIO_Init+0xfc>)
 8000228:	f000 fff0 	bl	800120c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|SPI1_CS_ACC_Pin;
 800022c:	f248 0301 	movw	r3, #32769	; 0x8001
 8000230:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000232:	2301      	movs	r3, #1
 8000234:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000236:	2300      	movs	r3, #0
 8000238:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023a:	2302      	movs	r3, #2
 800023c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023e:	f107 0308 	add.w	r3, r7, #8
 8000242:	4619      	mov	r1, r3
 8000244:	4820      	ldr	r0, [pc, #128]	; (80002c8 <MX_GPIO_Init+0xf8>)
 8000246:	f000 fe5d 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_GYRO_Pin;
 800024a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800024e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000250:	2301      	movs	r3, #1
 8000252:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000254:	2300      	movs	r3, #0
 8000256:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000258:	2302      	movs	r3, #2
 800025a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPI1_CS_GYRO_GPIO_Port, &GPIO_InitStruct);
 800025c:	f107 0308 	add.w	r3, r7, #8
 8000260:	4619      	mov	r1, r3
 8000262:	481a      	ldr	r0, [pc, #104]	; (80002cc <MX_GPIO_Init+0xfc>)
 8000264:	f000 fe4e 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_GYR_Pin;
 8000268:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800026c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800026e:	4b18      	ldr	r3, [pc, #96]	; (80002d0 <MX_GPIO_Init+0x100>)
 8000270:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000272:	2300      	movs	r3, #0
 8000274:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(INT1_GYR_GPIO_Port, &GPIO_InitStruct);
 8000276:	f107 0308 	add.w	r3, r7, #8
 800027a:	4619      	mov	r1, r3
 800027c:	4813      	ldr	r0, [pc, #76]	; (80002cc <MX_GPIO_Init+0xfc>)
 800027e:	f000 fe41 	bl	8000f04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = INT1_ACC_Pin;
 8000282:	2320      	movs	r3, #32
 8000284:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000286:	4b12      	ldr	r3, [pc, #72]	; (80002d0 <MX_GPIO_Init+0x100>)
 8000288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(INT1_ACC_GPIO_Port, &GPIO_InitStruct);
 800028e:	f107 0308 	add.w	r3, r7, #8
 8000292:	4619      	mov	r1, r3
 8000294:	480c      	ldr	r0, [pc, #48]	; (80002c8 <MX_GPIO_Init+0xf8>)
 8000296:	f000 fe35 	bl	8000f04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800029a:	2200      	movs	r2, #0
 800029c:	2105      	movs	r1, #5
 800029e:	2017      	movs	r0, #23
 80002a0:	f000 fc99 	bl	8000bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80002a4:	2017      	movs	r0, #23
 80002a6:	f000 fcb2 	bl	8000c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80002aa:	2200      	movs	r2, #0
 80002ac:	2105      	movs	r1, #5
 80002ae:	2028      	movs	r0, #40	; 0x28
 80002b0:	f000 fc91 	bl	8000bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002b4:	2028      	movs	r0, #40	; 0x28
 80002b6:	f000 fcaa 	bl	8000c0e <HAL_NVIC_EnableIRQ>

}
 80002ba:	bf00      	nop
 80002bc:	3718      	adds	r7, #24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40021000 	.word	0x40021000
 80002c8:	40010c00 	.word	0x40010c00
 80002cc:	40010800 	.word	0x40010800
 80002d0:	10110000 	.word	0x10110000

080002d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002da:	f000 fb1f 	bl	800091c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002de:	f000 f83d 	bl	800035c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002e2:	f7ff ff75 	bl	80001d0 <MX_GPIO_Init>
  MX_DMA_Init();
 80002e6:	f7ff ff33 	bl	8000150 <MX_DMA_Init>
  MX_TIM3_Init();
 80002ea:	f000 f9d1 	bl	8000690 <MX_TIM3_Init>
  MX_SPI1_Init();
 80002ee:	f000 f875 	bl	80003dc <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002f2:	f000 fa77 	bl	80007e4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80002f6:	210c      	movs	r1, #12
 80002f8:	4817      	ldr	r0, [pc, #92]	; (8000358 <main+0x84>)
 80002fa:	f001 fd2b 	bl	8001d54 <HAL_TIM_PWM_Start>
  uint8_t intensity = 0;
 80002fe:	2300      	movs	r3, #0
 8000300:	71fb      	strb	r3, [r7, #7]
  uint8_t add_intensity = 1;
 8000302:	2301      	movs	r3, #1
 8000304:	71bb      	strb	r3, [r7, #6]
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000306:	f002 fb39 	bl	800297c <osKernelInitialize>
  MX_FREERTOS_Init();
 800030a:	f7ff ff47 	bl	800019c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800030e:	f002 fb67 	bl	80029e0 <osKernelStart>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (add_intensity) {
 8000312:	79bb      	ldrb	r3, [r7, #6]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d003      	beq.n	8000320 <main+0x4c>
		  intensity += 5;
 8000318:	79fb      	ldrb	r3, [r7, #7]
 800031a:	3305      	adds	r3, #5
 800031c:	71fb      	strb	r3, [r7, #7]
 800031e:	e002      	b.n	8000326 <main+0x52>
	  } else {
		  intensity -= 5;
 8000320:	79fb      	ldrb	r3, [r7, #7]
 8000322:	3b05      	subs	r3, #5
 8000324:	71fb      	strb	r3, [r7, #7]
	  }

	  htim3.Instance->CCR4 = 100 - intensity;
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 800032c:	4b0a      	ldr	r3, [pc, #40]	; (8000358 <main+0x84>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	641a      	str	r2, [r3, #64]	; 0x40

	  if (intensity >= 100) {
 8000332:	79fb      	ldrb	r3, [r7, #7]
 8000334:	2b63      	cmp	r3, #99	; 0x63
 8000336:	d902      	bls.n	800033e <main+0x6a>
		  add_intensity = 0;
 8000338:	2300      	movs	r3, #0
 800033a:	71bb      	strb	r3, [r7, #6]
 800033c:	e008      	b.n	8000350 <main+0x7c>
	  } else if (intensity <= 0) {
 800033e:	79fb      	ldrb	r3, [r7, #7]
 8000340:	2b00      	cmp	r3, #0
 8000342:	d105      	bne.n	8000350 <main+0x7c>
		  HAL_Delay(2000);
 8000344:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000348:	f000 fb4a 	bl	80009e0 <HAL_Delay>
		  add_intensity = 1;
 800034c:	2301      	movs	r3, #1
 800034e:	71bb      	strb	r3, [r7, #6]
	  }

	  HAL_Delay(50);
 8000350:	2032      	movs	r0, #50	; 0x32
 8000352:	f000 fb45 	bl	80009e0 <HAL_Delay>
	  if (add_intensity) {
 8000356:	e7dc      	b.n	8000312 <main+0x3e>
 8000358:	20000188 	.word	0x20000188

0800035c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b090      	sub	sp, #64	; 0x40
 8000360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000362:	f107 0318 	add.w	r3, r7, #24
 8000366:	2228      	movs	r2, #40	; 0x28
 8000368:	2100      	movs	r1, #0
 800036a:	4618      	mov	r0, r3
 800036c:	f005 f80e 	bl	800538c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	601a      	str	r2, [r3, #0]
 8000376:	605a      	str	r2, [r3, #4]
 8000378:	609a      	str	r2, [r3, #8]
 800037a:	60da      	str	r2, [r3, #12]
 800037c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800037e:	2302      	movs	r3, #2
 8000380:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000382:	2301      	movs	r3, #1
 8000384:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000386:	2310      	movs	r3, #16
 8000388:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800038a:	2300      	movs	r3, #0
 800038c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800038e:	f107 0318 	add.w	r3, r7, #24
 8000392:	4618      	mov	r0, r3
 8000394:	f000 ff74 	bl	8001280 <HAL_RCC_OscConfig>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800039e:	f000 f818 	bl	80003d2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003a2:	230f      	movs	r3, #15
 80003a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003a6:	2300      	movs	r3, #0
 80003a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003aa:	2300      	movs	r3, #0
 80003ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003b2:	2300      	movs	r3, #0
 80003b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003b6:	1d3b      	adds	r3, r7, #4
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f001 f9e2 	bl	8001784 <HAL_RCC_ClockConfig>
 80003c0:	4603      	mov	r3, r0
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	d001      	beq.n	80003ca <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80003c6:	f000 f804 	bl	80003d2 <Error_Handler>
  }
}
 80003ca:	bf00      	nop
 80003cc:	3740      	adds	r7, #64	; 0x40
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}

080003d2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003d2:	b480      	push	{r7}
 80003d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003d6:	b672      	cpsid	i
}
 80003d8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003da:	e7fe      	b.n	80003da <Error_Handler+0x8>

080003dc <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi1_rx;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80003e0:	4b17      	ldr	r3, [pc, #92]	; (8000440 <MX_SPI1_Init+0x64>)
 80003e2:	4a18      	ldr	r2, [pc, #96]	; (8000444 <MX_SPI1_Init+0x68>)
 80003e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80003e6:	4b16      	ldr	r3, [pc, #88]	; (8000440 <MX_SPI1_Init+0x64>)
 80003e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80003ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80003ee:	4b14      	ldr	r3, [pc, #80]	; (8000440 <MX_SPI1_Init+0x64>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80003f4:	4b12      	ldr	r3, [pc, #72]	; (8000440 <MX_SPI1_Init+0x64>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80003fa:	4b11      	ldr	r3, [pc, #68]	; (8000440 <MX_SPI1_Init+0x64>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000400:	4b0f      	ldr	r3, [pc, #60]	; (8000440 <MX_SPI1_Init+0x64>)
 8000402:	2200      	movs	r2, #0
 8000404:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <MX_SPI1_Init+0x64>)
 8000408:	f44f 7200 	mov.w	r2, #512	; 0x200
 800040c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800040e:	4b0c      	ldr	r3, [pc, #48]	; (8000440 <MX_SPI1_Init+0x64>)
 8000410:	2200      	movs	r2, #0
 8000412:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000414:	4b0a      	ldr	r3, [pc, #40]	; (8000440 <MX_SPI1_Init+0x64>)
 8000416:	2200      	movs	r2, #0
 8000418:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <MX_SPI1_Init+0x64>)
 800041c:	2200      	movs	r2, #0
 800041e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000420:	4b07      	ldr	r3, [pc, #28]	; (8000440 <MX_SPI1_Init+0x64>)
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <MX_SPI1_Init+0x64>)
 8000428:	220a      	movs	r2, #10
 800042a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800042c:	4804      	ldr	r0, [pc, #16]	; (8000440 <MX_SPI1_Init+0x64>)
 800042e:	f001 fb37 	bl	8001aa0 <HAL_SPI_Init>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000438:	f7ff ffcb 	bl	80003d2 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800043c:	bf00      	nop
 800043e:	bd80      	pop	{r7, pc}
 8000440:	20000080 	.word	0x20000080
 8000444:	40013000 	.word	0x40013000

08000448 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b088      	sub	sp, #32
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
 8000458:	605a      	str	r2, [r3, #4]
 800045a:	609a      	str	r2, [r3, #8]
 800045c:	60da      	str	r2, [r3, #12]
  if(spiHandle->Instance==SPI1)
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	4a42      	ldr	r2, [pc, #264]	; (800056c <HAL_SPI_MspInit+0x124>)
 8000464:	4293      	cmp	r3, r2
 8000466:	d17d      	bne.n	8000564 <HAL_SPI_MspInit+0x11c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000468:	4b41      	ldr	r3, [pc, #260]	; (8000570 <HAL_SPI_MspInit+0x128>)
 800046a:	699b      	ldr	r3, [r3, #24]
 800046c:	4a40      	ldr	r2, [pc, #256]	; (8000570 <HAL_SPI_MspInit+0x128>)
 800046e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000472:	6193      	str	r3, [r2, #24]
 8000474:	4b3e      	ldr	r3, [pc, #248]	; (8000570 <HAL_SPI_MspInit+0x128>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800047c:	60fb      	str	r3, [r7, #12]
 800047e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000480:	4b3b      	ldr	r3, [pc, #236]	; (8000570 <HAL_SPI_MspInit+0x128>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a3a      	ldr	r2, [pc, #232]	; (8000570 <HAL_SPI_MspInit+0x128>)
 8000486:	f043 0304 	orr.w	r3, r3, #4
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b38      	ldr	r3, [pc, #224]	; (8000570 <HAL_SPI_MspInit+0x128>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f003 0304 	and.w	r3, r3, #4
 8000494:	60bb      	str	r3, [r7, #8]
 8000496:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000498:	23a0      	movs	r3, #160	; 0xa0
 800049a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800049c:	2302      	movs	r3, #2
 800049e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004a0:	2303      	movs	r3, #3
 80004a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004a4:	f107 0310 	add.w	r3, r7, #16
 80004a8:	4619      	mov	r1, r3
 80004aa:	4832      	ldr	r0, [pc, #200]	; (8000574 <HAL_SPI_MspInit+0x12c>)
 80004ac:	f000 fd2a 	bl	8000f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80004b0:	2340      	movs	r3, #64	; 0x40
 80004b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004b8:	2300      	movs	r3, #0
 80004ba:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004bc:	f107 0310 	add.w	r3, r7, #16
 80004c0:	4619      	mov	r1, r3
 80004c2:	482c      	ldr	r0, [pc, #176]	; (8000574 <HAL_SPI_MspInit+0x12c>)
 80004c4:	f000 fd1e 	bl	8000f04 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 80004c8:	4b2b      	ldr	r3, [pc, #172]	; (8000578 <HAL_SPI_MspInit+0x130>)
 80004ca:	4a2c      	ldr	r2, [pc, #176]	; (800057c <HAL_SPI_MspInit+0x134>)
 80004cc:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80004ce:	4b2a      	ldr	r3, [pc, #168]	; (8000578 <HAL_SPI_MspInit+0x130>)
 80004d0:	2200      	movs	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80004d4:	4b28      	ldr	r3, [pc, #160]	; (8000578 <HAL_SPI_MspInit+0x130>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80004da:	4b27      	ldr	r3, [pc, #156]	; (8000578 <HAL_SPI_MspInit+0x130>)
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80004e0:	4b25      	ldr	r3, [pc, #148]	; (8000578 <HAL_SPI_MspInit+0x130>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80004e6:	4b24      	ldr	r3, [pc, #144]	; (8000578 <HAL_SPI_MspInit+0x130>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80004ec:	4b22      	ldr	r3, [pc, #136]	; (8000578 <HAL_SPI_MspInit+0x130>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80004f2:	4b21      	ldr	r3, [pc, #132]	; (8000578 <HAL_SPI_MspInit+0x130>)
 80004f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004f8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80004fa:	481f      	ldr	r0, [pc, #124]	; (8000578 <HAL_SPI_MspInit+0x130>)
 80004fc:	f000 fba2 	bl	8000c44 <HAL_DMA_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <HAL_SPI_MspInit+0xc2>
    {
      Error_Handler();
 8000506:	f7ff ff64 	bl	80003d2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	4a1a      	ldr	r2, [pc, #104]	; (8000578 <HAL_SPI_MspInit+0x130>)
 800050e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000510:	4a19      	ldr	r2, [pc, #100]	; (8000578 <HAL_SPI_MspInit+0x130>)
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	6253      	str	r3, [r2, #36]	; 0x24

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8000516:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <HAL_SPI_MspInit+0x138>)
 8000518:	4a1a      	ldr	r2, [pc, #104]	; (8000584 <HAL_SPI_MspInit+0x13c>)
 800051a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800051c:	4b18      	ldr	r3, [pc, #96]	; (8000580 <HAL_SPI_MspInit+0x138>)
 800051e:	2210      	movs	r2, #16
 8000520:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000522:	4b17      	ldr	r3, [pc, #92]	; (8000580 <HAL_SPI_MspInit+0x138>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000528:	4b15      	ldr	r3, [pc, #84]	; (8000580 <HAL_SPI_MspInit+0x138>)
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800052e:	4b14      	ldr	r3, [pc, #80]	; (8000580 <HAL_SPI_MspInit+0x138>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000534:	4b12      	ldr	r3, [pc, #72]	; (8000580 <HAL_SPI_MspInit+0x138>)
 8000536:	2200      	movs	r2, #0
 8000538:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800053a:	4b11      	ldr	r3, [pc, #68]	; (8000580 <HAL_SPI_MspInit+0x138>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8000540:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <HAL_SPI_MspInit+0x138>)
 8000542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000546:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000548:	480d      	ldr	r0, [pc, #52]	; (8000580 <HAL_SPI_MspInit+0x138>)
 800054a:	f000 fb7b 	bl	8000c44 <HAL_DMA_Init>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d001      	beq.n	8000558 <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000554:	f7ff ff3d 	bl	80003d2 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	4a09      	ldr	r2, [pc, #36]	; (8000580 <HAL_SPI_MspInit+0x138>)
 800055c:	649a      	str	r2, [r3, #72]	; 0x48
 800055e:	4a08      	ldr	r2, [pc, #32]	; (8000580 <HAL_SPI_MspInit+0x138>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000564:	bf00      	nop
 8000566:	3720      	adds	r7, #32
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40013000 	.word	0x40013000
 8000570:	40021000 	.word	0x40021000
 8000574:	40010800 	.word	0x40010800
 8000578:	20000100 	.word	0x20000100
 800057c:	4002001c 	.word	0x4002001c
 8000580:	20000144 	.word	0x20000144
 8000584:	40020030 	.word	0x40020030

08000588 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <HAL_MspInit+0x68>)
 8000590:	699b      	ldr	r3, [r3, #24]
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <HAL_MspInit+0x68>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	6193      	str	r3, [r2, #24]
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <HAL_MspInit+0x68>)
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	60bb      	str	r3, [r7, #8]
 80005a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <HAL_MspInit+0x68>)
 80005a8:	69db      	ldr	r3, [r3, #28]
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <HAL_MspInit+0x68>)
 80005ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b0:	61d3      	str	r3, [r2, #28]
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <HAL_MspInit+0x68>)
 80005b4:	69db      	ldr	r3, [r3, #28]
 80005b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	210f      	movs	r1, #15
 80005c2:	f06f 0001 	mvn.w	r0, #1
 80005c6:	f000 fb06 	bl	8000bd6 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ca:	4b0a      	ldr	r3, [pc, #40]	; (80005f4 <HAL_MspInit+0x6c>)
 80005cc:	685b      	ldr	r3, [r3, #4]
 80005ce:	60fb      	str	r3, [r7, #12]
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005d6:	60fb      	str	r3, [r7, #12]
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005de:	60fb      	str	r3, [r7, #12]
 80005e0:	4a04      	ldr	r2, [pc, #16]	; (80005f4 <HAL_MspInit+0x6c>)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005e6:	bf00      	nop
 80005e8:	3710      	adds	r7, #16
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40021000 	.word	0x40021000
 80005f4:	40010000 	.word	0x40010000

080005f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005fc:	e7fe      	b.n	80005fc <NMI_Handler+0x4>

080005fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005fe:	b480      	push	{r7}
 8000600:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000602:	e7fe      	b.n	8000602 <HardFault_Handler+0x4>

08000604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000608:	e7fe      	b.n	8000608 <MemManage_Handler+0x4>

0800060a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800060a:	b480      	push	{r7}
 800060c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800060e:	e7fe      	b.n	800060e <BusFault_Handler+0x4>

08000610 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000614:	e7fe      	b.n	8000614 <UsageFault_Handler+0x4>

08000616 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	bc80      	pop	{r7}
 8000620:	4770      	bx	lr

08000622 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000622:	b580      	push	{r7, lr}
 8000624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000626:	f000 f9bf 	bl	80009a8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800062a:	f003 fef1 	bl	8004410 <xTaskGetSchedulerState>
 800062e:	4603      	mov	r3, r0
 8000630:	2b01      	cmp	r3, #1
 8000632:	d001      	beq.n	8000638 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000634:	f004 fc50 	bl	8004ed8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000638:	bf00      	nop
 800063a:	bd80      	pop	{r7, pc}

0800063c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8000640:	4802      	ldr	r0, [pc, #8]	; (800064c <DMA1_Channel2_IRQHandler+0x10>)
 8000642:	f000 fb59 	bl	8000cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	20000100 	.word	0x20000100

08000650 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8000654:	4802      	ldr	r0, [pc, #8]	; (8000660 <DMA1_Channel3_IRQHandler+0x10>)
 8000656:	f000 fb4f 	bl	8000cf8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000144 	.word	0x20000144

08000664 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACC_Pin);
 8000668:	2020      	movs	r0, #32
 800066a:	f000 fde7 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800066e:	bf00      	nop
 8000670:	bd80      	pop	{r7, pc}

08000672 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_GYR_Pin);
 8000676:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800067a:	f000 fddf 	bl	800123c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800067e:	bf00      	nop
 8000680:	bd80      	pop	{r7, pc}

08000682 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000682:	b480      	push	{r7}
 8000684:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000686:	bf00      	nop
 8000688:	46bd      	mov	sp, r7
 800068a:	bc80      	pop	{r7}
 800068c:	4770      	bx	lr
	...

08000690 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a0:	1d3b      	adds	r3, r7, #4
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
 80006ae:	615a      	str	r2, [r3, #20]
 80006b0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_TIM3_Init+0xac>)
 80006b4:	4a22      	ldr	r2, [pc, #136]	; (8000740 <MX_TIM3_Init+0xb0>)
 80006b6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 800-1;
 80006b8:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_TIM3_Init+0xac>)
 80006ba:	f240 321f 	movw	r2, #799	; 0x31f
 80006be:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_TIM3_Init+0xac>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100-1;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_TIM3_Init+0xac>)
 80006c8:	2263      	movs	r2, #99	; 0x63
 80006ca:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_TIM3_Init+0xac>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_TIM3_Init+0xac>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80006d8:	4818      	ldr	r0, [pc, #96]	; (800073c <MX_TIM3_Init+0xac>)
 80006da:	f001 fadf 	bl	8001c9c <HAL_TIM_PWM_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80006e4:	f7ff fe75 	bl	80003d2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006e8:	2300      	movs	r3, #0
 80006ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ec:	2300      	movs	r3, #0
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006f0:	f107 0320 	add.w	r3, r7, #32
 80006f4:	4619      	mov	r1, r3
 80006f6:	4811      	ldr	r0, [pc, #68]	; (800073c <MX_TIM3_Init+0xac>)
 80006f8:	f001 ff50 	bl	800259c <HAL_TIMEx_MasterConfigSynchronization>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000702:	f7ff fe66 	bl	80003d2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000706:	2360      	movs	r3, #96	; 0x60
 8000708:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800070e:	2300      	movs	r3, #0
 8000710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	220c      	movs	r2, #12
 800071a:	4619      	mov	r1, r3
 800071c:	4807      	ldr	r0, [pc, #28]	; (800073c <MX_TIM3_Init+0xac>)
 800071e:	f001 fbbb 	bl	8001e98 <HAL_TIM_PWM_ConfigChannel>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <MX_TIM3_Init+0x9c>
  {
    Error_Handler();
 8000728:	f7ff fe53 	bl	80003d2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800072c:	4803      	ldr	r0, [pc, #12]	; (800073c <MX_TIM3_Init+0xac>)
 800072e:	f000 f827 	bl	8000780 <HAL_TIM_MspPostInit>

}
 8000732:	bf00      	nop
 8000734:	3728      	adds	r7, #40	; 0x28
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000188 	.word	0x20000188
 8000740:	40000400 	.word	0x40000400

08000744 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM3)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a09      	ldr	r2, [pc, #36]	; (8000778 <HAL_TIM_PWM_MspInit+0x34>)
 8000752:	4293      	cmp	r3, r2
 8000754:	d10b      	bne.n	800076e <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000756:	4b09      	ldr	r3, [pc, #36]	; (800077c <HAL_TIM_PWM_MspInit+0x38>)
 8000758:	69db      	ldr	r3, [r3, #28]
 800075a:	4a08      	ldr	r2, [pc, #32]	; (800077c <HAL_TIM_PWM_MspInit+0x38>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	61d3      	str	r3, [r2, #28]
 8000762:	4b06      	ldr	r3, [pc, #24]	; (800077c <HAL_TIM_PWM_MspInit+0x38>)
 8000764:	69db      	ldr	r3, [r3, #28]
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr
 8000778:	40000400 	.word	0x40000400
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <HAL_TIM_MspPostInit+0x58>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d117      	bne.n	80007d0 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	4b0e      	ldr	r3, [pc, #56]	; (80007dc <HAL_TIM_MspPostInit+0x5c>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a0d      	ldr	r2, [pc, #52]	; (80007dc <HAL_TIM_MspPostInit+0x5c>)
 80007a6:	f043 0308 	orr.w	r3, r3, #8
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <HAL_TIM_MspPostInit+0x5c>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0308 	and.w	r3, r3, #8
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80007b8:	2302      	movs	r3, #2
 80007ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007bc:	2302      	movs	r3, #2
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c4:	f107 0310 	add.w	r3, r7, #16
 80007c8:	4619      	mov	r1, r3
 80007ca:	4805      	ldr	r0, [pc, #20]	; (80007e0 <HAL_TIM_MspPostInit+0x60>)
 80007cc:	f000 fb9a 	bl	8000f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3720      	adds	r7, #32
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40000400 	.word	0x40000400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010c00 	.word	0x40010c00

080007e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80007e8:	4b11      	ldr	r3, [pc, #68]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007ea:	4a12      	ldr	r2, [pc, #72]	; (8000834 <MX_USART1_UART_Init+0x50>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b0e      	ldr	r3, [pc, #56]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0c      	ldr	r3, [pc, #48]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0b      	ldr	r3, [pc, #44]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b09      	ldr	r3, [pc, #36]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b08      	ldr	r3, [pc, #32]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800081a:	4805      	ldr	r0, [pc, #20]	; (8000830 <MX_USART1_UART_Init+0x4c>)
 800081c:	f001 ff38 	bl	8002690 <HAL_UART_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000826:	f7ff fdd4 	bl	80003d2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	2000023c 	.word	0x2000023c
 8000834:	40013800 	.word	0x40013800

08000838 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a1c      	ldr	r2, [pc, #112]	; (80008c4 <HAL_UART_MspInit+0x8c>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d131      	bne.n	80008bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_UART_MspInit+0x90>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a1a      	ldr	r2, [pc, #104]	; (80008c8 <HAL_UART_MspInit+0x90>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b18      	ldr	r3, [pc, #96]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b15      	ldr	r3, [pc, #84]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a14      	ldr	r2, [pc, #80]	; (80008c8 <HAL_UART_MspInit+0x90>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b12      	ldr	r3, [pc, #72]	; (80008c8 <HAL_UART_MspInit+0x90>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000888:	f44f 7300 	mov.w	r3, #512	; 0x200
 800088c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088e:	2302      	movs	r3, #2
 8000890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000892:	2303      	movs	r3, #3
 8000894:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000896:	f107 0310 	add.w	r3, r7, #16
 800089a:	4619      	mov	r1, r3
 800089c:	480b      	ldr	r0, [pc, #44]	; (80008cc <HAL_UART_MspInit+0x94>)
 800089e:	f000 fb31 	bl	8000f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b0:	f107 0310 	add.w	r3, r7, #16
 80008b4:	4619      	mov	r1, r3
 80008b6:	4805      	ldr	r0, [pc, #20]	; (80008cc <HAL_UART_MspInit+0x94>)
 80008b8:	f000 fb24 	bl	8000f04 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008bc:	bf00      	nop
 80008be:	3720      	adds	r7, #32
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	40013800 	.word	0x40013800
 80008c8:	40021000 	.word	0x40021000
 80008cc:	40010800 	.word	0x40010800

080008d0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008d0:	f7ff fed7 	bl	8000682 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d4:	480b      	ldr	r0, [pc, #44]	; (8000904 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008d6:	490c      	ldr	r1, [pc, #48]	; (8000908 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008d8:	4a0c      	ldr	r2, [pc, #48]	; (800090c <LoopFillZerobss+0x16>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008dc:	e002      	b.n	80008e4 <LoopCopyDataInit>

080008de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e2:	3304      	adds	r3, #4

080008e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008e8:	d3f9      	bcc.n	80008de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ea:	4a09      	ldr	r2, [pc, #36]	; (8000910 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80008ec:	4c09      	ldr	r4, [pc, #36]	; (8000914 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f0:	e001      	b.n	80008f6 <LoopFillZerobss>

080008f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f4:	3204      	adds	r2, #4

080008f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008f8:	d3fb      	bcc.n	80008f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008fa:	f004 fda5 	bl	8005448 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008fe:	f7ff fce9 	bl	80002d4 <main>
  bx lr
 8000902:	4770      	bx	lr
  ldr r0, =_sdata
 8000904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000908:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800090c:	080055ec 	.word	0x080055ec
  ldr r2, =_sbss
 8000910:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000914:	20001dd8 	.word	0x20001dd8

08000918 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000918:	e7fe      	b.n	8000918 <ADC1_2_IRQHandler>
	...

0800091c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000920:	4b08      	ldr	r3, [pc, #32]	; (8000944 <HAL_Init+0x28>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a07      	ldr	r2, [pc, #28]	; (8000944 <HAL_Init+0x28>)
 8000926:	f043 0310 	orr.w	r3, r3, #16
 800092a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092c:	2003      	movs	r0, #3
 800092e:	f000 f947 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000932:	200f      	movs	r0, #15
 8000934:	f000 f808 	bl	8000948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000938:	f7ff fe26 	bl	8000588 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40022000 	.word	0x40022000

08000948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000950:	4b12      	ldr	r3, [pc, #72]	; (800099c <HAL_InitTick+0x54>)
 8000952:	681a      	ldr	r2, [r3, #0]
 8000954:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_InitTick+0x58>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4619      	mov	r1, r3
 800095a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800095e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000962:	fbb2 f3f3 	udiv	r3, r2, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f95f 	bl	8000c2a <HAL_SYSTICK_Config>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e00e      	b.n	8000994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b0f      	cmp	r3, #15
 800097a:	d80a      	bhi.n	8000992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800097c:	2200      	movs	r2, #0
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000984:	f000 f927 	bl	8000bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000988:	4a06      	ldr	r2, [pc, #24]	; (80009a4 <HAL_InitTick+0x5c>)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800098e:	2300      	movs	r3, #0
 8000990:	e000      	b.n	8000994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000008 	.word	0x20000008
 80009a4:	20000004 	.word	0x20000004

080009a8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HAL_IncTick+0x1c>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b05      	ldr	r3, [pc, #20]	; (80009c8 <HAL_IncTick+0x20>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a03      	ldr	r2, [pc, #12]	; (80009c8 <HAL_IncTick+0x20>)
 80009ba:	6013      	str	r3, [r2, #0]
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	20000008 	.word	0x20000008
 80009c8:	200002b4 	.word	0x200002b4

080009cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  return uwTick;
 80009d0:	4b02      	ldr	r3, [pc, #8]	; (80009dc <HAL_GetTick+0x10>)
 80009d2:	681b      	ldr	r3, [r3, #0]
}
 80009d4:	4618      	mov	r0, r3
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	200002b4 	.word	0x200002b4

080009e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e8:	f7ff fff0 	bl	80009cc <HAL_GetTick>
 80009ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80009f8:	d005      	beq.n	8000a06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009fa:	4b0a      	ldr	r3, [pc, #40]	; (8000a24 <HAL_Delay+0x44>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a06:	bf00      	nop
 8000a08:	f7ff ffe0 	bl	80009cc <HAL_GetTick>
 8000a0c:	4602      	mov	r2, r0
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d8f7      	bhi.n	8000a08 <HAL_Delay+0x28>
  {
  }
}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	20000008 	.word	0x20000008

08000a28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b085      	sub	sp, #20
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a38:	4b0c      	ldr	r3, [pc, #48]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3a:	68db      	ldr	r3, [r3, #12]
 8000a3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3e:	68ba      	ldr	r2, [r7, #8]
 8000a40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a44:	4013      	ands	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a5a:	4a04      	ldr	r2, [pc, #16]	; (8000a6c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	60d3      	str	r3, [r2, #12]
}
 8000a60:	bf00      	nop
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a74:	4b04      	ldr	r3, [pc, #16]	; (8000a88 <__NVIC_GetPriorityGrouping+0x18>)
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	0a1b      	lsrs	r3, r3, #8
 8000a7a:	f003 0307 	and.w	r3, r3, #7
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bc80      	pop	{r7}
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	e000ed00 	.word	0xe000ed00

08000a8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	db0b      	blt.n	8000ab6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	f003 021f 	and.w	r2, r3, #31
 8000aa4:	4906      	ldr	r1, [pc, #24]	; (8000ac0 <__NVIC_EnableIRQ+0x34>)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	095b      	lsrs	r3, r3, #5
 8000aac:	2001      	movs	r0, #1
 8000aae:	fa00 f202 	lsl.w	r2, r0, r2
 8000ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ab6:	bf00      	nop
 8000ab8:	370c      	adds	r7, #12
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bc80      	pop	{r7}
 8000abe:	4770      	bx	lr
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	; (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bc80      	pop	{r7}
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	; 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bc80      	pop	{r7}
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ba0:	f7ff ff90 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff2d 	bl	8000a28 <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff42 	bl	8000a70 <__NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff90 	bl	8000b18 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5f 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff ff35 	bl	8000a8c <__NVIC_EnableIRQ>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	b082      	sub	sp, #8
 8000c2e:	af00      	add	r7, sp, #0
 8000c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff ffa2 	bl	8000b7c <SysTick_Config>
 8000c38:	4603      	mov	r3, r0
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d101      	bne.n	8000c5a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000c56:	2301      	movs	r3, #1
 8000c58:	e043      	b.n	8000ce2 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	4b22      	ldr	r3, [pc, #136]	; (8000cec <HAL_DMA_Init+0xa8>)
 8000c62:	4413      	add	r3, r2
 8000c64:	4a22      	ldr	r2, [pc, #136]	; (8000cf0 <HAL_DMA_Init+0xac>)
 8000c66:	fba2 2303 	umull	r2, r3, r2, r3
 8000c6a:	091b      	lsrs	r3, r3, #4
 8000c6c:	009a      	lsls	r2, r3, #2
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <HAL_DMA_Init+0xb0>)
 8000c76:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	2202      	movs	r2, #2
 8000c7c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000c8e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000c92:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ca8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	695b      	ldr	r3, [r3, #20]
 8000cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000cb4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	69db      	ldr	r3, [r3, #28]
 8000cba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000cbc:	68fa      	ldr	r2, [r7, #12]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2200      	movs	r2, #0
 8000cdc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000ce0:	2300      	movs	r3, #0
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3714      	adds	r7, #20
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	bffdfff8 	.word	0xbffdfff8
 8000cf0:	cccccccd 	.word	0xcccccccd
 8000cf4:	40020000 	.word	0x40020000

08000cf8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b084      	sub	sp, #16
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d14:	2204      	movs	r2, #4
 8000d16:	409a      	lsls	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d04f      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0xc8>
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d04a      	beq.n	8000dc0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	f003 0320 	and.w	r3, r3, #32
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d107      	bne.n	8000d48 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	681a      	ldr	r2, [r3, #0]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f022 0204 	bic.w	r2, r2, #4
 8000d46:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a66      	ldr	r2, [pc, #408]	; (8000ee8 <HAL_DMA_IRQHandler+0x1f0>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d029      	beq.n	8000da6 <HAL_DMA_IRQHandler+0xae>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a65      	ldr	r2, [pc, #404]	; (8000eec <HAL_DMA_IRQHandler+0x1f4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d022      	beq.n	8000da2 <HAL_DMA_IRQHandler+0xaa>
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a63      	ldr	r2, [pc, #396]	; (8000ef0 <HAL_DMA_IRQHandler+0x1f8>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d01a      	beq.n	8000d9c <HAL_DMA_IRQHandler+0xa4>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a62      	ldr	r2, [pc, #392]	; (8000ef4 <HAL_DMA_IRQHandler+0x1fc>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d012      	beq.n	8000d96 <HAL_DMA_IRQHandler+0x9e>
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a60      	ldr	r2, [pc, #384]	; (8000ef8 <HAL_DMA_IRQHandler+0x200>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d00a      	beq.n	8000d90 <HAL_DMA_IRQHandler+0x98>
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a5f      	ldr	r2, [pc, #380]	; (8000efc <HAL_DMA_IRQHandler+0x204>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d102      	bne.n	8000d8a <HAL_DMA_IRQHandler+0x92>
 8000d84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d88:	e00e      	b.n	8000da8 <HAL_DMA_IRQHandler+0xb0>
 8000d8a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000d8e:	e00b      	b.n	8000da8 <HAL_DMA_IRQHandler+0xb0>
 8000d90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000d94:	e008      	b.n	8000da8 <HAL_DMA_IRQHandler+0xb0>
 8000d96:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d9a:	e005      	b.n	8000da8 <HAL_DMA_IRQHandler+0xb0>
 8000d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000da0:	e002      	b.n	8000da8 <HAL_DMA_IRQHandler+0xb0>
 8000da2:	2340      	movs	r3, #64	; 0x40
 8000da4:	e000      	b.n	8000da8 <HAL_DMA_IRQHandler+0xb0>
 8000da6:	2304      	movs	r3, #4
 8000da8:	4a55      	ldr	r2, [pc, #340]	; (8000f00 <HAL_DMA_IRQHandler+0x208>)
 8000daa:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 8094 	beq.w	8000ede <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000dbe:	e08e      	b.n	8000ede <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d056      	beq.n	8000e7e <HAL_DMA_IRQHandler+0x186>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d051      	beq.n	8000e7e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10b      	bne.n	8000e00 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 020a 	bic.w	r2, r2, #10
 8000df6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a38      	ldr	r2, [pc, #224]	; (8000ee8 <HAL_DMA_IRQHandler+0x1f0>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d029      	beq.n	8000e5e <HAL_DMA_IRQHandler+0x166>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a37      	ldr	r2, [pc, #220]	; (8000eec <HAL_DMA_IRQHandler+0x1f4>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d022      	beq.n	8000e5a <HAL_DMA_IRQHandler+0x162>
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a35      	ldr	r2, [pc, #212]	; (8000ef0 <HAL_DMA_IRQHandler+0x1f8>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d01a      	beq.n	8000e54 <HAL_DMA_IRQHandler+0x15c>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a34      	ldr	r2, [pc, #208]	; (8000ef4 <HAL_DMA_IRQHandler+0x1fc>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d012      	beq.n	8000e4e <HAL_DMA_IRQHandler+0x156>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a32      	ldr	r2, [pc, #200]	; (8000ef8 <HAL_DMA_IRQHandler+0x200>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00a      	beq.n	8000e48 <HAL_DMA_IRQHandler+0x150>
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a31      	ldr	r2, [pc, #196]	; (8000efc <HAL_DMA_IRQHandler+0x204>)
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d102      	bne.n	8000e42 <HAL_DMA_IRQHandler+0x14a>
 8000e3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000e40:	e00e      	b.n	8000e60 <HAL_DMA_IRQHandler+0x168>
 8000e42:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e46:	e00b      	b.n	8000e60 <HAL_DMA_IRQHandler+0x168>
 8000e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e4c:	e008      	b.n	8000e60 <HAL_DMA_IRQHandler+0x168>
 8000e4e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e52:	e005      	b.n	8000e60 <HAL_DMA_IRQHandler+0x168>
 8000e54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e58:	e002      	b.n	8000e60 <HAL_DMA_IRQHandler+0x168>
 8000e5a:	2320      	movs	r3, #32
 8000e5c:	e000      	b.n	8000e60 <HAL_DMA_IRQHandler+0x168>
 8000e5e:	2302      	movs	r3, #2
 8000e60:	4a27      	ldr	r2, [pc, #156]	; (8000f00 <HAL_DMA_IRQHandler+0x208>)
 8000e62:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d034      	beq.n	8000ede <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e7c:	e02f      	b.n	8000ede <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	2208      	movs	r2, #8
 8000e84:	409a      	lsls	r2, r3
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d028      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0x1e8>
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d023      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 020e 	bic.w	r2, r2, #14
 8000ea6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8000eb6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2200      	movs	r2, #0
 8000eca:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d004      	beq.n	8000ee0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	4798      	blx	r3
    }
  }
  return;
 8000ede:	bf00      	nop
 8000ee0:	bf00      	nop
}
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40020008 	.word	0x40020008
 8000eec:	4002001c 	.word	0x4002001c
 8000ef0:	40020030 	.word	0x40020030
 8000ef4:	40020044 	.word	0x40020044
 8000ef8:	40020058 	.word	0x40020058
 8000efc:	4002006c 	.word	0x4002006c
 8000f00:	40020000 	.word	0x40020000

08000f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b08b      	sub	sp, #44	; 0x2c
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
 8000f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f12:	2300      	movs	r3, #0
 8000f14:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f16:	e169      	b.n	80011ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	69fa      	ldr	r2, [r7, #28]
 8000f28:	4013      	ands	r3, r2
 8000f2a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f2c:	69ba      	ldr	r2, [r7, #24]
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	f040 8158 	bne.w	80011e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4a9a      	ldr	r2, [pc, #616]	; (80011a4 <HAL_GPIO_Init+0x2a0>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d05e      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f40:	4a98      	ldr	r2, [pc, #608]	; (80011a4 <HAL_GPIO_Init+0x2a0>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d875      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f46:	4a98      	ldr	r2, [pc, #608]	; (80011a8 <HAL_GPIO_Init+0x2a4>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d058      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f4c:	4a96      	ldr	r2, [pc, #600]	; (80011a8 <HAL_GPIO_Init+0x2a4>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d86f      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f52:	4a96      	ldr	r2, [pc, #600]	; (80011ac <HAL_GPIO_Init+0x2a8>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d052      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f58:	4a94      	ldr	r2, [pc, #592]	; (80011ac <HAL_GPIO_Init+0x2a8>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d869      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f5e:	4a94      	ldr	r2, [pc, #592]	; (80011b0 <HAL_GPIO_Init+0x2ac>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d04c      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f64:	4a92      	ldr	r2, [pc, #584]	; (80011b0 <HAL_GPIO_Init+0x2ac>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d863      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f6a:	4a92      	ldr	r2, [pc, #584]	; (80011b4 <HAL_GPIO_Init+0x2b0>)
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d046      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
 8000f70:	4a90      	ldr	r2, [pc, #576]	; (80011b4 <HAL_GPIO_Init+0x2b0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d85d      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f76:	2b12      	cmp	r3, #18
 8000f78:	d82a      	bhi.n	8000fd0 <HAL_GPIO_Init+0xcc>
 8000f7a:	2b12      	cmp	r3, #18
 8000f7c:	d859      	bhi.n	8001032 <HAL_GPIO_Init+0x12e>
 8000f7e:	a201      	add	r2, pc, #4	; (adr r2, 8000f84 <HAL_GPIO_Init+0x80>)
 8000f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f84:	08000fff 	.word	0x08000fff
 8000f88:	08000fd9 	.word	0x08000fd9
 8000f8c:	08000feb 	.word	0x08000feb
 8000f90:	0800102d 	.word	0x0800102d
 8000f94:	08001033 	.word	0x08001033
 8000f98:	08001033 	.word	0x08001033
 8000f9c:	08001033 	.word	0x08001033
 8000fa0:	08001033 	.word	0x08001033
 8000fa4:	08001033 	.word	0x08001033
 8000fa8:	08001033 	.word	0x08001033
 8000fac:	08001033 	.word	0x08001033
 8000fb0:	08001033 	.word	0x08001033
 8000fb4:	08001033 	.word	0x08001033
 8000fb8:	08001033 	.word	0x08001033
 8000fbc:	08001033 	.word	0x08001033
 8000fc0:	08001033 	.word	0x08001033
 8000fc4:	08001033 	.word	0x08001033
 8000fc8:	08000fe1 	.word	0x08000fe1
 8000fcc:	08000ff5 	.word	0x08000ff5
 8000fd0:	4a79      	ldr	r2, [pc, #484]	; (80011b8 <HAL_GPIO_Init+0x2b4>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000fd6:	e02c      	b.n	8001032 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	623b      	str	r3, [r7, #32]
          break;
 8000fde:	e029      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	3304      	adds	r3, #4
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	e024      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	68db      	ldr	r3, [r3, #12]
 8000fee:	3308      	adds	r3, #8
 8000ff0:	623b      	str	r3, [r7, #32]
          break;
 8000ff2:	e01f      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	330c      	adds	r3, #12
 8000ffa:	623b      	str	r3, [r7, #32]
          break;
 8000ffc:	e01a      	b.n	8001034 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001006:	2304      	movs	r3, #4
 8001008:	623b      	str	r3, [r7, #32]
          break;
 800100a:	e013      	b.n	8001034 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	2b01      	cmp	r3, #1
 8001012:	d105      	bne.n	8001020 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001014:	2308      	movs	r3, #8
 8001016:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	611a      	str	r2, [r3, #16]
          break;
 800101e:	e009      	b.n	8001034 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001020:	2308      	movs	r3, #8
 8001022:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	69fa      	ldr	r2, [r7, #28]
 8001028:	615a      	str	r2, [r3, #20]
          break;
 800102a:	e003      	b.n	8001034 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]
          break;
 8001030:	e000      	b.n	8001034 <HAL_GPIO_Init+0x130>
          break;
 8001032:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2bff      	cmp	r3, #255	; 0xff
 8001038:	d801      	bhi.n	800103e <HAL_GPIO_Init+0x13a>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	e001      	b.n	8001042 <HAL_GPIO_Init+0x13e>
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	3304      	adds	r3, #4
 8001042:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2bff      	cmp	r3, #255	; 0xff
 8001048:	d802      	bhi.n	8001050 <HAL_GPIO_Init+0x14c>
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	e002      	b.n	8001056 <HAL_GPIO_Init+0x152>
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	3b08      	subs	r3, #8
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	210f      	movs	r1, #15
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	fa01 f303 	lsl.w	r3, r1, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	401a      	ands	r2, r3
 8001068:	6a39      	ldr	r1, [r7, #32]
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	fa01 f303 	lsl.w	r3, r1, r3
 8001070:	431a      	orrs	r2, r3
 8001072:	697b      	ldr	r3, [r7, #20]
 8001074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80b1 	beq.w	80011e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001084:	4b4d      	ldr	r3, [pc, #308]	; (80011bc <HAL_GPIO_Init+0x2b8>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a4c      	ldr	r2, [pc, #304]	; (80011bc <HAL_GPIO_Init+0x2b8>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <HAL_GPIO_Init+0x2b8>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0301 	and.w	r3, r3, #1
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800109c:	4a48      	ldr	r2, [pc, #288]	; (80011c0 <HAL_GPIO_Init+0x2bc>)
 800109e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a0:	089b      	lsrs	r3, r3, #2
 80010a2:	3302      	adds	r3, #2
 80010a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	220f      	movs	r2, #15
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	68fa      	ldr	r2, [r7, #12]
 80010bc:	4013      	ands	r3, r2
 80010be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4a40      	ldr	r2, [pc, #256]	; (80011c4 <HAL_GPIO_Init+0x2c0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d013      	beq.n	80010f0 <HAL_GPIO_Init+0x1ec>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a3f      	ldr	r2, [pc, #252]	; (80011c8 <HAL_GPIO_Init+0x2c4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d00d      	beq.n	80010ec <HAL_GPIO_Init+0x1e8>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a3e      	ldr	r2, [pc, #248]	; (80011cc <HAL_GPIO_Init+0x2c8>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d007      	beq.n	80010e8 <HAL_GPIO_Init+0x1e4>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a3d      	ldr	r2, [pc, #244]	; (80011d0 <HAL_GPIO_Init+0x2cc>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d101      	bne.n	80010e4 <HAL_GPIO_Init+0x1e0>
 80010e0:	2303      	movs	r3, #3
 80010e2:	e006      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010e4:	2304      	movs	r3, #4
 80010e6:	e004      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010e8:	2302      	movs	r3, #2
 80010ea:	e002      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <HAL_GPIO_Init+0x1ee>
 80010f0:	2300      	movs	r3, #0
 80010f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010f4:	f002 0203 	and.w	r2, r2, #3
 80010f8:	0092      	lsls	r2, r2, #2
 80010fa:	4093      	lsls	r3, r2
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	4313      	orrs	r3, r2
 8001100:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001102:	492f      	ldr	r1, [pc, #188]	; (80011c0 <HAL_GPIO_Init+0x2bc>)
 8001104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d006      	beq.n	800112a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800111c:	4b2d      	ldr	r3, [pc, #180]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	492c      	ldr	r1, [pc, #176]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	4313      	orrs	r3, r2
 8001126:	608b      	str	r3, [r1, #8]
 8001128:	e006      	b.n	8001138 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800112a:	4b2a      	ldr	r3, [pc, #168]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800112c:	689a      	ldr	r2, [r3, #8]
 800112e:	69bb      	ldr	r3, [r7, #24]
 8001130:	43db      	mvns	r3, r3
 8001132:	4928      	ldr	r1, [pc, #160]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001134:	4013      	ands	r3, r2
 8001136:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001140:	2b00      	cmp	r3, #0
 8001142:	d006      	beq.n	8001152 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001144:	4b23      	ldr	r3, [pc, #140]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	4922      	ldr	r1, [pc, #136]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800114a:	69bb      	ldr	r3, [r7, #24]
 800114c:	4313      	orrs	r3, r2
 800114e:	60cb      	str	r3, [r1, #12]
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001152:	4b20      	ldr	r3, [pc, #128]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001154:	68da      	ldr	r2, [r3, #12]
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	43db      	mvns	r3, r3
 800115a:	491e      	ldr	r1, [pc, #120]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800115c:	4013      	ands	r3, r2
 800115e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d006      	beq.n	800117a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800116c:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800116e:	685a      	ldr	r2, [r3, #4]
 8001170:	4918      	ldr	r1, [pc, #96]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001172:	69bb      	ldr	r3, [r7, #24]
 8001174:	4313      	orrs	r3, r2
 8001176:	604b      	str	r3, [r1, #4]
 8001178:	e006      	b.n	8001188 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800117a:	4b16      	ldr	r3, [pc, #88]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	43db      	mvns	r3, r3
 8001182:	4914      	ldr	r1, [pc, #80]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001184:	4013      	ands	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d021      	beq.n	80011d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001194:	4b0f      	ldr	r3, [pc, #60]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	490e      	ldr	r1, [pc, #56]	; (80011d4 <HAL_GPIO_Init+0x2d0>)
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	4313      	orrs	r3, r2
 800119e:	600b      	str	r3, [r1, #0]
 80011a0:	e021      	b.n	80011e6 <HAL_GPIO_Init+0x2e2>
 80011a2:	bf00      	nop
 80011a4:	10320000 	.word	0x10320000
 80011a8:	10310000 	.word	0x10310000
 80011ac:	10220000 	.word	0x10220000
 80011b0:	10210000 	.word	0x10210000
 80011b4:	10120000 	.word	0x10120000
 80011b8:	10110000 	.word	0x10110000
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40010000 	.word	0x40010000
 80011c4:	40010800 	.word	0x40010800
 80011c8:	40010c00 	.word	0x40010c00
 80011cc:	40011000 	.word	0x40011000
 80011d0:	40011400 	.word	0x40011400
 80011d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	69bb      	ldr	r3, [r7, #24]
 80011de:	43db      	mvns	r3, r3
 80011e0:	4909      	ldr	r1, [pc, #36]	; (8001208 <HAL_GPIO_Init+0x304>)
 80011e2:	4013      	ands	r3, r2
 80011e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80011e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e8:	3301      	adds	r3, #1
 80011ea:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011f2:	fa22 f303 	lsr.w	r3, r2, r3
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	f47f ae8e 	bne.w	8000f18 <HAL_GPIO_Init+0x14>
  }
}
 80011fc:	bf00      	nop
 80011fe:	bf00      	nop
 8001200:	372c      	adds	r7, #44	; 0x2c
 8001202:	46bd      	mov	sp, r7
 8001204:	bc80      	pop	{r7}
 8001206:	4770      	bx	lr
 8001208:	40010400 	.word	0x40010400

0800120c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800120c:	b480      	push	{r7}
 800120e:	b083      	sub	sp, #12
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	807b      	strh	r3, [r7, #2]
 8001218:	4613      	mov	r3, r2
 800121a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d003      	beq.n	800122a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001222:	887a      	ldrh	r2, [r7, #2]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001228:	e003      	b.n	8001232 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800122a:	887b      	ldrh	r3, [r7, #2]
 800122c:	041a      	lsls	r2, r3, #16
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	611a      	str	r2, [r3, #16]
}
 8001232:	bf00      	nop
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	bc80      	pop	{r7}
 800123a:	4770      	bx	lr

0800123c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	4603      	mov	r3, r0
 8001244:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001248:	695a      	ldr	r2, [r3, #20]
 800124a:	88fb      	ldrh	r3, [r7, #6]
 800124c:	4013      	ands	r3, r2
 800124e:	2b00      	cmp	r3, #0
 8001250:	d006      	beq.n	8001260 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001254:	88fb      	ldrh	r3, [r7, #6]
 8001256:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001258:	88fb      	ldrh	r3, [r7, #6]
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f806 	bl	800126c <HAL_GPIO_EXTI_Callback>
  }
}
 8001260:	bf00      	nop
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40010400 	.word	0x40010400

0800126c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001276:	bf00      	nop
 8001278:	370c      	adds	r7, #12
 800127a:	46bd      	mov	sp, r7
 800127c:	bc80      	pop	{r7}
 800127e:	4770      	bx	lr

08001280 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e272      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	2b00      	cmp	r3, #0
 800129c:	f000 8087 	beq.w	80013ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012a0:	4b92      	ldr	r3, [pc, #584]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b04      	cmp	r3, #4
 80012aa:	d00c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012ac:	4b8f      	ldr	r3, [pc, #572]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d112      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
 80012b8:	4b8c      	ldr	r3, [pc, #560]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012c4:	d10b      	bne.n	80012de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012c6:	4b89      	ldr	r3, [pc, #548]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d06c      	beq.n	80013ac <HAL_RCC_OscConfig+0x12c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d168      	bne.n	80013ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e24c      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e6:	d106      	bne.n	80012f6 <HAL_RCC_OscConfig+0x76>
 80012e8:	4b80      	ldr	r3, [pc, #512]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a7f      	ldr	r2, [pc, #508]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80012ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	e02e      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10c      	bne.n	8001318 <HAL_RCC_OscConfig+0x98>
 80012fe:	4b7b      	ldr	r3, [pc, #492]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7a      	ldr	r2, [pc, #488]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001304:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	4b78      	ldr	r3, [pc, #480]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a77      	ldr	r2, [pc, #476]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001310:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	e01d      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001320:	d10c      	bne.n	800133c <HAL_RCC_OscConfig+0xbc>
 8001322:	4b72      	ldr	r3, [pc, #456]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a71      	ldr	r2, [pc, #452]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001328:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	4b6f      	ldr	r3, [pc, #444]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a6e      	ldr	r2, [pc, #440]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	e00b      	b.n	8001354 <HAL_RCC_OscConfig+0xd4>
 800133c:	4b6b      	ldr	r3, [pc, #428]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a6a      	ldr	r2, [pc, #424]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001342:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	4b68      	ldr	r3, [pc, #416]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a67      	ldr	r2, [pc, #412]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 800134e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001352:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d013      	beq.n	8001384 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800135c:	f7ff fb36 	bl	80009cc <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001364:	f7ff fb32 	bl	80009cc <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b64      	cmp	r3, #100	; 0x64
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e200      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001376:	4b5d      	ldr	r3, [pc, #372]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d0f0      	beq.n	8001364 <HAL_RCC_OscConfig+0xe4>
 8001382:	e014      	b.n	80013ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001384:	f7ff fb22 	bl	80009cc <HAL_GetTick>
 8001388:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	e008      	b.n	800139e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800138c:	f7ff fb1e 	bl	80009cc <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b64      	cmp	r3, #100	; 0x64
 8001398:	d901      	bls.n	800139e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800139a:	2303      	movs	r3, #3
 800139c:	e1ec      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800139e:	4b53      	ldr	r3, [pc, #332]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d1f0      	bne.n	800138c <HAL_RCC_OscConfig+0x10c>
 80013aa:	e000      	b.n	80013ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f003 0302 	and.w	r3, r3, #2
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d063      	beq.n	8001482 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ba:	4b4c      	ldr	r3, [pc, #304]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d00b      	beq.n	80013de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013c6:	4b49      	ldr	r3, [pc, #292]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f003 030c 	and.w	r3, r3, #12
 80013ce:	2b08      	cmp	r3, #8
 80013d0:	d11c      	bne.n	800140c <HAL_RCC_OscConfig+0x18c>
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d116      	bne.n	800140c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0302 	and.w	r3, r3, #2
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d005      	beq.n	80013f6 <HAL_RCC_OscConfig+0x176>
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	691b      	ldr	r3, [r3, #16]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d001      	beq.n	80013f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e1c0      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	00db      	lsls	r3, r3, #3
 8001404:	4939      	ldr	r1, [pc, #228]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001406:	4313      	orrs	r3, r2
 8001408:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800140a:	e03a      	b.n	8001482 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	691b      	ldr	r3, [r3, #16]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001414:	4b36      	ldr	r3, [pc, #216]	; (80014f0 <HAL_RCC_OscConfig+0x270>)
 8001416:	2201      	movs	r2, #1
 8001418:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800141a:	f7ff fad7 	bl	80009cc <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001420:	e008      	b.n	8001434 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001422:	f7ff fad3 	bl	80009cc <HAL_GetTick>
 8001426:	4602      	mov	r2, r0
 8001428:	693b      	ldr	r3, [r7, #16]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	2b02      	cmp	r3, #2
 800142e:	d901      	bls.n	8001434 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001430:	2303      	movs	r3, #3
 8001432:	e1a1      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001434:	4b2d      	ldr	r3, [pc, #180]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f003 0302 	and.w	r3, r3, #2
 800143c:	2b00      	cmp	r3, #0
 800143e:	d0f0      	beq.n	8001422 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001440:	4b2a      	ldr	r3, [pc, #168]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	695b      	ldr	r3, [r3, #20]
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	4927      	ldr	r1, [pc, #156]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001450:	4313      	orrs	r3, r2
 8001452:	600b      	str	r3, [r1, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001456:	4b26      	ldr	r3, [pc, #152]	; (80014f0 <HAL_RCC_OscConfig+0x270>)
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800145c:	f7ff fab6 	bl	80009cc <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001464:	f7ff fab2 	bl	80009cc <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e180      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001476:	4b1d      	ldr	r3, [pc, #116]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d03a      	beq.n	8001504 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	699b      	ldr	r3, [r3, #24]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <HAL_RCC_OscConfig+0x274>)
 8001498:	2201      	movs	r2, #1
 800149a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800149c:	f7ff fa96 	bl	80009cc <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014a4:	f7ff fa92 	bl	80009cc <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e160      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014b6:	4b0d      	ldr	r3, [pc, #52]	; (80014ec <HAL_RCC_OscConfig+0x26c>)
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d0f0      	beq.n	80014a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014c2:	2001      	movs	r0, #1
 80014c4:	f000 face 	bl	8001a64 <RCC_Delay>
 80014c8:	e01c      	b.n	8001504 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_RCC_OscConfig+0x274>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d0:	f7ff fa7c 	bl	80009cc <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014d6:	e00f      	b.n	80014f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d8:	f7ff fa78 	bl	80009cc <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d908      	bls.n	80014f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e146      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
 80014ea:	bf00      	nop
 80014ec:	40021000 	.word	0x40021000
 80014f0:	42420000 	.word	0x42420000
 80014f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f8:	4b92      	ldr	r3, [pc, #584]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d1e9      	bne.n	80014d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f003 0304 	and.w	r3, r3, #4
 800150c:	2b00      	cmp	r3, #0
 800150e:	f000 80a6 	beq.w	800165e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001512:	2300      	movs	r3, #0
 8001514:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001516:	4b8b      	ldr	r3, [pc, #556]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d10d      	bne.n	800153e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001522:	4b88      	ldr	r3, [pc, #544]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	4a87      	ldr	r2, [pc, #540]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152c:	61d3      	str	r3, [r2, #28]
 800152e:	4b85      	ldr	r3, [pc, #532]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800153a:	2301      	movs	r3, #1
 800153c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800153e:	4b82      	ldr	r3, [pc, #520]	; (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001546:	2b00      	cmp	r3, #0
 8001548:	d118      	bne.n	800157c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800154a:	4b7f      	ldr	r3, [pc, #508]	; (8001748 <HAL_RCC_OscConfig+0x4c8>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a7e      	ldr	r2, [pc, #504]	; (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001556:	f7ff fa39 	bl	80009cc <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155c:	e008      	b.n	8001570 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800155e:	f7ff fa35 	bl	80009cc <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	2b64      	cmp	r3, #100	; 0x64
 800156a:	d901      	bls.n	8001570 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800156c:	2303      	movs	r3, #3
 800156e:	e103      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	4b75      	ldr	r3, [pc, #468]	; (8001748 <HAL_RCC_OscConfig+0x4c8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0f0      	beq.n	800155e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d106      	bne.n	8001592 <HAL_RCC_OscConfig+0x312>
 8001584:	4b6f      	ldr	r3, [pc, #444]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4a6e      	ldr	r2, [pc, #440]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6213      	str	r3, [r2, #32]
 8001590:	e02d      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	68db      	ldr	r3, [r3, #12]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d10c      	bne.n	80015b4 <HAL_RCC_OscConfig+0x334>
 800159a:	4b6a      	ldr	r3, [pc, #424]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a69      	ldr	r2, [pc, #420]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0301 	bic.w	r3, r3, #1
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	4b67      	ldr	r3, [pc, #412]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	4a66      	ldr	r2, [pc, #408]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ac:	f023 0304 	bic.w	r3, r3, #4
 80015b0:	6213      	str	r3, [r2, #32]
 80015b2:	e01c      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	2b05      	cmp	r3, #5
 80015ba:	d10c      	bne.n	80015d6 <HAL_RCC_OscConfig+0x356>
 80015bc:	4b61      	ldr	r3, [pc, #388]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a60      	ldr	r2, [pc, #384]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f043 0304 	orr.w	r3, r3, #4
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	4b5e      	ldr	r3, [pc, #376]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a5d      	ldr	r2, [pc, #372]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	e00b      	b.n	80015ee <HAL_RCC_OscConfig+0x36e>
 80015d6:	4b5b      	ldr	r3, [pc, #364]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a5a      	ldr	r2, [pc, #360]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	6213      	str	r3, [r2, #32]
 80015e2:	4b58      	ldr	r3, [pc, #352]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	4a57      	ldr	r2, [pc, #348]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80015e8:	f023 0304 	bic.w	r3, r3, #4
 80015ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d015      	beq.n	8001622 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff f9e9 	bl	80009cc <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015fc:	e00a      	b.n	8001614 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015fe:	f7ff f9e5 	bl	80009cc <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	f241 3288 	movw	r2, #5000	; 0x1388
 800160c:	4293      	cmp	r3, r2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e0b1      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001614:	4b4b      	ldr	r3, [pc, #300]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	f003 0302 	and.w	r3, r3, #2
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0ee      	beq.n	80015fe <HAL_RCC_OscConfig+0x37e>
 8001620:	e014      	b.n	800164c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001622:	f7ff f9d3 	bl	80009cc <HAL_GetTick>
 8001626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001628:	e00a      	b.n	8001640 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800162a:	f7ff f9cf 	bl	80009cc <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	f241 3288 	movw	r2, #5000	; 0x1388
 8001638:	4293      	cmp	r3, r2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e09b      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001640:	4b40      	ldr	r3, [pc, #256]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1ee      	bne.n	800162a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800164c:	7dfb      	ldrb	r3, [r7, #23]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d105      	bne.n	800165e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001652:	4b3c      	ldr	r3, [pc, #240]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	4a3b      	ldr	r2, [pc, #236]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800165c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	2b00      	cmp	r3, #0
 8001664:	f000 8087 	beq.w	8001776 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001668:	4b36      	ldr	r3, [pc, #216]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 030c 	and.w	r3, r3, #12
 8001670:	2b08      	cmp	r3, #8
 8001672:	d061      	beq.n	8001738 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	2b02      	cmp	r3, #2
 800167a:	d146      	bne.n	800170a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b33      	ldr	r3, [pc, #204]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001682:	f7ff f9a3 	bl	80009cc <HAL_GetTick>
 8001686:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001688:	e008      	b.n	800169c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800168a:	f7ff f99f 	bl	80009cc <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	1ad3      	subs	r3, r2, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d901      	bls.n	800169c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001698:	2303      	movs	r3, #3
 800169a:	e06d      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800169c:	4b29      	ldr	r3, [pc, #164]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d1f0      	bne.n	800168a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016b0:	d108      	bne.n	80016c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016b2:	4b24      	ldr	r3, [pc, #144]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	4921      	ldr	r1, [pc, #132]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a19      	ldr	r1, [r3, #32]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	430b      	orrs	r3, r1
 80016d6:	491b      	ldr	r1, [pc, #108]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016d8:	4313      	orrs	r3, r2
 80016da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016dc:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 80016de:	2201      	movs	r2, #1
 80016e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e2:	f7ff f973 	bl	80009cc <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ea:	f7ff f96f 	bl	80009cc <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e03d      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x46a>
 8001708:	e035      	b.n	8001776 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <HAL_RCC_OscConfig+0x4cc>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff f95c 	bl	80009cc <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff f958 	bl	80009cc <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e026      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172a:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x498>
 8001736:	e01e      	b.n	8001776 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69db      	ldr	r3, [r3, #28]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d107      	bne.n	8001750 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e019      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
 8001744:	40021000 	.word	0x40021000
 8001748:	40007000 	.word	0x40007000
 800174c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001750:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <HAL_RCC_OscConfig+0x500>)
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	429a      	cmp	r2, r3
 8001762:	d106      	bne.n	8001772 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	4618      	mov	r0, r3
 800177a:	3718      	adds	r7, #24
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0d0      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d910      	bls.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b67      	ldr	r3, [pc, #412]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f023 0207 	bic.w	r2, r3, #7
 80017ae:	4965      	ldr	r1, [pc, #404]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b0:	683b      	ldr	r3, [r7, #0]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b6:	4b63      	ldr	r3, [pc, #396]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e0b8      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0302 	and.w	r3, r3, #2
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d020      	beq.n	8001816 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d005      	beq.n	80017ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	4a58      	ldr	r2, [pc, #352]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d005      	beq.n	8001804 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017f8:	4b53      	ldr	r3, [pc, #332]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	4a52      	ldr	r2, [pc, #328]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80017fe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001802:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001804:	4b50      	ldr	r3, [pc, #320]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	494d      	ldr	r1, [pc, #308]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001812:	4313      	orrs	r3, r2
 8001814:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d040      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800182a:	4b47      	ldr	r3, [pc, #284]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d115      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e07f      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b02      	cmp	r3, #2
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001842:	4b41      	ldr	r3, [pc, #260]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d109      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e073      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b3d      	ldr	r3, [pc, #244]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d101      	bne.n	8001862 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06b      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001862:	4b39      	ldr	r3, [pc, #228]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f023 0203 	bic.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	4936      	ldr	r1, [pc, #216]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f8aa 	bl	80009cc <HAL_GetTick>
 8001878:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187a:	e00a      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187c:	f7ff f8a6 	bl	80009cc <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	f241 3288 	movw	r2, #5000	; 0x1388
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e053      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 020c 	and.w	r2, r3, #12
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1eb      	bne.n	800187c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b27      	ldr	r3, [pc, #156]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0307 	and.w	r3, r3, #7
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d210      	bcs.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 0207 	bic.w	r2, r3, #7
 80018ba:	4922      	ldr	r1, [pc, #136]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	4313      	orrs	r3, r2
 80018c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c2:	4b20      	ldr	r3, [pc, #128]	; (8001944 <HAL_RCC_ClockConfig+0x1c0>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	429a      	cmp	r2, r3
 80018ce:	d001      	beq.n	80018d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e032      	b.n	800193a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d008      	beq.n	80018f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	4916      	ldr	r1, [pc, #88]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 80018ee:	4313      	orrs	r3, r2
 80018f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d009      	beq.n	8001912 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018fe:	4b12      	ldr	r3, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001912:	f000 f821 	bl	8001958 <HAL_RCC_GetSysClockFreq>
 8001916:	4602      	mov	r2, r0
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_RCC_ClockConfig+0x1c4>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	490a      	ldr	r1, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1c8>)
 8001924:	5ccb      	ldrb	r3, [r1, r3]
 8001926:	fa22 f303 	lsr.w	r3, r2, r3
 800192a:	4a09      	ldr	r2, [pc, #36]	; (8001950 <HAL_RCC_ClockConfig+0x1cc>)
 800192c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x1d0>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f7ff f808 	bl	8000948 <HAL_InitTick>

  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	3710      	adds	r7, #16
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40022000 	.word	0x40022000
 8001948:	40021000 	.word	0x40021000
 800194c:	080055b8 	.word	0x080055b8
 8001950:	20000000 	.word	0x20000000
 8001954:	20000004 	.word	0x20000004

08001958 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001958:	b480      	push	{r7}
 800195a:	b087      	sub	sp, #28
 800195c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
 800196a:	2300      	movs	r3, #0
 800196c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001972:	4b1e      	ldr	r3, [pc, #120]	; (80019ec <HAL_RCC_GetSysClockFreq+0x94>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b04      	cmp	r3, #4
 8001980:	d002      	beq.n	8001988 <HAL_RCC_GetSysClockFreq+0x30>
 8001982:	2b08      	cmp	r3, #8
 8001984:	d003      	beq.n	800198e <HAL_RCC_GetSysClockFreq+0x36>
 8001986:	e027      	b.n	80019d8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001988:	4b19      	ldr	r3, [pc, #100]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x98>)
 800198a:	613b      	str	r3, [r7, #16]
      break;
 800198c:	e027      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	0c9b      	lsrs	r3, r3, #18
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	4a17      	ldr	r2, [pc, #92]	; (80019f4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001998:	5cd3      	ldrb	r3, [r2, r3]
 800199a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d010      	beq.n	80019c8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a6:	4b11      	ldr	r3, [pc, #68]	; (80019ec <HAL_RCC_GetSysClockFreq+0x94>)
 80019a8:	685b      	ldr	r3, [r3, #4]
 80019aa:	0c5b      	lsrs	r3, r3, #17
 80019ac:	f003 0301 	and.w	r3, r3, #1
 80019b0:	4a11      	ldr	r2, [pc, #68]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019b2:	5cd3      	ldrb	r3, [r2, r3]
 80019b4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a0d      	ldr	r2, [pc, #52]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80019ba:	fb03 f202 	mul.w	r2, r3, r2
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c4:	617b      	str	r3, [r7, #20]
 80019c6:	e004      	b.n	80019d2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a0c      	ldr	r2, [pc, #48]	; (80019fc <HAL_RCC_GetSysClockFreq+0xa4>)
 80019cc:	fb02 f303 	mul.w	r3, r2, r3
 80019d0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	613b      	str	r3, [r7, #16]
      break;
 80019d6:	e002      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_RCC_GetSysClockFreq+0x98>)
 80019da:	613b      	str	r3, [r7, #16]
      break;
 80019dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019de:	693b      	ldr	r3, [r7, #16]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	371c      	adds	r7, #28
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bc80      	pop	{r7}
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000
 80019f0:	007a1200 	.word	0x007a1200
 80019f4:	080055d0 	.word	0x080055d0
 80019f8:	080055e0 	.word	0x080055e0
 80019fc:	003d0900 	.word	0x003d0900

08001a00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a04:	4b02      	ldr	r3, [pc, #8]	; (8001a10 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a06:	681b      	ldr	r3, [r3, #0]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr
 8001a10:	20000000 	.word	0x20000000

08001a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a18:	f7ff fff2 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	0a1b      	lsrs	r3, r3, #8
 8001a24:	f003 0307 	and.w	r3, r3, #7
 8001a28:	4903      	ldr	r1, [pc, #12]	; (8001a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a2a:	5ccb      	ldrb	r3, [r1, r3]
 8001a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40021000 	.word	0x40021000
 8001a38:	080055c8 	.word	0x080055c8

08001a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a40:	f7ff ffde 	bl	8001a00 <HAL_RCC_GetHCLKFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b05      	ldr	r3, [pc, #20]	; (8001a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	0adb      	lsrs	r3, r3, #11
 8001a4c:	f003 0307 	and.w	r3, r3, #7
 8001a50:	4903      	ldr	r1, [pc, #12]	; (8001a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	bd80      	pop	{r7, pc}
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	080055c8 	.word	0x080055c8

08001a64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <RCC_Delay+0x34>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a0a      	ldr	r2, [pc, #40]	; (8001a9c <RCC_Delay+0x38>)
 8001a72:	fba2 2303 	umull	r2, r3, r2, r3
 8001a76:	0a5b      	lsrs	r3, r3, #9
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	fb02 f303 	mul.w	r3, r2, r3
 8001a7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a80:	bf00      	nop
  }
  while (Delay --);
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	60fa      	str	r2, [r7, #12]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f9      	bne.n	8001a80 <RCC_Delay+0x1c>
}
 8001a8c:	bf00      	nop
 8001a8e:	bf00      	nop
 8001a90:	3714      	adds	r7, #20
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	10624dd3 	.word	0x10624dd3

08001aa0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b082      	sub	sp, #8
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e096      	b.n	8001be0 <HAL_SPI_Init+0x140>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d108      	bne.n	8001acc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001ac2:	d009      	beq.n	8001ad8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
 8001aca:	e005      	b.n	8001ad8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d126      	bne.n	8001b38 <HAL_SPI_Init+0x98>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a3c      	ldr	r2, [pc, #240]	; (8001be8 <HAL_SPI_Init+0x148>)
 8001af6:	659a      	str	r2, [r3, #88]	; 0x58
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a3c      	ldr	r2, [pc, #240]	; (8001bec <HAL_SPI_Init+0x14c>)
 8001afc:	65da      	str	r2, [r3, #92]	; 0x5c
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a3b      	ldr	r2, [pc, #236]	; (8001bf0 <HAL_SPI_Init+0x150>)
 8001b02:	661a      	str	r2, [r3, #96]	; 0x60
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a3b      	ldr	r2, [pc, #236]	; (8001bf4 <HAL_SPI_Init+0x154>)
 8001b08:	665a      	str	r2, [r3, #100]	; 0x64
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a3a      	ldr	r2, [pc, #232]	; (8001bf8 <HAL_SPI_Init+0x158>)
 8001b0e:	669a      	str	r2, [r3, #104]	; 0x68
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	4a3a      	ldr	r2, [pc, #232]	; (8001bfc <HAL_SPI_Init+0x15c>)
 8001b14:	66da      	str	r2, [r3, #108]	; 0x6c
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a39      	ldr	r2, [pc, #228]	; (8001c00 <HAL_SPI_Init+0x160>)
 8001b1a:	671a      	str	r2, [r3, #112]	; 0x70
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4a39      	ldr	r2, [pc, #228]	; (8001c04 <HAL_SPI_Init+0x164>)
 8001b20:	675a      	str	r2, [r3, #116]	; 0x74

    if (hspi->MspInitCallback == NULL)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d102      	bne.n	8001b30 <HAL_SPI_Init+0x90>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a36      	ldr	r2, [pc, #216]	; (8001c08 <HAL_SPI_Init+0x168>)
 8001b2e:	679a      	str	r2, [r3, #120]	; 0x78
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b4e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b60:	431a      	orrs	r2, r3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	691b      	ldr	r3, [r3, #16]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	695b      	ldr	r3, [r3, #20]
 8001b7a:	f003 0301 	and.w	r3, r3, #1
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	699b      	ldr	r3, [r3, #24]
 8001b84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9c:	ea42 0103 	orr.w	r1, r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ba4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	430a      	orrs	r2, r1
 8001bae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	699b      	ldr	r3, [r3, #24]
 8001bb4:	0c1a      	lsrs	r2, r3, #16
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f002 0204 	and.w	r2, r2, #4
 8001bbe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	69da      	ldr	r2, [r3, #28]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bce:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	08001c0d 	.word	0x08001c0d
 8001bec:	08001c1f 	.word	0x08001c1f
 8001bf0:	08001c31 	.word	0x08001c31
 8001bf4:	08001c43 	.word	0x08001c43
 8001bf8:	08001c55 	.word	0x08001c55
 8001bfc:	08001c67 	.word	0x08001c67
 8001c00:	08001c79 	.word	0x08001c79
 8001c04:	08001c8b 	.word	0x08001c8b
 8001c08:	08000449 	.word	0x08000449

08001c0c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8001c14:	bf00      	nop
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bc80      	pop	{r7}
 8001c1c:	4770      	bx	lr

08001c1e <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bc80      	pop	{r7}
 8001c2e:	4770      	bx	lr

08001c30 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bc80      	pop	{r7}
 8001c40:	4770      	bx	lr

08001c42 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c42:	b480      	push	{r7}
 8001c44:	b083      	sub	sp, #12
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8001c5c:	bf00      	nop
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bc80      	pop	{r7}
 8001c64:	4770      	bx	lr

08001c66 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d101      	bne.n	8001cae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e04c      	b.n	8001d48 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d111      	bne.n	8001cde <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f000 fc12 	bl	80024ec <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <HAL_TIM_PWM_Init+0xb4>)
 8001cd4:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	3304      	adds	r3, #4
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	f000 f9ed 	bl	80020d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2201      	movs	r2, #1
 8001d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2201      	movs	r2, #1
 8001d0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2201      	movs	r2, #1
 8001d12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2201      	movs	r2, #1
 8001d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d46:	2300      	movs	r3, #0
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3708      	adds	r7, #8
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	08000745 	.word	0x08000745

08001d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
 8001d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d109      	bne.n	8001d78 <HAL_TIM_PWM_Start+0x24>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b01      	cmp	r3, #1
 8001d6e:	bf14      	ite	ne
 8001d70:	2301      	movne	r3, #1
 8001d72:	2300      	moveq	r3, #0
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	e022      	b.n	8001dbe <HAL_TIM_PWM_Start+0x6a>
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d109      	bne.n	8001d92 <HAL_TIM_PWM_Start+0x3e>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	bf14      	ite	ne
 8001d8a:	2301      	movne	r3, #1
 8001d8c:	2300      	moveq	r3, #0
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	e015      	b.n	8001dbe <HAL_TIM_PWM_Start+0x6a>
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d109      	bne.n	8001dac <HAL_TIM_PWM_Start+0x58>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001d9e:	b2db      	uxtb	r3, r3
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	bf14      	ite	ne
 8001da4:	2301      	movne	r3, #1
 8001da6:	2300      	moveq	r3, #0
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	e008      	b.n	8001dbe <HAL_TIM_PWM_Start+0x6a>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001db2:	b2db      	uxtb	r3, r3
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	bf14      	ite	ne
 8001db8:	2301      	movne	r3, #1
 8001dba:	2300      	moveq	r3, #0
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e05e      	b.n	8001e84 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d104      	bne.n	8001dd6 <HAL_TIM_PWM_Start+0x82>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2202      	movs	r2, #2
 8001dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001dd4:	e013      	b.n	8001dfe <HAL_TIM_PWM_Start+0xaa>
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d104      	bne.n	8001de6 <HAL_TIM_PWM_Start+0x92>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2202      	movs	r2, #2
 8001de0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001de4:	e00b      	b.n	8001dfe <HAL_TIM_PWM_Start+0xaa>
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	2b08      	cmp	r3, #8
 8001dea:	d104      	bne.n	8001df6 <HAL_TIM_PWM_Start+0xa2>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2202      	movs	r2, #2
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df4:	e003      	b.n	8001dfe <HAL_TIM_PWM_Start+0xaa>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2202      	movs	r2, #2
 8001dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2201      	movs	r2, #1
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f000 fb4c 	bl	80024a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a1e      	ldr	r2, [pc, #120]	; (8001e8c <HAL_TIM_PWM_Start+0x138>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d107      	bne.n	8001e26 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a18      	ldr	r2, [pc, #96]	; (8001e8c <HAL_TIM_PWM_Start+0x138>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d00e      	beq.n	8001e4e <HAL_TIM_PWM_Start+0xfa>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e38:	d009      	beq.n	8001e4e <HAL_TIM_PWM_Start+0xfa>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <HAL_TIM_PWM_Start+0x13c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d004      	beq.n	8001e4e <HAL_TIM_PWM_Start+0xfa>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <HAL_TIM_PWM_Start+0x140>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d111      	bne.n	8001e72 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	f003 0307 	and.w	r3, r3, #7
 8001e58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2b06      	cmp	r3, #6
 8001e5e:	d010      	beq.n	8001e82 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0201 	orr.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e70:	e007      	b.n	8001e82 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f042 0201 	orr.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e82:	2300      	movs	r3, #0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3710      	adds	r7, #16
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	40012c00 	.word	0x40012c00
 8001e90:	40000400 	.word	0x40000400
 8001e94:	40000800 	.word	0x40000800

08001e98 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b086      	sub	sp, #24
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	60b9      	str	r1, [r7, #8]
 8001ea2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d101      	bne.n	8001eb6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e0ae      	b.n	8002014 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b0c      	cmp	r3, #12
 8001ec2:	f200 809f 	bhi.w	8002004 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001ec6:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ecc:	08001f01 	.word	0x08001f01
 8001ed0:	08002005 	.word	0x08002005
 8001ed4:	08002005 	.word	0x08002005
 8001ed8:	08002005 	.word	0x08002005
 8001edc:	08001f41 	.word	0x08001f41
 8001ee0:	08002005 	.word	0x08002005
 8001ee4:	08002005 	.word	0x08002005
 8001ee8:	08002005 	.word	0x08002005
 8001eec:	08001f83 	.word	0x08001f83
 8001ef0:	08002005 	.word	0x08002005
 8001ef4:	08002005 	.word	0x08002005
 8001ef8:	08002005 	.word	0x08002005
 8001efc:	08001fc3 	.word	0x08001fc3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68b9      	ldr	r1, [r7, #8]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f944 	bl	8002194 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	699a      	ldr	r2, [r3, #24]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f042 0208 	orr.w	r2, r2, #8
 8001f1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	699a      	ldr	r2, [r3, #24]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0204 	bic.w	r2, r2, #4
 8001f2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6999      	ldr	r1, [r3, #24]
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	691a      	ldr	r2, [r3, #16]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	430a      	orrs	r2, r1
 8001f3c:	619a      	str	r2, [r3, #24]
      break;
 8001f3e:	e064      	b.n	800200a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f98a 	bl	8002260 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699a      	ldr	r2, [r3, #24]
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	699a      	ldr	r2, [r3, #24]
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	6999      	ldr	r1, [r3, #24]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	021a      	lsls	r2, r3, #8
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	619a      	str	r2, [r3, #24]
      break;
 8001f80:	e043      	b.n	800200a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	68b9      	ldr	r1, [r7, #8]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 f9d3 	bl	8002334 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	69da      	ldr	r2, [r3, #28]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f042 0208 	orr.w	r2, r2, #8
 8001f9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	69da      	ldr	r2, [r3, #28]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0204 	bic.w	r2, r2, #4
 8001fac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	69d9      	ldr	r1, [r3, #28]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	691a      	ldr	r2, [r3, #16]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	61da      	str	r2, [r3, #28]
      break;
 8001fc0:	e023      	b.n	800200a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	68b9      	ldr	r1, [r7, #8]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f000 fa1d 	bl	8002408 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	69da      	ldr	r2, [r3, #28]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001fdc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	69d9      	ldr	r1, [r3, #28]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	691b      	ldr	r3, [r3, #16]
 8001ff8:	021a      	lsls	r2, r3, #8
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	430a      	orrs	r2, r1
 8002000:	61da      	str	r2, [r3, #28]
      break;
 8002002:	e002      	b.n	800200a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	75fb      	strb	r3, [r7, #23]
      break;
 8002008:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002012:	7dfb      	ldrb	r3, [r7, #23]
}
 8002014:	4618      	mov	r0, r3
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bc80      	pop	{r7}
 8002050:	4770      	bx	lr

08002052 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002052:	b480      	push	{r7}
 8002054:	b083      	sub	sp, #12
 8002056:	af00      	add	r7, sp, #0
 8002058:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800205a:	bf00      	nop
 800205c:	370c      	adds	r7, #12
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	bc80      	pop	{r7}
 8002074:	4770      	bx	lr

08002076 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002076:	b480      	push	{r7}
 8002078:	b083      	sub	sp, #12
 800207a:	af00      	add	r7, sp, #0
 800207c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800207e:	bf00      	nop
 8002080:	370c      	adds	r7, #12
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020a2:	bf00      	nop
 80020a4:	370c      	adds	r7, #12
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bc80      	pop	{r7}
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bc80      	pop	{r7}
 80020bc:	4770      	bx	lr

080020be <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80020c6:	bf00      	nop
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bc80      	pop	{r7}
 80020ce:	4770      	bx	lr

080020d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b085      	sub	sp, #20
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a29      	ldr	r2, [pc, #164]	; (8002188 <TIM_Base_SetConfig+0xb8>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00b      	beq.n	8002100 <TIM_Base_SetConfig+0x30>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020ee:	d007      	beq.n	8002100 <TIM_Base_SetConfig+0x30>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a26      	ldr	r2, [pc, #152]	; (800218c <TIM_Base_SetConfig+0xbc>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d003      	beq.n	8002100 <TIM_Base_SetConfig+0x30>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a25      	ldr	r2, [pc, #148]	; (8002190 <TIM_Base_SetConfig+0xc0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d108      	bne.n	8002112 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a1c      	ldr	r2, [pc, #112]	; (8002188 <TIM_Base_SetConfig+0xb8>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d00b      	beq.n	8002132 <TIM_Base_SetConfig+0x62>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d007      	beq.n	8002132 <TIM_Base_SetConfig+0x62>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <TIM_Base_SetConfig+0xbc>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d003      	beq.n	8002132 <TIM_Base_SetConfig+0x62>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a18      	ldr	r2, [pc, #96]	; (8002190 <TIM_Base_SetConfig+0xc0>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d108      	bne.n	8002144 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4313      	orrs	r3, r2
 8002142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4313      	orrs	r3, r2
 8002150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a07      	ldr	r2, [pc, #28]	; (8002188 <TIM_Base_SetConfig+0xb8>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d103      	bne.n	8002178 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	691a      	ldr	r2, [r3, #16]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	615a      	str	r2, [r3, #20]
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	bc80      	pop	{r7}
 8002186:	4770      	bx	lr
 8002188:	40012c00 	.word	0x40012c00
 800218c:	40000400 	.word	0x40000400
 8002190:	40000800 	.word	0x40000800

08002194 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002194:	b480      	push	{r7}
 8002196:	b087      	sub	sp, #28
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a1b      	ldr	r3, [r3, #32]
 80021a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f023 0201 	bic.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699b      	ldr	r3, [r3, #24]
 80021ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f023 0303 	bic.w	r3, r3, #3
 80021ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	68fa      	ldr	r2, [r7, #12]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f023 0302 	bic.w	r3, r3, #2
 80021dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	697a      	ldr	r2, [r7, #20]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a1c      	ldr	r2, [pc, #112]	; (800225c <TIM_OC1_SetConfig+0xc8>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d10c      	bne.n	800220a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	f023 0308 	bic.w	r3, r3, #8
 80021f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	4313      	orrs	r3, r2
 8002200:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	f023 0304 	bic.w	r3, r3, #4
 8002208:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a13      	ldr	r2, [pc, #76]	; (800225c <TIM_OC1_SetConfig+0xc8>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d111      	bne.n	8002236 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002218:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002220:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	699b      	ldr	r3, [r3, #24]
 8002230:	693a      	ldr	r2, [r7, #16]
 8002232:	4313      	orrs	r3, r2
 8002234:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	68fa      	ldr	r2, [r7, #12]
 8002240:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	621a      	str	r2, [r3, #32]
}
 8002250:	bf00      	nop
 8002252:	371c      	adds	r7, #28
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40012c00 	.word	0x40012c00

08002260 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002260:	b480      	push	{r7}
 8002262:	b087      	sub	sp, #28
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f023 0210 	bic.w	r2, r3, #16
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	699b      	ldr	r3, [r3, #24]
 8002286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800228e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002296:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	021b      	lsls	r3, r3, #8
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	f023 0320 	bic.w	r3, r3, #32
 80022aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	011b      	lsls	r3, r3, #4
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <TIM_OC2_SetConfig+0xd0>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d10d      	bne.n	80022dc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022c0:	697b      	ldr	r3, [r7, #20]
 80022c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80022c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	697a      	ldr	r2, [r7, #20]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022da:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	4a14      	ldr	r2, [pc, #80]	; (8002330 <TIM_OC2_SetConfig+0xd0>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d113      	bne.n	800230c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80022ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	693a      	ldr	r2, [r7, #16]
 8002308:	4313      	orrs	r3, r2
 800230a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	693a      	ldr	r2, [r7, #16]
 8002310:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	621a      	str	r2, [r3, #32]
}
 8002326:	bf00      	nop
 8002328:	371c      	adds	r7, #28
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr
 8002330:	40012c00 	.word	0x40012c00

08002334 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002334:	b480      	push	{r7}
 8002336:	b087      	sub	sp, #28
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a1b      	ldr	r3, [r3, #32]
 8002342:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a1b      	ldr	r3, [r3, #32]
 8002348:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002362:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f023 0303 	bic.w	r3, r3, #3
 800236a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	4313      	orrs	r3, r2
 8002374:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800237c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	021b      	lsls	r3, r3, #8
 8002384:	697a      	ldr	r2, [r7, #20]
 8002386:	4313      	orrs	r3, r2
 8002388:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a1d      	ldr	r2, [pc, #116]	; (8002404 <TIM_OC3_SetConfig+0xd0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10d      	bne.n	80023ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002398:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	021b      	lsls	r3, r3, #8
 80023a0:	697a      	ldr	r2, [r7, #20]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80023ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a14      	ldr	r2, [pc, #80]	; (8002404 <TIM_OC3_SetConfig+0xd0>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d113      	bne.n	80023de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80023bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	011b      	lsls	r3, r3, #4
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	011b      	lsls	r3, r3, #4
 80023d8:	693a      	ldr	r2, [r7, #16]
 80023da:	4313      	orrs	r3, r2
 80023dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	693a      	ldr	r2, [r7, #16]
 80023e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	685a      	ldr	r2, [r3, #4]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	697a      	ldr	r2, [r7, #20]
 80023f6:	621a      	str	r2, [r3, #32]
}
 80023f8:	bf00      	nop
 80023fa:	371c      	adds	r7, #28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bc80      	pop	{r7}
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40012c00 	.word	0x40012c00

08002408 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002408:	b480      	push	{r7}
 800240a:	b087      	sub	sp, #28
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
 800242e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002436:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800243e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	021b      	lsls	r3, r3, #8
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	4313      	orrs	r3, r2
 800244a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002452:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	031b      	lsls	r3, r3, #12
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	4313      	orrs	r3, r2
 800245e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <TIM_OC4_SetConfig+0x98>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d109      	bne.n	800247c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800246e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	695b      	ldr	r3, [r3, #20]
 8002474:	019b      	lsls	r3, r3, #6
 8002476:	697a      	ldr	r2, [r7, #20]
 8002478:	4313      	orrs	r3, r2
 800247a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	68fa      	ldr	r2, [r7, #12]
 8002486:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	621a      	str	r2, [r3, #32]
}
 8002496:	bf00      	nop
 8002498:	371c      	adds	r7, #28
 800249a:	46bd      	mov	sp, r7
 800249c:	bc80      	pop	{r7}
 800249e:	4770      	bx	lr
 80024a0:	40012c00 	.word	0x40012c00

080024a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b087      	sub	sp, #28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	60f8      	str	r0, [r7, #12]
 80024ac:	60b9      	str	r1, [r7, #8]
 80024ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	2201      	movs	r2, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	6a1a      	ldr	r2, [r3, #32]
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	43db      	mvns	r3, r3
 80024c6:	401a      	ands	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6a1a      	ldr	r2, [r3, #32]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	f003 031f 	and.w	r3, r3, #31
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	fa01 f303 	lsl.w	r3, r1, r3
 80024dc:	431a      	orrs	r2, r3
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	621a      	str	r2, [r3, #32]
}
 80024e2:	bf00      	nop
 80024e4:	371c      	adds	r7, #28
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80024ec:	b480      	push	{r7}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	4a1c      	ldr	r2, [pc, #112]	; (8002568 <TIM_ResetCallback+0x7c>)
 80024f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	4a1b      	ldr	r2, [pc, #108]	; (800256c <TIM_ResetCallback+0x80>)
 8002500:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a1a      	ldr	r2, [pc, #104]	; (8002570 <TIM_ResetCallback+0x84>)
 8002508:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	4a19      	ldr	r2, [pc, #100]	; (8002574 <TIM_ResetCallback+0x88>)
 8002510:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	4a18      	ldr	r2, [pc, #96]	; (8002578 <TIM_ResetCallback+0x8c>)
 8002518:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a17      	ldr	r2, [pc, #92]	; (800257c <TIM_ResetCallback+0x90>)
 8002520:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	4a16      	ldr	r2, [pc, #88]	; (8002580 <TIM_ResetCallback+0x94>)
 8002528:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a15      	ldr	r2, [pc, #84]	; (8002584 <TIM_ResetCallback+0x98>)
 8002530:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a14      	ldr	r2, [pc, #80]	; (8002588 <TIM_ResetCallback+0x9c>)
 8002538:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a13      	ldr	r2, [pc, #76]	; (800258c <TIM_ResetCallback+0xa0>)
 8002540:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a12      	ldr	r2, [pc, #72]	; (8002590 <TIM_ResetCallback+0xa4>)
 8002548:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	4a11      	ldr	r2, [pc, #68]	; (8002594 <TIM_ResetCallback+0xa8>)
 8002550:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	4a10      	ldr	r2, [pc, #64]	; (8002598 <TIM_ResetCallback+0xac>)
 8002558:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	bc80      	pop	{r7}
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	0800201d 	.word	0x0800201d
 800256c:	0800202f 	.word	0x0800202f
 8002570:	0800209b 	.word	0x0800209b
 8002574:	080020ad 	.word	0x080020ad
 8002578:	08002053 	.word	0x08002053
 800257c:	08002065 	.word	0x08002065
 8002580:	08002041 	.word	0x08002041
 8002584:	08002077 	.word	0x08002077
 8002588:	08002089 	.word	0x08002089
 800258c:	080020bf 	.word	0x080020bf
 8002590:	08002659 	.word	0x08002659
 8002594:	0800266b 	.word	0x0800266b
 8002598:	0800267d 	.word	0x0800267d

0800259c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800259c:	b480      	push	{r7}
 800259e:	b085      	sub	sp, #20
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d101      	bne.n	80025b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80025b0:	2302      	movs	r3, #2
 80025b2:	e046      	b.n	8002642 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2202      	movs	r2, #2
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	4313      	orrs	r3, r2
 80025e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a16      	ldr	r2, [pc, #88]	; (800264c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d00e      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d009      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a12      	ldr	r2, [pc, #72]	; (8002650 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d004      	beq.n	8002616 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a10      	ldr	r2, [pc, #64]	; (8002654 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d10c      	bne.n	8002630 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800261c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	68ba      	ldr	r2, [r7, #8]
 8002624:	4313      	orrs	r3, r2
 8002626:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr
 800264c:	40012c00 	.word	0x40012c00
 8002650:	40000400 	.word	0x40000400
 8002654:	40000800 	.word	0x40000800

08002658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002660:	bf00      	nop
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bc80      	pop	{r7}
 8002668:	4770      	bx	lr

0800266a <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800266a:	b480      	push	{r7}
 800266c:	b083      	sub	sp, #12
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8002672:	bf00      	nop
 8002674:	370c      	adds	r7, #12
 8002676:	46bd      	mov	sp, r7
 8002678:	bc80      	pop	{r7}
 800267a:	4770      	bx	lr

0800267c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002684:	bf00      	nop
 8002686:	370c      	adds	r7, #12
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr
	...

08002690 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d101      	bne.n	80026a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800269e:	2301      	movs	r3, #1
 80026a0:	e04d      	b.n	800273e <HAL_UART_Init+0xae>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d111      	bne.n	80026d2 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2200      	movs	r2, #0
 80026b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f89c 	bl	80027f4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d102      	bne.n	80026ca <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4a20      	ldr	r2, [pc, #128]	; (8002748 <HAL_UART_Init+0xb8>)
 80026c8:	671a      	str	r2, [r3, #112]	; 0x70
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2224      	movs	r2, #36	; 0x24
 80026d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026e8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8b8 	bl	8002860 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	691a      	ldr	r2, [r3, #16]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026fe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695a      	ldr	r2, [r3, #20]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800270e:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	68da      	ldr	r2, [r3, #12]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800271e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2220      	movs	r2, #32
 800272a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2220      	movs	r2, #32
 8002732:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	08000839 	.word	0x08000839

0800274c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr

0800275e <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8002766:	bf00      	nop
 8002768:	370c      	adds	r7, #12
 800276a:	46bd      	mov	sp, r7
 800276c:	bc80      	pop	{r7}
 800276e:	4770      	bx	lr

08002770 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	bc80      	pop	{r7}
 8002780:	4770      	bx	lr

08002782 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	bc80      	pop	{r7}
 8002792:	4770      	bx	lr

08002794 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 80027ae:	bf00      	nop
 80027b0:	370c      	adds	r7, #12
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bc80      	pop	{r7}
 80027b6:	4770      	bx	lr

080027b8 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b083      	sub	sp, #12
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bc80      	pop	{r7}
 80027c8:	4770      	bx	lr

080027ca <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bc80      	pop	{r7}
 80027da:	4770      	bx	lr

080027dc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	460b      	mov	r3, r1
 80027e6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80027e8:	bf00      	nop
 80027ea:	370c      	adds	r7, #12
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bc80      	pop	{r7}
 80027f0:	4770      	bx	lr
	...

080027f4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	4a0f      	ldr	r2, [pc, #60]	; (800283c <UART_InitCallbacksToDefault+0x48>)
 8002800:	649a      	str	r2, [r3, #72]	; 0x48
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <UART_InitCallbacksToDefault+0x4c>)
 8002806:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	4a0e      	ldr	r2, [pc, #56]	; (8002844 <UART_InitCallbacksToDefault+0x50>)
 800280c:	651a      	str	r2, [r3, #80]	; 0x50
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a0d      	ldr	r2, [pc, #52]	; (8002848 <UART_InitCallbacksToDefault+0x54>)
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	4a0d      	ldr	r2, [pc, #52]	; (800284c <UART_InitCallbacksToDefault+0x58>)
 8002818:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a0c      	ldr	r2, [pc, #48]	; (8002850 <UART_InitCallbacksToDefault+0x5c>)
 800281e:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a0c      	ldr	r2, [pc, #48]	; (8002854 <UART_InitCallbacksToDefault+0x60>)
 8002824:	661a      	str	r2, [r3, #96]	; 0x60
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <UART_InitCallbacksToDefault+0x64>)
 800282a:	665a      	str	r2, [r3, #100]	; 0x64
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	4a0b      	ldr	r2, [pc, #44]	; (800285c <UART_InitCallbacksToDefault+0x68>)
 8002830:	66da      	str	r2, [r3, #108]	; 0x6c

}
 8002832:	bf00      	nop
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr
 800283c:	0800275f 	.word	0x0800275f
 8002840:	0800274d 	.word	0x0800274d
 8002844:	08002783 	.word	0x08002783
 8002848:	08002771 	.word	0x08002771
 800284c:	08002795 	.word	0x08002795
 8002850:	080027a7 	.word	0x080027a7
 8002854:	080027b9 	.word	0x080027b9
 8002858:	080027cb 	.word	0x080027cb
 800285c:	080027dd 	.word	0x080027dd

08002860 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68da      	ldr	r2, [r3, #12]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	430a      	orrs	r2, r1
 800287c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	689a      	ldr	r2, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	431a      	orrs	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	695b      	ldr	r3, [r3, #20]
 800288c:	4313      	orrs	r3, r2
 800288e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800289a:	f023 030c 	bic.w	r3, r3, #12
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	68b9      	ldr	r1, [r7, #8]
 80028a4:	430b      	orrs	r3, r1
 80028a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	699a      	ldr	r2, [r3, #24]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	430a      	orrs	r2, r1
 80028bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2c      	ldr	r2, [pc, #176]	; (8002974 <UART_SetConfig+0x114>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d103      	bne.n	80028d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80028c8:	f7ff f8b8 	bl	8001a3c <HAL_RCC_GetPCLK2Freq>
 80028cc:	60f8      	str	r0, [r7, #12]
 80028ce:	e002      	b.n	80028d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80028d0:	f7ff f8a0 	bl	8001a14 <HAL_RCC_GetPCLK1Freq>
 80028d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009a      	lsls	r2, r3, #2
 80028e0:	441a      	add	r2, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <UART_SetConfig+0x118>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	095b      	lsrs	r3, r3, #5
 80028f4:	0119      	lsls	r1, r3, #4
 80028f6:	68fa      	ldr	r2, [r7, #12]
 80028f8:	4613      	mov	r3, r2
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	4413      	add	r3, r2
 80028fe:	009a      	lsls	r2, r3, #2
 8002900:	441a      	add	r2, r3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	fbb2 f2f3 	udiv	r2, r2, r3
 800290c:	4b1a      	ldr	r3, [pc, #104]	; (8002978 <UART_SetConfig+0x118>)
 800290e:	fba3 0302 	umull	r0, r3, r3, r2
 8002912:	095b      	lsrs	r3, r3, #5
 8002914:	2064      	movs	r0, #100	; 0x64
 8002916:	fb00 f303 	mul.w	r3, r0, r3
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	011b      	lsls	r3, r3, #4
 800291e:	3332      	adds	r3, #50	; 0x32
 8002920:	4a15      	ldr	r2, [pc, #84]	; (8002978 <UART_SetConfig+0x118>)
 8002922:	fba2 2303 	umull	r2, r3, r2, r3
 8002926:	095b      	lsrs	r3, r3, #5
 8002928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800292c:	4419      	add	r1, r3
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	4613      	mov	r3, r2
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	4413      	add	r3, r2
 8002936:	009a      	lsls	r2, r3, #2
 8002938:	441a      	add	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	fbb2 f2f3 	udiv	r2, r2, r3
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <UART_SetConfig+0x118>)
 8002946:	fba3 0302 	umull	r0, r3, r3, r2
 800294a:	095b      	lsrs	r3, r3, #5
 800294c:	2064      	movs	r0, #100	; 0x64
 800294e:	fb00 f303 	mul.w	r3, r0, r3
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	3332      	adds	r3, #50	; 0x32
 8002958:	4a07      	ldr	r2, [pc, #28]	; (8002978 <UART_SetConfig+0x118>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	f003 020f 	and.w	r2, r3, #15
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	440a      	add	r2, r1
 800296a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800296c:	bf00      	nop
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40013800 	.word	0x40013800
 8002978:	51eb851f 	.word	0x51eb851f

0800297c <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002982:	f3ef 8305 	mrs	r3, IPSR
 8002986:	60bb      	str	r3, [r7, #8]
  return(result);
 8002988:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800298a:	2b00      	cmp	r3, #0
 800298c:	d10f      	bne.n	80029ae <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800298e:	f3ef 8310 	mrs	r3, PRIMASK
 8002992:	607b      	str	r3, [r7, #4]
  return(result);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <osKernelInitialize+0x32>
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <osKernelInitialize+0x60>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d109      	bne.n	80029b6 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80029a2:	f3ef 8311 	mrs	r3, BASEPRI
 80029a6:	603b      	str	r3, [r7, #0]
  return(result);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 80029ae:	f06f 0305 	mvn.w	r3, #5
 80029b2:	60fb      	str	r3, [r7, #12]
 80029b4:	e00c      	b.n	80029d0 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 80029b6:	4b09      	ldr	r3, [pc, #36]	; (80029dc <osKernelInitialize+0x60>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d105      	bne.n	80029ca <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 80029be:	4b07      	ldr	r3, [pc, #28]	; (80029dc <osKernelInitialize+0x60>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	e002      	b.n	80029d0 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ce:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80029d0:	68fb      	ldr	r3, [r7, #12]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3714      	adds	r7, #20
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bc80      	pop	{r7}
 80029da:	4770      	bx	lr
 80029dc:	200002b8 	.word	0x200002b8

080029e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80029e6:	f3ef 8305 	mrs	r3, IPSR
 80029ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80029ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10f      	bne.n	8002a12 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80029f2:	f3ef 8310 	mrs	r3, PRIMASK
 80029f6:	607b      	str	r3, [r7, #4]
  return(result);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d109      	bne.n	8002a12 <osKernelStart+0x32>
 80029fe:	4b11      	ldr	r3, [pc, #68]	; (8002a44 <osKernelStart+0x64>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2b02      	cmp	r3, #2
 8002a04:	d109      	bne.n	8002a1a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a06:	f3ef 8311 	mrs	r3, BASEPRI
 8002a0a:	603b      	str	r3, [r7, #0]
  return(result);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <osKernelStart+0x3a>
    stat = osErrorISR;
 8002a12:	f06f 0305 	mvn.w	r3, #5
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	e00e      	b.n	8002a38 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8002a1a:	4b0a      	ldr	r3, [pc, #40]	; (8002a44 <osKernelStart+0x64>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d107      	bne.n	8002a32 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8002a22:	4b08      	ldr	r3, [pc, #32]	; (8002a44 <osKernelStart+0x64>)
 8002a24:	2202      	movs	r2, #2
 8002a26:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8002a28:	f001 f890 	bl	8003b4c <vTaskStartScheduler>
      stat = osOK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	e002      	b.n	8002a38 <osKernelStart+0x58>
    } else {
      stat = osError;
 8002a32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a36:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002a38:	68fb      	ldr	r3, [r7, #12]
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	200002b8 	.word	0x200002b8

08002a48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b092      	sub	sp, #72	; 0x48
 8002a4c:	af04      	add	r7, sp, #16
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a58:	f3ef 8305 	mrs	r3, IPSR
 8002a5c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 8094 	bne.w	8002b8e <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002a66:	f3ef 8310 	mrs	r3, PRIMASK
 8002a6a:	623b      	str	r3, [r7, #32]
  return(result);
 8002a6c:	6a3b      	ldr	r3, [r7, #32]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f040 808d 	bne.w	8002b8e <osThreadNew+0x146>
 8002a74:	4b48      	ldr	r3, [pc, #288]	; (8002b98 <osThreadNew+0x150>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d106      	bne.n	8002a8a <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002a7c:	f3ef 8311 	mrs	r3, BASEPRI
 8002a80:	61fb      	str	r3, [r7, #28]
  return(result);
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 8082 	bne.w	8002b8e <osThreadNew+0x146>
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d07e      	beq.n	8002b8e <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002a94:	2318      	movs	r3, #24
 8002a96:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002a98:	2300      	movs	r3, #0
 8002a9a:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002a9c:	f107 031b 	add.w	r3, r7, #27
 8002aa0:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 8002aa2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002aa6:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d045      	beq.n	8002b3a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <osThreadNew+0x74>
        name = attr->name;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	699b      	ldr	r3, [r3, #24]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d002      	beq.n	8002aca <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d008      	beq.n	8002ae2 <osThreadNew+0x9a>
 8002ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad2:	2b38      	cmp	r3, #56	; 0x38
 8002ad4:	d805      	bhi.n	8002ae2 <osThreadNew+0x9a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d001      	beq.n	8002ae6 <osThreadNew+0x9e>
        return (NULL);
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e054      	b.n	8002b90 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <osThreadNew+0xd4>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2ba7      	cmp	r3, #167	; 0xa7
 8002b04:	d90a      	bls.n	8002b1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <osThreadNew+0xd4>
        mem = 1;
 8002b16:	2301      	movs	r3, #1
 8002b18:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b1a:	e010      	b.n	8002b3e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d10c      	bne.n	8002b3e <osThreadNew+0xf6>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d108      	bne.n	8002b3e <osThreadNew+0xf6>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d104      	bne.n	8002b3e <osThreadNew+0xf6>
          mem = 0;
 8002b34:	2300      	movs	r3, #0
 8002b36:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b38:	e001      	b.n	8002b3e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 8002b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d110      	bne.n	8002b66 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002b4c:	9202      	str	r2, [sp, #8]
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b58:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b5a:	68f8      	ldr	r0, [r7, #12]
 8002b5c:	f000 fe12 	bl	8003784 <xTaskCreateStatic>
 8002b60:	4603      	mov	r3, r0
 8002b62:	617b      	str	r3, [r7, #20]
 8002b64:	e013      	b.n	8002b8e <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d110      	bne.n	8002b8e <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b6e:	b29a      	uxth	r2, r3
 8002b70:	f107 0314 	add.w	r3, r7, #20
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 fe5c 	bl	800383c <xTaskCreate>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d001      	beq.n	8002b8e <osThreadNew+0x146>
          hTask = NULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002b8e:	697b      	ldr	r3, [r7, #20]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3738      	adds	r7, #56	; 0x38
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	200002b8 	.word	0x200002b8

08002b9c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b086      	sub	sp, #24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002ba4:	f3ef 8305 	mrs	r3, IPSR
 8002ba8:	613b      	str	r3, [r7, #16]
  return(result);
 8002baa:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10f      	bne.n	8002bd0 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002bb0:	f3ef 8310 	mrs	r3, PRIMASK
 8002bb4:	60fb      	str	r3, [r7, #12]
  return(result);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <osDelay+0x34>
 8002bbc:	4b0d      	ldr	r3, [pc, #52]	; (8002bf4 <osDelay+0x58>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d109      	bne.n	8002bd8 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002bc4:	f3ef 8311 	mrs	r3, BASEPRI
 8002bc8:	60bb      	str	r3, [r7, #8]
  return(result);
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d003      	beq.n	8002bd8 <osDelay+0x3c>
    stat = osErrorISR;
 8002bd0:	f06f 0305 	mvn.w	r3, #5
 8002bd4:	617b      	str	r3, [r7, #20]
 8002bd6:	e007      	b.n	8002be8 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <osDelay+0x4c>
      vTaskDelay(ticks);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 ff7e 	bl	8003ae4 <vTaskDelay>
    }
  }

  return (stat);
 8002be8:	697b      	ldr	r3, [r7, #20]
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200002b8 	.word	0x200002b8

08002bf8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <vApplicationGetIdleTaskMemory+0x28>)
 8002c08:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	4a05      	ldr	r2, [pc, #20]	; (8002c24 <vApplicationGetIdleTaskMemory+0x2c>)
 8002c0e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	601a      	str	r2, [r3, #0]
}
 8002c16:	bf00      	nop
 8002c18:	3714      	adds	r7, #20
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bc80      	pop	{r7}
 8002c1e:	4770      	bx	lr
 8002c20:	200002bc 	.word	0x200002bc
 8002c24:	20000364 	.word	0x20000364

08002c28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	4a07      	ldr	r2, [pc, #28]	; (8002c54 <vApplicationGetTimerTaskMemory+0x2c>)
 8002c38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <vApplicationGetTimerTaskMemory+0x30>)
 8002c3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c46:	601a      	str	r2, [r3, #0]
}
 8002c48:	bf00      	nop
 8002c4a:	3714      	adds	r7, #20
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bc80      	pop	{r7}
 8002c50:	4770      	bx	lr
 8002c52:	bf00      	nop
 8002c54:	20000564 	.word	0x20000564
 8002c58:	2000060c 	.word	0x2000060c

08002c5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b083      	sub	sp, #12
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	f103 0208 	add.w	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f103 0208 	add.w	r2, r3, #8
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f103 0208 	add.w	r2, r3, #8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bc80      	pop	{r7}
 8002c98:	4770      	bx	lr

08002c9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	b083      	sub	sp, #12
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ca8:	bf00      	nop
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b085      	sub	sp, #20
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	68fa      	ldr	r2, [r7, #12]
 8002cc6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	683a      	ldr	r2, [r7, #0]
 8002cd6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	1c5a      	adds	r2, r3, #1
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	601a      	str	r2, [r3, #0]
}
 8002cee:	bf00      	nop
 8002cf0:	3714      	adds	r7, #20
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr

08002cf8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d0e:	d103      	bne.n	8002d18 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	691b      	ldr	r3, [r3, #16]
 8002d14:	60fb      	str	r3, [r7, #12]
 8002d16:	e00c      	b.n	8002d32 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	3308      	adds	r3, #8
 8002d1c:	60fb      	str	r3, [r7, #12]
 8002d1e:	e002      	b.n	8002d26 <vListInsert+0x2e>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	60fb      	str	r3, [r7, #12]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d2f6      	bcs.n	8002d20 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	685a      	ldr	r2, [r3, #4]
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	601a      	str	r2, [r3, #0]
}
 8002d5e:	bf00      	nop
 8002d60:	3714      	adds	r7, #20
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bc80      	pop	{r7}
 8002d66:	4770      	bx	lr

08002d68 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6892      	ldr	r2, [r2, #8]
 8002d7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6852      	ldr	r2, [r2, #4]
 8002d88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d103      	bne.n	8002d9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	1e5a      	subs	r2, r3, #1
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3714      	adds	r7, #20
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bc80      	pop	{r7}
 8002db8:	4770      	bx	lr
	...

08002dbc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d10a      	bne.n	8002de6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002de6:	f001 fff9 	bl	8004ddc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	68f9      	ldr	r1, [r7, #12]
 8002df4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002df6:	fb01 f303 	mul.w	r3, r1, r3
 8002dfa:	441a      	add	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e16:	3b01      	subs	r3, #1
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	441a      	add	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	22ff      	movs	r2, #255	; 0xff
 8002e2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	22ff      	movs	r2, #255	; 0xff
 8002e32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d114      	bne.n	8002e66 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d01a      	beq.n	8002e7a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	3310      	adds	r3, #16
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f001 f91b 	bl	8004084 <xTaskRemoveFromEventList>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d012      	beq.n	8002e7a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e54:	4b0c      	ldr	r3, [pc, #48]	; (8002e88 <xQueueGenericReset+0xcc>)
 8002e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f3bf 8f4f 	dsb	sy
 8002e60:	f3bf 8f6f 	isb	sy
 8002e64:	e009      	b.n	8002e7a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3310      	adds	r3, #16
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f7ff fef6 	bl	8002c5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	3324      	adds	r3, #36	; 0x24
 8002e74:	4618      	mov	r0, r3
 8002e76:	f7ff fef1 	bl	8002c5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002e7a:	f001 ffdf 	bl	8004e3c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002e7e:	2301      	movs	r3, #1
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b08e      	sub	sp, #56	; 0x38
 8002e90:	af02      	add	r7, sp, #8
 8002e92:	60f8      	str	r0, [r7, #12]
 8002e94:	60b9      	str	r1, [r7, #8]
 8002e96:	607a      	str	r2, [r7, #4]
 8002e98:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d10a      	bne.n	8002eb6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002ea0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea4:	f383 8811 	msr	BASEPRI, r3
 8002ea8:	f3bf 8f6f 	isb	sy
 8002eac:	f3bf 8f4f 	dsb	sy
 8002eb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002eb2:	bf00      	nop
 8002eb4:	e7fe      	b.n	8002eb4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10a      	bne.n	8002ed2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ec0:	f383 8811 	msr	BASEPRI, r3
 8002ec4:	f3bf 8f6f 	isb	sy
 8002ec8:	f3bf 8f4f 	dsb	sy
 8002ecc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ece:	bf00      	nop
 8002ed0:	e7fe      	b.n	8002ed0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <xQueueGenericCreateStatic+0x52>
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <xQueueGenericCreateStatic+0x56>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <xQueueGenericCreateStatic+0x58>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	623b      	str	r3, [r7, #32]
}
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d102      	bne.n	8002f0a <xQueueGenericCreateStatic+0x7e>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <xQueueGenericCreateStatic+0x82>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <xQueueGenericCreateStatic+0x84>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10a      	bne.n	8002f2a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	61fb      	str	r3, [r7, #28]
}
 8002f26:	bf00      	nop
 8002f28:	e7fe      	b.n	8002f28 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f2a:	2350      	movs	r3, #80	; 0x50
 8002f2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	2b50      	cmp	r3, #80	; 0x50
 8002f32:	d00a      	beq.n	8002f4a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f38:	f383 8811 	msr	BASEPRI, r3
 8002f3c:	f3bf 8f6f 	isb	sy
 8002f40:	f3bf 8f4f 	dsb	sy
 8002f44:	61bb      	str	r3, [r7, #24]
}
 8002f46:	bf00      	nop
 8002f48:	e7fe      	b.n	8002f48 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d00d      	beq.n	8002f70 <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f62:	9300      	str	r3, [sp, #0]
 8002f64:	4613      	mov	r3, r2
 8002f66:	687a      	ldr	r2, [r7, #4]
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	68f8      	ldr	r0, [r7, #12]
 8002f6c:	f000 f805 	bl	8002f7a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3730      	adds	r7, #48	; 0x30
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b084      	sub	sp, #16
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	60f8      	str	r0, [r7, #12]
 8002f82:	60b9      	str	r1, [r7, #8]
 8002f84:	607a      	str	r2, [r7, #4]
 8002f86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d103      	bne.n	8002f96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f8e:	69bb      	ldr	r3, [r7, #24]
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	e002      	b.n	8002f9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f96:	69bb      	ldr	r3, [r7, #24]
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002fa8:	2101      	movs	r1, #1
 8002faa:	69b8      	ldr	r0, [r7, #24]
 8002fac:	f7ff ff06 	bl	8002dbc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08e      	sub	sp, #56	; 0x38
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10a      	bne.n	8002ff2 <xQueueGenericSend+0x32>
	__asm volatile
 8002fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe0:	f383 8811 	msr	BASEPRI, r3
 8002fe4:	f3bf 8f6f 	isb	sy
 8002fe8:	f3bf 8f4f 	dsb	sy
 8002fec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fee:	bf00      	nop
 8002ff0:	e7fe      	b.n	8002ff0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d103      	bne.n	8003000 <xQueueGenericSend+0x40>
 8002ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d101      	bne.n	8003004 <xQueueGenericSend+0x44>
 8003000:	2301      	movs	r3, #1
 8003002:	e000      	b.n	8003006 <xQueueGenericSend+0x46>
 8003004:	2300      	movs	r3, #0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <xQueueGenericSend+0x60>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	2b02      	cmp	r3, #2
 8003024:	d103      	bne.n	800302e <xQueueGenericSend+0x6e>
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	2b01      	cmp	r3, #1
 800302c:	d101      	bne.n	8003032 <xQueueGenericSend+0x72>
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <xQueueGenericSend+0x74>
 8003032:	2300      	movs	r3, #0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10a      	bne.n	800304e <xQueueGenericSend+0x8e>
	__asm volatile
 8003038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800303c:	f383 8811 	msr	BASEPRI, r3
 8003040:	f3bf 8f6f 	isb	sy
 8003044:	f3bf 8f4f 	dsb	sy
 8003048:	623b      	str	r3, [r7, #32]
}
 800304a:	bf00      	nop
 800304c:	e7fe      	b.n	800304c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800304e:	f001 f9df 	bl	8004410 <xTaskGetSchedulerState>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	d102      	bne.n	800305e <xQueueGenericSend+0x9e>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <xQueueGenericSend+0xa2>
 800305e:	2301      	movs	r3, #1
 8003060:	e000      	b.n	8003064 <xQueueGenericSend+0xa4>
 8003062:	2300      	movs	r3, #0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10a      	bne.n	800307e <xQueueGenericSend+0xbe>
	__asm volatile
 8003068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306c:	f383 8811 	msr	BASEPRI, r3
 8003070:	f3bf 8f6f 	isb	sy
 8003074:	f3bf 8f4f 	dsb	sy
 8003078:	61fb      	str	r3, [r7, #28]
}
 800307a:	bf00      	nop
 800307c:	e7fe      	b.n	800307c <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800307e:	f001 fead 	bl	8004ddc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800308a:	429a      	cmp	r2, r3
 800308c:	d302      	bcc.n	8003094 <xQueueGenericSend+0xd4>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b02      	cmp	r3, #2
 8003092:	d129      	bne.n	80030e8 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003094:	683a      	ldr	r2, [r7, #0]
 8003096:	68b9      	ldr	r1, [r7, #8]
 8003098:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800309a:	f000 fa07 	bl	80034ac <prvCopyDataToQueue>
 800309e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d010      	beq.n	80030ca <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030aa:	3324      	adds	r3, #36	; 0x24
 80030ac:	4618      	mov	r0, r3
 80030ae:	f000 ffe9 	bl	8004084 <xTaskRemoveFromEventList>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d013      	beq.n	80030e0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80030b8:	4b3f      	ldr	r3, [pc, #252]	; (80031b8 <xQueueGenericSend+0x1f8>)
 80030ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	e00a      	b.n	80030e0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d007      	beq.n	80030e0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030d0:	4b39      	ldr	r3, [pc, #228]	; (80031b8 <xQueueGenericSend+0x1f8>)
 80030d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	f3bf 8f4f 	dsb	sy
 80030dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030e0:	f001 feac 	bl	8004e3c <vPortExitCritical>
				return pdPASS;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e063      	b.n	80031b0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d103      	bne.n	80030f6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ee:	f001 fea5 	bl	8004e3c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e05c      	b.n	80031b0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d106      	bne.n	800310a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030fc:	f107 0314 	add.w	r3, r7, #20
 8003100:	4618      	mov	r0, r3
 8003102:	f001 f823 	bl	800414c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003106:	2301      	movs	r3, #1
 8003108:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800310a:	f001 fe97 	bl	8004e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800310e:	f000 fd8d 	bl	8003c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003112:	f001 fe63 	bl	8004ddc <vPortEnterCritical>
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800311c:	b25b      	sxtb	r3, r3
 800311e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003122:	d103      	bne.n	800312c <xQueueGenericSend+0x16c>
 8003124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003126:	2200      	movs	r2, #0
 8003128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800312c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800312e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003132:	b25b      	sxtb	r3, r3
 8003134:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003138:	d103      	bne.n	8003142 <xQueueGenericSend+0x182>
 800313a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003142:	f001 fe7b 	bl	8004e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003146:	1d3a      	adds	r2, r7, #4
 8003148:	f107 0314 	add.w	r3, r7, #20
 800314c:	4611      	mov	r1, r2
 800314e:	4618      	mov	r0, r3
 8003150:	f001 f812 	bl	8004178 <xTaskCheckForTimeOut>
 8003154:	4603      	mov	r3, r0
 8003156:	2b00      	cmp	r3, #0
 8003158:	d124      	bne.n	80031a4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800315a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800315c:	f000 fa9e 	bl	800369c <prvIsQueueFull>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d018      	beq.n	8003198 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003168:	3310      	adds	r3, #16
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f000 ff38 	bl	8003fe4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003176:	f000 fa29 	bl	80035cc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800317a:	f000 fd65 	bl	8003c48 <xTaskResumeAll>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	f47f af7c 	bne.w	800307e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003186:	4b0c      	ldr	r3, [pc, #48]	; (80031b8 <xQueueGenericSend+0x1f8>)
 8003188:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	f3bf 8f6f 	isb	sy
 8003196:	e772      	b.n	800307e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003198:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800319a:	f000 fa17 	bl	80035cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800319e:	f000 fd53 	bl	8003c48 <xTaskResumeAll>
 80031a2:	e76c      	b.n	800307e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80031a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80031a6:	f000 fa11 	bl	80035cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031aa:	f000 fd4d 	bl	8003c48 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80031ae:	2300      	movs	r3, #0
		}
	}
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3738      	adds	r7, #56	; 0x38
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	e000ed04 	.word	0xe000ed04

080031bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b08e      	sub	sp, #56	; 0x38
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
 80031c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80031ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d10a      	bne.n	80031ea <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80031d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031d8:	f383 8811 	msr	BASEPRI, r3
 80031dc:	f3bf 8f6f 	isb	sy
 80031e0:	f3bf 8f4f 	dsb	sy
 80031e4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80031e6:	bf00      	nop
 80031e8:	e7fe      	b.n	80031e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d103      	bne.n	80031f8 <xQueueGenericSendFromISR+0x3c>
 80031f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d101      	bne.n	80031fc <xQueueGenericSendFromISR+0x40>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <xQueueGenericSendFromISR+0x42>
 80031fc:	2300      	movs	r3, #0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003206:	f383 8811 	msr	BASEPRI, r3
 800320a:	f3bf 8f6f 	isb	sy
 800320e:	f3bf 8f4f 	dsb	sy
 8003212:	623b      	str	r3, [r7, #32]
}
 8003214:	bf00      	nop
 8003216:	e7fe      	b.n	8003216 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b02      	cmp	r3, #2
 800321c:	d103      	bne.n	8003226 <xQueueGenericSendFromISR+0x6a>
 800321e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	2b01      	cmp	r3, #1
 8003224:	d101      	bne.n	800322a <xQueueGenericSendFromISR+0x6e>
 8003226:	2301      	movs	r3, #1
 8003228:	e000      	b.n	800322c <xQueueGenericSendFromISR+0x70>
 800322a:	2300      	movs	r3, #0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d10a      	bne.n	8003246 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003234:	f383 8811 	msr	BASEPRI, r3
 8003238:	f3bf 8f6f 	isb	sy
 800323c:	f3bf 8f4f 	dsb	sy
 8003240:	61fb      	str	r3, [r7, #28]
}
 8003242:	bf00      	nop
 8003244:	e7fe      	b.n	8003244 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003246:	f001 fe8b 	bl	8004f60 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800324a:	f3ef 8211 	mrs	r2, BASEPRI
 800324e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003252:	f383 8811 	msr	BASEPRI, r3
 8003256:	f3bf 8f6f 	isb	sy
 800325a:	f3bf 8f4f 	dsb	sy
 800325e:	61ba      	str	r2, [r7, #24]
 8003260:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003262:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003264:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800326a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800326e:	429a      	cmp	r2, r3
 8003270:	d302      	bcc.n	8003278 <xQueueGenericSendFromISR+0xbc>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d12c      	bne.n	80032d2 <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800327e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003282:	683a      	ldr	r2, [r7, #0]
 8003284:	68b9      	ldr	r1, [r7, #8]
 8003286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003288:	f000 f910 	bl	80034ac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800328c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8003290:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003294:	d112      	bne.n	80032bc <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	2b00      	cmp	r3, #0
 800329c:	d016      	beq.n	80032cc <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800329e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032a0:	3324      	adds	r3, #36	; 0x24
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 feee 	bl	8004084 <xTaskRemoveFromEventList>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00e      	beq.n	80032cc <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00b      	beq.n	80032cc <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	601a      	str	r2, [r3, #0]
 80032ba:	e007      	b.n	80032cc <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80032bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80032c0:	3301      	adds	r3, #1
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	b25a      	sxtb	r2, r3
 80032c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80032cc:	2301      	movs	r3, #1
 80032ce:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80032d0:	e001      	b.n	80032d6 <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80032d2:	2300      	movs	r3, #0
 80032d4:	637b      	str	r3, [r7, #52]	; 0x34
 80032d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3738      	adds	r7, #56	; 0x38
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08c      	sub	sp, #48	; 0x30
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032f8:	2300      	movs	r3, #0
 80032fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <xQueueReceive+0x30>
	__asm volatile
 8003306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330a:	f383 8811 	msr	BASEPRI, r3
 800330e:	f3bf 8f6f 	isb	sy
 8003312:	f3bf 8f4f 	dsb	sy
 8003316:	623b      	str	r3, [r7, #32]
}
 8003318:	bf00      	nop
 800331a:	e7fe      	b.n	800331a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <xQueueReceive+0x3e>
 8003322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <xQueueReceive+0x42>
 800332a:	2301      	movs	r3, #1
 800332c:	e000      	b.n	8003330 <xQueueReceive+0x44>
 800332e:	2300      	movs	r3, #0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10a      	bne.n	800334a <xQueueReceive+0x5e>
	__asm volatile
 8003334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003338:	f383 8811 	msr	BASEPRI, r3
 800333c:	f3bf 8f6f 	isb	sy
 8003340:	f3bf 8f4f 	dsb	sy
 8003344:	61fb      	str	r3, [r7, #28]
}
 8003346:	bf00      	nop
 8003348:	e7fe      	b.n	8003348 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800334a:	f001 f861 	bl	8004410 <xTaskGetSchedulerState>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d102      	bne.n	800335a <xQueueReceive+0x6e>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <xQueueReceive+0x72>
 800335a:	2301      	movs	r3, #1
 800335c:	e000      	b.n	8003360 <xQueueReceive+0x74>
 800335e:	2300      	movs	r3, #0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10a      	bne.n	800337a <xQueueReceive+0x8e>
	__asm volatile
 8003364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003368:	f383 8811 	msr	BASEPRI, r3
 800336c:	f3bf 8f6f 	isb	sy
 8003370:	f3bf 8f4f 	dsb	sy
 8003374:	61bb      	str	r3, [r7, #24]
}
 8003376:	bf00      	nop
 8003378:	e7fe      	b.n	8003378 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800337a:	f001 fd2f 	bl	8004ddc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800337e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003382:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003386:	2b00      	cmp	r3, #0
 8003388:	d01f      	beq.n	80033ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800338a:	68b9      	ldr	r1, [r7, #8]
 800338c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800338e:	f000 f8f7 	bl	8003580 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003394:	1e5a      	subs	r2, r3, #1
 8003396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003398:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800339a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00f      	beq.n	80033c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033a4:	3310      	adds	r3, #16
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 fe6c 	bl	8004084 <xTaskRemoveFromEventList>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d007      	beq.n	80033c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80033b2:	4b3d      	ldr	r3, [pc, #244]	; (80034a8 <xQueueReceive+0x1bc>)
 80033b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033b8:	601a      	str	r2, [r3, #0]
 80033ba:	f3bf 8f4f 	dsb	sy
 80033be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80033c2:	f001 fd3b 	bl	8004e3c <vPortExitCritical>
				return pdPASS;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e069      	b.n	800349e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d103      	bne.n	80033d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80033d0:	f001 fd34 	bl	8004e3c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80033d4:	2300      	movs	r3, #0
 80033d6:	e062      	b.n	800349e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d106      	bne.n	80033ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033de:	f107 0310 	add.w	r3, r7, #16
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 feb2 	bl	800414c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033e8:	2301      	movs	r3, #1
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033ec:	f001 fd26 	bl	8004e3c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033f0:	f000 fc1c 	bl	8003c2c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033f4:	f001 fcf2 	bl	8004ddc <vPortEnterCritical>
 80033f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033fe:	b25b      	sxtb	r3, r3
 8003400:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003404:	d103      	bne.n	800340e <xQueueReceive+0x122>
 8003406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800340e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003410:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003414:	b25b      	sxtb	r3, r3
 8003416:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800341a:	d103      	bne.n	8003424 <xQueueReceive+0x138>
 800341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341e:	2200      	movs	r2, #0
 8003420:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003424:	f001 fd0a 	bl	8004e3c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003428:	1d3a      	adds	r2, r7, #4
 800342a:	f107 0310 	add.w	r3, r7, #16
 800342e:	4611      	mov	r1, r2
 8003430:	4618      	mov	r0, r3
 8003432:	f000 fea1 	bl	8004178 <xTaskCheckForTimeOut>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d123      	bne.n	8003484 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800343c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800343e:	f000 f917 	bl	8003670 <prvIsQueueEmpty>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d017      	beq.n	8003478 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344a:	3324      	adds	r3, #36	; 0x24
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	4611      	mov	r1, r2
 8003450:	4618      	mov	r0, r3
 8003452:	f000 fdc7 	bl	8003fe4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003458:	f000 f8b8 	bl	80035cc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800345c:	f000 fbf4 	bl	8003c48 <xTaskResumeAll>
 8003460:	4603      	mov	r3, r0
 8003462:	2b00      	cmp	r3, #0
 8003464:	d189      	bne.n	800337a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003466:	4b10      	ldr	r3, [pc, #64]	; (80034a8 <xQueueReceive+0x1bc>)
 8003468:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	f3bf 8f4f 	dsb	sy
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	e780      	b.n	800337a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003478:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800347a:	f000 f8a7 	bl	80035cc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800347e:	f000 fbe3 	bl	8003c48 <xTaskResumeAll>
 8003482:	e77a      	b.n	800337a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003486:	f000 f8a1 	bl	80035cc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800348a:	f000 fbdd 	bl	8003c48 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800348e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003490:	f000 f8ee 	bl	8003670 <prvIsQueueEmpty>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	f43f af6f 	beq.w	800337a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800349c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3730      	adds	r7, #48	; 0x30
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bd80      	pop	{r7, pc}
 80034a6:	bf00      	nop
 80034a8:	e000ed04 	.word	0xe000ed04

080034ac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80034b8:	2300      	movs	r3, #0
 80034ba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10d      	bne.n	80034e6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d14d      	bne.n	800356e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 ffb8 	bl	800444c <xTaskPriorityDisinherit>
 80034dc:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	605a      	str	r2, [r3, #4]
 80034e4:	e043      	b.n	800356e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d119      	bne.n	8003520 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	6898      	ldr	r0, [r3, #8]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f4:	461a      	mov	r2, r3
 80034f6:	68b9      	ldr	r1, [r7, #8]
 80034f8:	f001 ffcc 	bl	8005494 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	441a      	add	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	429a      	cmp	r2, r3
 8003514:	d32b      	bcc.n	800356e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	609a      	str	r2, [r3, #8]
 800351e:	e026      	b.n	800356e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	68d8      	ldr	r0, [r3, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003528:	461a      	mov	r2, r3
 800352a:	68b9      	ldr	r1, [r7, #8]
 800352c:	f001 ffb2 	bl	8005494 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	68da      	ldr	r2, [r3, #12]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003538:	425b      	negs	r3, r3
 800353a:	441a      	add	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68da      	ldr	r2, [r3, #12]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d207      	bcs.n	800355c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	425b      	negs	r3, r3
 8003556:	441a      	add	r2, r3
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d105      	bne.n	800356e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d002      	beq.n	800356e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	3b01      	subs	r3, #1
 800356c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	1c5a      	adds	r2, r3, #1
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003576:	697b      	ldr	r3, [r7, #20]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d018      	beq.n	80035c4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68da      	ldr	r2, [r3, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800359a:	441a      	add	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68da      	ldr	r2, [r3, #12]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	429a      	cmp	r2, r3
 80035aa:	d303      	bcc.n	80035b4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681a      	ldr	r2, [r3, #0]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68d9      	ldr	r1, [r3, #12]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035bc:	461a      	mov	r2, r3
 80035be:	6838      	ldr	r0, [r7, #0]
 80035c0:	f001 ff68 	bl	8005494 <memcpy>
	}
}
 80035c4:	bf00      	nop
 80035c6:	3708      	adds	r7, #8
 80035c8:	46bd      	mov	sp, r7
 80035ca:	bd80      	pop	{r7, pc}

080035cc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80035d4:	f001 fc02 	bl	8004ddc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035de:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80035e0:	e011      	b.n	8003606 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d012      	beq.n	8003610 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3324      	adds	r3, #36	; 0x24
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fd48 	bl	8004084 <xTaskRemoveFromEventList>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80035fa:	f000 fe1f 	bl	800423c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
 8003600:	3b01      	subs	r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800360a:	2b00      	cmp	r3, #0
 800360c:	dce9      	bgt.n	80035e2 <prvUnlockQueue+0x16>
 800360e:	e000      	b.n	8003612 <prvUnlockQueue+0x46>
					break;
 8003610:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	22ff      	movs	r2, #255	; 0xff
 8003616:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800361a:	f001 fc0f 	bl	8004e3c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800361e:	f001 fbdd 	bl	8004ddc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003628:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800362a:	e011      	b.n	8003650 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d012      	beq.n	800365a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3310      	adds	r3, #16
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fd23 	bl	8004084 <xTaskRemoveFromEventList>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003644:	f000 fdfa 	bl	800423c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003648:	7bbb      	ldrb	r3, [r7, #14]
 800364a:	3b01      	subs	r3, #1
 800364c:	b2db      	uxtb	r3, r3
 800364e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003650:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003654:	2b00      	cmp	r3, #0
 8003656:	dce9      	bgt.n	800362c <prvUnlockQueue+0x60>
 8003658:	e000      	b.n	800365c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800365a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	22ff      	movs	r2, #255	; 0xff
 8003660:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003664:	f001 fbea 	bl	8004e3c <vPortExitCritical>
}
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003678:	f001 fbb0 	bl	8004ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	2b00      	cmp	r3, #0
 8003682:	d102      	bne.n	800368a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003684:	2301      	movs	r3, #1
 8003686:	60fb      	str	r3, [r7, #12]
 8003688:	e001      	b.n	800368e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800368a:	2300      	movs	r3, #0
 800368c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800368e:	f001 fbd5 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80036a4:	f001 fb9a 	bl	8004ddc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036b0:	429a      	cmp	r2, r3
 80036b2:	d102      	bne.n	80036ba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80036b4:	2301      	movs	r3, #1
 80036b6:	60fb      	str	r3, [r7, #12]
 80036b8:	e001      	b.n	80036be <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80036be:	f001 fbbd 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 80036c2:	68fb      	ldr	r3, [r7, #12]
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80036d6:	2300      	movs	r3, #0
 80036d8:	60fb      	str	r3, [r7, #12]
 80036da:	e014      	b.n	8003706 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80036dc:	4a0e      	ldr	r2, [pc, #56]	; (8003718 <vQueueAddToRegistry+0x4c>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10b      	bne.n	8003700 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80036e8:	490b      	ldr	r1, [pc, #44]	; (8003718 <vQueueAddToRegistry+0x4c>)
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	683a      	ldr	r2, [r7, #0]
 80036ee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80036f2:	4a09      	ldr	r2, [pc, #36]	; (8003718 <vQueueAddToRegistry+0x4c>)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4413      	add	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80036fe:	e006      	b.n	800370e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	3301      	adds	r3, #1
 8003704:	60fb      	str	r3, [r7, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2b07      	cmp	r3, #7
 800370a:	d9e7      	bls.n	80036dc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	3714      	adds	r7, #20
 8003712:	46bd      	mov	sp, r7
 8003714:	bc80      	pop	{r7}
 8003716:	4770      	bx	lr
 8003718:	20000a0c 	.word	0x20000a0c

0800371c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800372c:	f001 fb56 	bl	8004ddc <vPortEnterCritical>
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003736:	b25b      	sxtb	r3, r3
 8003738:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800373c:	d103      	bne.n	8003746 <vQueueWaitForMessageRestricted+0x2a>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800374c:	b25b      	sxtb	r3, r3
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003752:	d103      	bne.n	800375c <vQueueWaitForMessageRestricted+0x40>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800375c:	f001 fb6e 	bl	8004e3c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	2b00      	cmp	r3, #0
 8003766:	d106      	bne.n	8003776 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	3324      	adds	r3, #36	; 0x24
 800376c:	687a      	ldr	r2, [r7, #4]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fc5b 	bl	800402c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003776:	6978      	ldr	r0, [r7, #20]
 8003778:	f7ff ff28 	bl	80035cc <prvUnlockQueue>
	}
 800377c:	bf00      	nop
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003784:	b580      	push	{r7, lr}
 8003786:	b08e      	sub	sp, #56	; 0x38
 8003788:	af04      	add	r7, sp, #16
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
 8003790:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10a      	bne.n	80037ae <xTaskCreateStatic+0x2a>
	__asm volatile
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	623b      	str	r3, [r7, #32]
}
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80037ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <xTaskCreateStatic+0x46>
	__asm volatile
 80037b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b8:	f383 8811 	msr	BASEPRI, r3
 80037bc:	f3bf 8f6f 	isb	sy
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	61fb      	str	r3, [r7, #28]
}
 80037c6:	bf00      	nop
 80037c8:	e7fe      	b.n	80037c8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80037ca:	23a8      	movs	r3, #168	; 0xa8
 80037cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2ba8      	cmp	r3, #168	; 0xa8
 80037d2:	d00a      	beq.n	80037ea <xTaskCreateStatic+0x66>
	__asm volatile
 80037d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	61bb      	str	r3, [r7, #24]
}
 80037e6:	bf00      	nop
 80037e8:	e7fe      	b.n	80037e8 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80037ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d01e      	beq.n	800382e <xTaskCreateStatic+0xaa>
 80037f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d01b      	beq.n	800382e <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80037f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003802:	2202      	movs	r2, #2
 8003804:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003808:	2300      	movs	r3, #0
 800380a:	9303      	str	r3, [sp, #12]
 800380c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800380e:	9302      	str	r3, [sp, #8]
 8003810:	f107 0314 	add.w	r3, r7, #20
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	68b9      	ldr	r1, [r7, #8]
 8003820:	68f8      	ldr	r0, [r7, #12]
 8003822:	f000 f851 	bl	80038c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003826:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003828:	f000 f8ec 	bl	8003a04 <prvAddNewTaskToReadyList>
 800382c:	e001      	b.n	8003832 <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003832:	697b      	ldr	r3, [r7, #20]
	}
 8003834:	4618      	mov	r0, r3
 8003836:	3728      	adds	r7, #40	; 0x28
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800383c:	b580      	push	{r7, lr}
 800383e:	b08c      	sub	sp, #48	; 0x30
 8003840:	af04      	add	r7, sp, #16
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800384c:	88fb      	ldrh	r3, [r7, #6]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4618      	mov	r0, r3
 8003852:	f001 fbc3 	bl	8004fdc <pvPortMalloc>
 8003856:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00e      	beq.n	800387c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800385e:	20a8      	movs	r0, #168	; 0xa8
 8003860:	f001 fbbc 	bl	8004fdc <pvPortMalloc>
 8003864:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d003      	beq.n	8003874 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	697a      	ldr	r2, [r7, #20]
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
 8003872:	e005      	b.n	8003880 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003874:	6978      	ldr	r0, [r7, #20]
 8003876:	f001 fc75 	bl	8005164 <vPortFree>
 800387a:	e001      	b.n	8003880 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800387c:	2300      	movs	r3, #0
 800387e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d017      	beq.n	80038b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	2300      	movs	r3, #0
 8003892:	9303      	str	r3, [sp, #12]
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	9302      	str	r3, [sp, #8]
 8003898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800389a:	9301      	str	r3, [sp, #4]
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f80f 	bl	80038c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80038aa:	69f8      	ldr	r0, [r7, #28]
 80038ac:	f000 f8aa 	bl	8003a04 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80038b0:	2301      	movs	r3, #1
 80038b2:	61bb      	str	r3, [r7, #24]
 80038b4:	e002      	b.n	80038bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80038b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80038bc:	69bb      	ldr	r3, [r7, #24]
	}
 80038be:	4618      	mov	r0, r3
 80038c0:	3720      	adds	r7, #32
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
	...

080038c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b088      	sub	sp, #32
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80038d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	461a      	mov	r2, r3
 80038e0:	21a5      	movs	r1, #165	; 0xa5
 80038e2:	f001 fd53 	bl	800538c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80038f0:	3b01      	subs	r3, #1
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	f023 0307 	bic.w	r3, r3, #7
 80038fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	f003 0307 	and.w	r3, r3, #7
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00a      	beq.n	8003920 <prvInitialiseNewTask+0x58>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	617b      	str	r3, [r7, #20]
}
 800391c:	bf00      	nop
 800391e:	e7fe      	b.n	800391e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003920:	2300      	movs	r3, #0
 8003922:	61fb      	str	r3, [r7, #28]
 8003924:	e012      	b.n	800394c <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	4413      	add	r3, r2
 800392c:	7819      	ldrb	r1, [r3, #0]
 800392e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	4413      	add	r3, r2
 8003934:	3334      	adds	r3, #52	; 0x34
 8003936:	460a      	mov	r2, r1
 8003938:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	4413      	add	r3, r2
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d006      	beq.n	8003954 <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	3301      	adds	r3, #1
 800394a:	61fb      	str	r3, [r7, #28]
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	2b0f      	cmp	r3, #15
 8003950:	d9e9      	bls.n	8003926 <prvInitialiseNewTask+0x5e>
 8003952:	e000      	b.n	8003956 <prvInitialiseNewTask+0x8e>
		{
			break;
 8003954:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003958:	2200      	movs	r2, #0
 800395a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800395e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003960:	2b37      	cmp	r3, #55	; 0x37
 8003962:	d901      	bls.n	8003968 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003964:	2337      	movs	r3, #55	; 0x37
 8003966:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800396c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800396e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003970:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003972:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003976:	2200      	movs	r2, #0
 8003978:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800397c:	3304      	adds	r3, #4
 800397e:	4618      	mov	r0, r3
 8003980:	f7ff f98b 	bl	8002c9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	3318      	adds	r3, #24
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff f986 	bl	8002c9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800398e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003992:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003996:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800399e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80039a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039a6:	2200      	movs	r2, #0
 80039a8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80039ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ae:	2200      	movs	r2, #0
 80039b0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80039b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b6:	3354      	adds	r3, #84	; 0x54
 80039b8:	224c      	movs	r2, #76	; 0x4c
 80039ba:	2100      	movs	r1, #0
 80039bc:	4618      	mov	r0, r3
 80039be:	f001 fce5 	bl	800538c <memset>
 80039c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c4:	4a0c      	ldr	r2, [pc, #48]	; (80039f8 <prvInitialiseNewTask+0x130>)
 80039c6:	659a      	str	r2, [r3, #88]	; 0x58
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	4a0c      	ldr	r2, [pc, #48]	; (80039fc <prvInitialiseNewTask+0x134>)
 80039cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80039ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d0:	4a0b      	ldr	r2, [pc, #44]	; (8003a00 <prvInitialiseNewTask+0x138>)
 80039d2:	661a      	str	r2, [r3, #96]	; 0x60
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	68f9      	ldr	r1, [r7, #12]
 80039d8:	69b8      	ldr	r0, [r7, #24]
 80039da:	f001 f90b 	bl	8004bf4 <pxPortInitialiseStack>
 80039de:	4602      	mov	r2, r0
 80039e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80039e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80039ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039f0:	bf00      	nop
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20001c98 	.word	0x20001c98
 80039fc:	20001d00 	.word	0x20001d00
 8003a00:	20001d68 	.word	0x20001d68

08003a04 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b082      	sub	sp, #8
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003a0c:	f001 f9e6 	bl	8004ddc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003a10:	4b2d      	ldr	r3, [pc, #180]	; (8003ac8 <prvAddNewTaskToReadyList+0xc4>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3301      	adds	r3, #1
 8003a16:	4a2c      	ldr	r2, [pc, #176]	; (8003ac8 <prvAddNewTaskToReadyList+0xc4>)
 8003a18:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003a1a:	4b2c      	ldr	r3, [pc, #176]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d109      	bne.n	8003a36 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003a22:	4a2a      	ldr	r2, [pc, #168]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a28:	4b27      	ldr	r3, [pc, #156]	; (8003ac8 <prvAddNewTaskToReadyList+0xc4>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d110      	bne.n	8003a52 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003a30:	f000 fc28 	bl	8004284 <prvInitialiseTaskLists>
 8003a34:	e00d      	b.n	8003a52 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003a36:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <prvAddNewTaskToReadyList+0xcc>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d109      	bne.n	8003a52 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003a3e:	4b23      	ldr	r3, [pc, #140]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d802      	bhi.n	8003a52 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003a4c:	4a1f      	ldr	r2, [pc, #124]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003a52:	4b20      	ldr	r3, [pc, #128]	; (8003ad4 <prvAddNewTaskToReadyList+0xd0>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	3301      	adds	r3, #1
 8003a58:	4a1e      	ldr	r2, [pc, #120]	; (8003ad4 <prvAddNewTaskToReadyList+0xd0>)
 8003a5a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003a5c:	4b1d      	ldr	r3, [pc, #116]	; (8003ad4 <prvAddNewTaskToReadyList+0xd0>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	4b1b      	ldr	r3, [pc, #108]	; (8003ad8 <prvAddNewTaskToReadyList+0xd4>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d903      	bls.n	8003a78 <prvAddNewTaskToReadyList+0x74>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	4a18      	ldr	r2, [pc, #96]	; (8003ad8 <prvAddNewTaskToReadyList+0xd4>)
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	4a15      	ldr	r2, [pc, #84]	; (8003adc <prvAddNewTaskToReadyList+0xd8>)
 8003a86:	441a      	add	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3304      	adds	r3, #4
 8003a8c:	4619      	mov	r1, r3
 8003a8e:	4610      	mov	r0, r2
 8003a90:	f7ff f90f 	bl	8002cb2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003a94:	f001 f9d2 	bl	8004e3c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <prvAddNewTaskToReadyList+0xcc>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00e      	beq.n	8003abe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <prvAddNewTaskToReadyList+0xc8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d207      	bcs.n	8003abe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003aae:	4b0c      	ldr	r3, [pc, #48]	; (8003ae0 <prvAddNewTaskToReadyList+0xdc>)
 8003ab0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	f3bf 8f4f 	dsb	sy
 8003aba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	20000f20 	.word	0x20000f20
 8003acc:	20000a4c 	.word	0x20000a4c
 8003ad0:	20000f2c 	.word	0x20000f2c
 8003ad4:	20000f3c 	.word	0x20000f3c
 8003ad8:	20000f28 	.word	0x20000f28
 8003adc:	20000a50 	.word	0x20000a50
 8003ae0:	e000ed04 	.word	0xe000ed04

08003ae4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d017      	beq.n	8003b26 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003af6:	4b13      	ldr	r3, [pc, #76]	; (8003b44 <vTaskDelay+0x60>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d00a      	beq.n	8003b14 <vTaskDelay+0x30>
	__asm volatile
 8003afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b02:	f383 8811 	msr	BASEPRI, r3
 8003b06:	f3bf 8f6f 	isb	sy
 8003b0a:	f3bf 8f4f 	dsb	sy
 8003b0e:	60bb      	str	r3, [r7, #8]
}
 8003b10:	bf00      	nop
 8003b12:	e7fe      	b.n	8003b12 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003b14:	f000 f88a 	bl	8003c2c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003b18:	2100      	movs	r1, #0
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f000 fd04 	bl	8004528 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003b20:	f000 f892 	bl	8003c48 <xTaskResumeAll>
 8003b24:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d107      	bne.n	8003b3c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003b2c:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <vTaskDelay+0x64>)
 8003b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003b3c:	bf00      	nop
 8003b3e:	3710      	adds	r7, #16
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	20000f48 	.word	0x20000f48
 8003b48:	e000ed04 	.word	0xe000ed04

08003b4c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b08a      	sub	sp, #40	; 0x28
 8003b50:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003b56:	2300      	movs	r3, #0
 8003b58:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003b5a:	463a      	mov	r2, r7
 8003b5c:	1d39      	adds	r1, r7, #4
 8003b5e:	f107 0308 	add.w	r3, r7, #8
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f848 	bl	8002bf8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68ba      	ldr	r2, [r7, #8]
 8003b6e:	9202      	str	r2, [sp, #8]
 8003b70:	9301      	str	r3, [sp, #4]
 8003b72:	2300      	movs	r3, #0
 8003b74:	9300      	str	r3, [sp, #0]
 8003b76:	2300      	movs	r3, #0
 8003b78:	460a      	mov	r2, r1
 8003b7a:	4924      	ldr	r1, [pc, #144]	; (8003c0c <vTaskStartScheduler+0xc0>)
 8003b7c:	4824      	ldr	r0, [pc, #144]	; (8003c10 <vTaskStartScheduler+0xc4>)
 8003b7e:	f7ff fe01 	bl	8003784 <xTaskCreateStatic>
 8003b82:	4603      	mov	r3, r0
 8003b84:	4a23      	ldr	r2, [pc, #140]	; (8003c14 <vTaskStartScheduler+0xc8>)
 8003b86:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003b88:	4b22      	ldr	r3, [pc, #136]	; (8003c14 <vTaskStartScheduler+0xc8>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d002      	beq.n	8003b96 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003b90:	2301      	movs	r3, #1
 8003b92:	617b      	str	r3, [r7, #20]
 8003b94:	e001      	b.n	8003b9a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	2b01      	cmp	r3, #1
 8003b9e:	d102      	bne.n	8003ba6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ba0:	f000 fd16 	bl	80045d0 <xTimerCreateTimerTask>
 8003ba4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d11b      	bne.n	8003be4 <vTaskStartScheduler+0x98>
	__asm volatile
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	613b      	str	r3, [r7, #16]
}
 8003bbe:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003bc0:	4b15      	ldr	r3, [pc, #84]	; (8003c18 <vTaskStartScheduler+0xcc>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3354      	adds	r3, #84	; 0x54
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <vTaskStartScheduler+0xd0>)
 8003bc8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003bca:	4b15      	ldr	r3, [pc, #84]	; (8003c20 <vTaskStartScheduler+0xd4>)
 8003bcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bd0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <vTaskStartScheduler+0xd8>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003bd8:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <vTaskStartScheduler+0xdc>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003bde:	f001 f88b 	bl	8004cf8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003be2:	e00e      	b.n	8003c02 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bea:	d10a      	bne.n	8003c02 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf0:	f383 8811 	msr	BASEPRI, r3
 8003bf4:	f3bf 8f6f 	isb	sy
 8003bf8:	f3bf 8f4f 	dsb	sy
 8003bfc:	60fb      	str	r3, [r7, #12]
}
 8003bfe:	bf00      	nop
 8003c00:	e7fe      	b.n	8003c00 <vTaskStartScheduler+0xb4>
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	0800557c 	.word	0x0800557c
 8003c10:	08004255 	.word	0x08004255
 8003c14:	20000f44 	.word	0x20000f44
 8003c18:	20000a4c 	.word	0x20000a4c
 8003c1c:	2000005c 	.word	0x2000005c
 8003c20:	20000f40 	.word	0x20000f40
 8003c24:	20000f2c 	.word	0x20000f2c
 8003c28:	20000f24 	.word	0x20000f24

08003c2c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003c30:	4b04      	ldr	r3, [pc, #16]	; (8003c44 <vTaskSuspendAll+0x18>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	3301      	adds	r3, #1
 8003c36:	4a03      	ldr	r2, [pc, #12]	; (8003c44 <vTaskSuspendAll+0x18>)
 8003c38:	6013      	str	r3, [r2, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bc80      	pop	{r7}
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000f48 	.word	0x20000f48

08003c48 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b084      	sub	sp, #16
 8003c4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003c56:	4b42      	ldr	r3, [pc, #264]	; (8003d60 <xTaskResumeAll+0x118>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10a      	bne.n	8003c74 <xTaskResumeAll+0x2c>
	__asm volatile
 8003c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c62:	f383 8811 	msr	BASEPRI, r3
 8003c66:	f3bf 8f6f 	isb	sy
 8003c6a:	f3bf 8f4f 	dsb	sy
 8003c6e:	603b      	str	r3, [r7, #0]
}
 8003c70:	bf00      	nop
 8003c72:	e7fe      	b.n	8003c72 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003c74:	f001 f8b2 	bl	8004ddc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003c78:	4b39      	ldr	r3, [pc, #228]	; (8003d60 <xTaskResumeAll+0x118>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	3b01      	subs	r3, #1
 8003c7e:	4a38      	ldr	r2, [pc, #224]	; (8003d60 <xTaskResumeAll+0x118>)
 8003c80:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c82:	4b37      	ldr	r3, [pc, #220]	; (8003d60 <xTaskResumeAll+0x118>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d162      	bne.n	8003d50 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c8a:	4b36      	ldr	r3, [pc, #216]	; (8003d64 <xTaskResumeAll+0x11c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d05e      	beq.n	8003d50 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c92:	e02f      	b.n	8003cf4 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c94:	4b34      	ldr	r3, [pc, #208]	; (8003d68 <xTaskResumeAll+0x120>)
 8003c96:	68db      	ldr	r3, [r3, #12]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	3318      	adds	r3, #24
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff f861 	bl	8002d68 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3304      	adds	r3, #4
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7ff f85c 	bl	8002d68 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	4b2d      	ldr	r3, [pc, #180]	; (8003d6c <xTaskResumeAll+0x124>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d903      	bls.n	8003cc4 <xTaskResumeAll+0x7c>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc0:	4a2a      	ldr	r2, [pc, #168]	; (8003d6c <xTaskResumeAll+0x124>)
 8003cc2:	6013      	str	r3, [r2, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc8:	4613      	mov	r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	4413      	add	r3, r2
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	4a27      	ldr	r2, [pc, #156]	; (8003d70 <xTaskResumeAll+0x128>)
 8003cd2:	441a      	add	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3304      	adds	r3, #4
 8003cd8:	4619      	mov	r1, r3
 8003cda:	4610      	mov	r0, r2
 8003cdc:	f7fe ffe9 	bl	8002cb2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce4:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <xTaskResumeAll+0x12c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d302      	bcc.n	8003cf4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003cee:	4b22      	ldr	r3, [pc, #136]	; (8003d78 <xTaskResumeAll+0x130>)
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003cf4:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <xTaskResumeAll+0x120>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d1cb      	bne.n	8003c94 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003d02:	f000 fb61 	bl	80043c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003d06:	4b1d      	ldr	r3, [pc, #116]	; (8003d7c <xTaskResumeAll+0x134>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d010      	beq.n	8003d34 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003d12:	f000 f845 	bl	8003da0 <xTaskIncrementTick>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d002      	beq.n	8003d22 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003d1c:	4b16      	ldr	r3, [pc, #88]	; (8003d78 <xTaskResumeAll+0x130>)
 8003d1e:	2201      	movs	r2, #1
 8003d20:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	3b01      	subs	r3, #1
 8003d26:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1f1      	bne.n	8003d12 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <xTaskResumeAll+0x134>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003d34:	4b10      	ldr	r3, [pc, #64]	; (8003d78 <xTaskResumeAll+0x130>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d009      	beq.n	8003d50 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003d40:	4b0f      	ldr	r3, [pc, #60]	; (8003d80 <xTaskResumeAll+0x138>)
 8003d42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d46:	601a      	str	r2, [r3, #0]
 8003d48:	f3bf 8f4f 	dsb	sy
 8003d4c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003d50:	f001 f874 	bl	8004e3c <vPortExitCritical>

	return xAlreadyYielded;
 8003d54:	68bb      	ldr	r3, [r7, #8]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000f48 	.word	0x20000f48
 8003d64:	20000f20 	.word	0x20000f20
 8003d68:	20000ee0 	.word	0x20000ee0
 8003d6c:	20000f28 	.word	0x20000f28
 8003d70:	20000a50 	.word	0x20000a50
 8003d74:	20000a4c 	.word	0x20000a4c
 8003d78:	20000f34 	.word	0x20000f34
 8003d7c:	20000f30 	.word	0x20000f30
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003d8a:	4b04      	ldr	r3, [pc, #16]	; (8003d9c <xTaskGetTickCount+0x18>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003d90:	687b      	ldr	r3, [r7, #4]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bc80      	pop	{r7}
 8003d9a:	4770      	bx	lr
 8003d9c:	20000f24 	.word	0x20000f24

08003da0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003da6:	2300      	movs	r3, #0
 8003da8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003daa:	4b51      	ldr	r3, [pc, #324]	; (8003ef0 <xTaskIncrementTick+0x150>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	f040 808e 	bne.w	8003ed0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003db4:	4b4f      	ldr	r3, [pc, #316]	; (8003ef4 <xTaskIncrementTick+0x154>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	3301      	adds	r3, #1
 8003dba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003dbc:	4a4d      	ldr	r2, [pc, #308]	; (8003ef4 <xTaskIncrementTick+0x154>)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d120      	bne.n	8003e0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003dc8:	4b4b      	ldr	r3, [pc, #300]	; (8003ef8 <xTaskIncrementTick+0x158>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00a      	beq.n	8003de8 <xTaskIncrementTick+0x48>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	603b      	str	r3, [r7, #0]
}
 8003de4:	bf00      	nop
 8003de6:	e7fe      	b.n	8003de6 <xTaskIncrementTick+0x46>
 8003de8:	4b43      	ldr	r3, [pc, #268]	; (8003ef8 <xTaskIncrementTick+0x158>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	60fb      	str	r3, [r7, #12]
 8003dee:	4b43      	ldr	r3, [pc, #268]	; (8003efc <xTaskIncrementTick+0x15c>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a41      	ldr	r2, [pc, #260]	; (8003ef8 <xTaskIncrementTick+0x158>)
 8003df4:	6013      	str	r3, [r2, #0]
 8003df6:	4a41      	ldr	r2, [pc, #260]	; (8003efc <xTaskIncrementTick+0x15c>)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6013      	str	r3, [r2, #0]
 8003dfc:	4b40      	ldr	r3, [pc, #256]	; (8003f00 <xTaskIncrementTick+0x160>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	3301      	adds	r3, #1
 8003e02:	4a3f      	ldr	r2, [pc, #252]	; (8003f00 <xTaskIncrementTick+0x160>)
 8003e04:	6013      	str	r3, [r2, #0]
 8003e06:	f000 fadf 	bl	80043c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003e0a:	4b3e      	ldr	r3, [pc, #248]	; (8003f04 <xTaskIncrementTick+0x164>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	693a      	ldr	r2, [r7, #16]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d34e      	bcc.n	8003eb2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e14:	4b38      	ldr	r3, [pc, #224]	; (8003ef8 <xTaskIncrementTick+0x158>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <xTaskIncrementTick+0x82>
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e000      	b.n	8003e24 <xTaskIncrementTick+0x84>
 8003e22:	2300      	movs	r3, #0
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e28:	4b36      	ldr	r3, [pc, #216]	; (8003f04 <xTaskIncrementTick+0x164>)
 8003e2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003e2e:	601a      	str	r2, [r3, #0]
					break;
 8003e30:	e03f      	b.n	8003eb2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003e32:	4b31      	ldr	r3, [pc, #196]	; (8003ef8 <xTaskIncrementTick+0x158>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003e3c:	68bb      	ldr	r3, [r7, #8]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003e42:	693a      	ldr	r2, [r7, #16]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	d203      	bcs.n	8003e52 <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003e4a:	4a2e      	ldr	r2, [pc, #184]	; (8003f04 <xTaskIncrementTick+0x164>)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6013      	str	r3, [r2, #0]
						break;
 8003e50:	e02f      	b.n	8003eb2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	3304      	adds	r3, #4
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe ff86 	bl	8002d68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d004      	beq.n	8003e6e <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	3318      	adds	r3, #24
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f7fe ff7d 	bl	8002d68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e72:	4b25      	ldr	r3, [pc, #148]	; (8003f08 <xTaskIncrementTick+0x168>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d903      	bls.n	8003e82 <xTaskIncrementTick+0xe2>
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7e:	4a22      	ldr	r2, [pc, #136]	; (8003f08 <xTaskIncrementTick+0x168>)
 8003e80:	6013      	str	r3, [r2, #0]
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e86:	4613      	mov	r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	4a1f      	ldr	r2, [pc, #124]	; (8003f0c <xTaskIncrementTick+0x16c>)
 8003e90:	441a      	add	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	3304      	adds	r3, #4
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f7fe ff0a 	bl	8002cb2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ea2:	4b1b      	ldr	r3, [pc, #108]	; (8003f10 <xTaskIncrementTick+0x170>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d3b3      	bcc.n	8003e14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003eb0:	e7b0      	b.n	8003e14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003eb2:	4b17      	ldr	r3, [pc, #92]	; (8003f10 <xTaskIncrementTick+0x170>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb8:	4914      	ldr	r1, [pc, #80]	; (8003f0c <xTaskIncrementTick+0x16c>)
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	440b      	add	r3, r1
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d907      	bls.n	8003eda <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e004      	b.n	8003eda <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003ed0:	4b10      	ldr	r3, [pc, #64]	; (8003f14 <xTaskIncrementTick+0x174>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	3301      	adds	r3, #1
 8003ed6:	4a0f      	ldr	r2, [pc, #60]	; (8003f14 <xTaskIncrementTick+0x174>)
 8003ed8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003eda:	4b0f      	ldr	r3, [pc, #60]	; (8003f18 <xTaskIncrementTick+0x178>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003ee6:	697b      	ldr	r3, [r7, #20]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	20000f48 	.word	0x20000f48
 8003ef4:	20000f24 	.word	0x20000f24
 8003ef8:	20000ed8 	.word	0x20000ed8
 8003efc:	20000edc 	.word	0x20000edc
 8003f00:	20000f38 	.word	0x20000f38
 8003f04:	20000f40 	.word	0x20000f40
 8003f08:	20000f28 	.word	0x20000f28
 8003f0c:	20000a50 	.word	0x20000a50
 8003f10:	20000a4c 	.word	0x20000a4c
 8003f14:	20000f30 	.word	0x20000f30
 8003f18:	20000f34 	.word	0x20000f34

08003f1c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b085      	sub	sp, #20
 8003f20:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f22:	4b2a      	ldr	r3, [pc, #168]	; (8003fcc <vTaskSwitchContext+0xb0>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003f2a:	4b29      	ldr	r3, [pc, #164]	; (8003fd0 <vTaskSwitchContext+0xb4>)
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003f30:	e046      	b.n	8003fc0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003f32:	4b27      	ldr	r3, [pc, #156]	; (8003fd0 <vTaskSwitchContext+0xb4>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f38:	4b26      	ldr	r3, [pc, #152]	; (8003fd4 <vTaskSwitchContext+0xb8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e010      	b.n	8003f62 <vTaskSwitchContext+0x46>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10a      	bne.n	8003f5c <vTaskSwitchContext+0x40>
	__asm volatile
 8003f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f4a:	f383 8811 	msr	BASEPRI, r3
 8003f4e:	f3bf 8f6f 	isb	sy
 8003f52:	f3bf 8f4f 	dsb	sy
 8003f56:	607b      	str	r3, [r7, #4]
}
 8003f58:	bf00      	nop
 8003f5a:	e7fe      	b.n	8003f5a <vTaskSwitchContext+0x3e>
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	3b01      	subs	r3, #1
 8003f60:	60fb      	str	r3, [r7, #12]
 8003f62:	491d      	ldr	r1, [pc, #116]	; (8003fd8 <vTaskSwitchContext+0xbc>)
 8003f64:	68fa      	ldr	r2, [r7, #12]
 8003f66:	4613      	mov	r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	4413      	add	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0e4      	beq.n	8003f40 <vTaskSwitchContext+0x24>
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4a15      	ldr	r2, [pc, #84]	; (8003fd8 <vTaskSwitchContext+0xbc>)
 8003f82:	4413      	add	r3, r2
 8003f84:	60bb      	str	r3, [r7, #8]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	685a      	ldr	r2, [r3, #4]
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	605a      	str	r2, [r3, #4]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	3308      	adds	r3, #8
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d104      	bne.n	8003fa6 <vTaskSwitchContext+0x8a>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	605a      	str	r2, [r3, #4]
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	4a0b      	ldr	r2, [pc, #44]	; (8003fdc <vTaskSwitchContext+0xc0>)
 8003fae:	6013      	str	r3, [r2, #0]
 8003fb0:	4a08      	ldr	r2, [pc, #32]	; (8003fd4 <vTaskSwitchContext+0xb8>)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <vTaskSwitchContext+0xc0>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3354      	adds	r3, #84	; 0x54
 8003fbc:	4a08      	ldr	r2, [pc, #32]	; (8003fe0 <vTaskSwitchContext+0xc4>)
 8003fbe:	6013      	str	r3, [r2, #0]
}
 8003fc0:	bf00      	nop
 8003fc2:	3714      	adds	r7, #20
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bc80      	pop	{r7}
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000f48 	.word	0x20000f48
 8003fd0:	20000f34 	.word	0x20000f34
 8003fd4:	20000f28 	.word	0x20000f28
 8003fd8:	20000a50 	.word	0x20000a50
 8003fdc:	20000a4c 	.word	0x20000a4c
 8003fe0:	2000005c 	.word	0x2000005c

08003fe4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b084      	sub	sp, #16
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d10a      	bne.n	800400a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff8:	f383 8811 	msr	BASEPRI, r3
 8003ffc:	f3bf 8f6f 	isb	sy
 8004000:	f3bf 8f4f 	dsb	sy
 8004004:	60fb      	str	r3, [r7, #12]
}
 8004006:	bf00      	nop
 8004008:	e7fe      	b.n	8004008 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800400a:	4b07      	ldr	r3, [pc, #28]	; (8004028 <vTaskPlaceOnEventList+0x44>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3318      	adds	r3, #24
 8004010:	4619      	mov	r1, r3
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7fe fe70 	bl	8002cf8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004018:	2101      	movs	r1, #1
 800401a:	6838      	ldr	r0, [r7, #0]
 800401c:	f000 fa84 	bl	8004528 <prvAddCurrentTaskToDelayedList>
}
 8004020:	bf00      	nop
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}
 8004028:	20000a4c 	.word	0x20000a4c

0800402c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	60f8      	str	r0, [r7, #12]
 8004034:	60b9      	str	r1, [r7, #8]
 8004036:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	617b      	str	r3, [r7, #20]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004054:	4b0a      	ldr	r3, [pc, #40]	; (8004080 <vTaskPlaceOnEventListRestricted+0x54>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	3318      	adds	r3, #24
 800405a:	4619      	mov	r1, r3
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f7fe fe28 	bl	8002cb2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d002      	beq.n	800406e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800406c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	68b8      	ldr	r0, [r7, #8]
 8004072:	f000 fa59 	bl	8004528 <prvAddCurrentTaskToDelayedList>
	}
 8004076:	bf00      	nop
 8004078:	3718      	adds	r7, #24
 800407a:	46bd      	mov	sp, r7
 800407c:	bd80      	pop	{r7, pc}
 800407e:	bf00      	nop
 8004080:	20000a4c 	.word	0x20000a4c

08004084 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d10a      	bne.n	80040b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800409a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800409e:	f383 8811 	msr	BASEPRI, r3
 80040a2:	f3bf 8f6f 	isb	sy
 80040a6:	f3bf 8f4f 	dsb	sy
 80040aa:	60fb      	str	r3, [r7, #12]
}
 80040ac:	bf00      	nop
 80040ae:	e7fe      	b.n	80040ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	3318      	adds	r3, #24
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fe fe57 	bl	8002d68 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040ba:	4b1e      	ldr	r3, [pc, #120]	; (8004134 <xTaskRemoveFromEventList+0xb0>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d11d      	bne.n	80040fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	3304      	adds	r3, #4
 80040c6:	4618      	mov	r0, r3
 80040c8:	f7fe fe4e 	bl	8002d68 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d0:	4b19      	ldr	r3, [pc, #100]	; (8004138 <xTaskRemoveFromEventList+0xb4>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	429a      	cmp	r2, r3
 80040d6:	d903      	bls.n	80040e0 <xTaskRemoveFromEventList+0x5c>
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4a16      	ldr	r2, [pc, #88]	; (8004138 <xTaskRemoveFromEventList+0xb4>)
 80040de:	6013      	str	r3, [r2, #0]
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040e4:	4613      	mov	r3, r2
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	4413      	add	r3, r2
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	4a13      	ldr	r2, [pc, #76]	; (800413c <xTaskRemoveFromEventList+0xb8>)
 80040ee:	441a      	add	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	3304      	adds	r3, #4
 80040f4:	4619      	mov	r1, r3
 80040f6:	4610      	mov	r0, r2
 80040f8:	f7fe fddb 	bl	8002cb2 <vListInsertEnd>
 80040fc:	e005      	b.n	800410a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3318      	adds	r3, #24
 8004102:	4619      	mov	r1, r3
 8004104:	480e      	ldr	r0, [pc, #56]	; (8004140 <xTaskRemoveFromEventList+0xbc>)
 8004106:	f7fe fdd4 	bl	8002cb2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <xTaskRemoveFromEventList+0xc0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004114:	429a      	cmp	r2, r3
 8004116:	d905      	bls.n	8004124 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004118:	2301      	movs	r3, #1
 800411a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <xTaskRemoveFromEventList+0xc4>)
 800411e:	2201      	movs	r2, #1
 8004120:	601a      	str	r2, [r3, #0]
 8004122:	e001      	b.n	8004128 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004124:	2300      	movs	r3, #0
 8004126:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004128:	697b      	ldr	r3, [r7, #20]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3718      	adds	r7, #24
 800412e:	46bd      	mov	sp, r7
 8004130:	bd80      	pop	{r7, pc}
 8004132:	bf00      	nop
 8004134:	20000f48 	.word	0x20000f48
 8004138:	20000f28 	.word	0x20000f28
 800413c:	20000a50 	.word	0x20000a50
 8004140:	20000ee0 	.word	0x20000ee0
 8004144:	20000a4c 	.word	0x20000a4c
 8004148:	20000f34 	.word	0x20000f34

0800414c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004154:	4b06      	ldr	r3, [pc, #24]	; (8004170 <vTaskInternalSetTimeOutState+0x24>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <vTaskInternalSetTimeOutState+0x28>)
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	605a      	str	r2, [r3, #4]
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	20000f38 	.word	0x20000f38
 8004174:	20000f24 	.word	0x20000f24

08004178 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b088      	sub	sp, #32
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10a      	bne.n	800419e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800418c:	f383 8811 	msr	BASEPRI, r3
 8004190:	f3bf 8f6f 	isb	sy
 8004194:	f3bf 8f4f 	dsb	sy
 8004198:	613b      	str	r3, [r7, #16]
}
 800419a:	bf00      	nop
 800419c:	e7fe      	b.n	800419c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d10a      	bne.n	80041ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a8:	f383 8811 	msr	BASEPRI, r3
 80041ac:	f3bf 8f6f 	isb	sy
 80041b0:	f3bf 8f4f 	dsb	sy
 80041b4:	60fb      	str	r3, [r7, #12]
}
 80041b6:	bf00      	nop
 80041b8:	e7fe      	b.n	80041b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80041ba:	f000 fe0f 	bl	8004ddc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <xTaskCheckForTimeOut+0xbc>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041d6:	d102      	bne.n	80041de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
 80041dc:	e023      	b.n	8004226 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	4b15      	ldr	r3, [pc, #84]	; (8004238 <xTaskCheckForTimeOut+0xc0>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d007      	beq.n	80041fa <xTaskCheckForTimeOut+0x82>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	69ba      	ldr	r2, [r7, #24]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d302      	bcc.n	80041fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	61fb      	str	r3, [r7, #28]
 80041f8:	e015      	b.n	8004226 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	429a      	cmp	r2, r3
 8004202:	d20b      	bcs.n	800421c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	1ad2      	subs	r2, r2, r3
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff ff9b 	bl	800414c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004216:	2300      	movs	r3, #0
 8004218:	61fb      	str	r3, [r7, #28]
 800421a:	e004      	b.n	8004226 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	2200      	movs	r2, #0
 8004220:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004222:	2301      	movs	r3, #1
 8004224:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004226:	f000 fe09 	bl	8004e3c <vPortExitCritical>

	return xReturn;
 800422a:	69fb      	ldr	r3, [r7, #28]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3720      	adds	r7, #32
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000f24 	.word	0x20000f24
 8004238:	20000f38 	.word	0x20000f38

0800423c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004240:	4b03      	ldr	r3, [pc, #12]	; (8004250 <vTaskMissedYield+0x14>)
 8004242:	2201      	movs	r2, #1
 8004244:	601a      	str	r2, [r3, #0]
}
 8004246:	bf00      	nop
 8004248:	46bd      	mov	sp, r7
 800424a:	bc80      	pop	{r7}
 800424c:	4770      	bx	lr
 800424e:	bf00      	nop
 8004250:	20000f34 	.word	0x20000f34

08004254 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800425c:	f000 f852 	bl	8004304 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004260:	4b06      	ldr	r3, [pc, #24]	; (800427c <prvIdleTask+0x28>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d9f9      	bls.n	800425c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004268:	4b05      	ldr	r3, [pc, #20]	; (8004280 <prvIdleTask+0x2c>)
 800426a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426e:	601a      	str	r2, [r3, #0]
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004278:	e7f0      	b.n	800425c <prvIdleTask+0x8>
 800427a:	bf00      	nop
 800427c:	20000a50 	.word	0x20000a50
 8004280:	e000ed04 	.word	0xe000ed04

08004284 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800428a:	2300      	movs	r3, #0
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	e00c      	b.n	80042aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	4413      	add	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <prvInitialiseTaskLists+0x60>)
 800429c:	4413      	add	r3, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f7fe fcdc 	bl	8002c5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	3301      	adds	r3, #1
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b37      	cmp	r3, #55	; 0x37
 80042ae:	d9ef      	bls.n	8004290 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042b0:	480d      	ldr	r0, [pc, #52]	; (80042e8 <prvInitialiseTaskLists+0x64>)
 80042b2:	f7fe fcd3 	bl	8002c5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042b6:	480d      	ldr	r0, [pc, #52]	; (80042ec <prvInitialiseTaskLists+0x68>)
 80042b8:	f7fe fcd0 	bl	8002c5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042bc:	480c      	ldr	r0, [pc, #48]	; (80042f0 <prvInitialiseTaskLists+0x6c>)
 80042be:	f7fe fccd 	bl	8002c5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042c2:	480c      	ldr	r0, [pc, #48]	; (80042f4 <prvInitialiseTaskLists+0x70>)
 80042c4:	f7fe fcca 	bl	8002c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80042c8:	480b      	ldr	r0, [pc, #44]	; (80042f8 <prvInitialiseTaskLists+0x74>)
 80042ca:	f7fe fcc7 	bl	8002c5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <prvInitialiseTaskLists+0x78>)
 80042d0:	4a05      	ldr	r2, [pc, #20]	; (80042e8 <prvInitialiseTaskLists+0x64>)
 80042d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80042d4:	4b0a      	ldr	r3, [pc, #40]	; (8004300 <prvInitialiseTaskLists+0x7c>)
 80042d6:	4a05      	ldr	r2, [pc, #20]	; (80042ec <prvInitialiseTaskLists+0x68>)
 80042d8:	601a      	str	r2, [r3, #0]
}
 80042da:	bf00      	nop
 80042dc:	3708      	adds	r7, #8
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	20000a50 	.word	0x20000a50
 80042e8:	20000eb0 	.word	0x20000eb0
 80042ec:	20000ec4 	.word	0x20000ec4
 80042f0:	20000ee0 	.word	0x20000ee0
 80042f4:	20000ef4 	.word	0x20000ef4
 80042f8:	20000f0c 	.word	0x20000f0c
 80042fc:	20000ed8 	.word	0x20000ed8
 8004300:	20000edc 	.word	0x20000edc

08004304 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800430a:	e019      	b.n	8004340 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800430c:	f000 fd66 	bl	8004ddc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004310:	4b10      	ldr	r3, [pc, #64]	; (8004354 <prvCheckTasksWaitingTermination+0x50>)
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	3304      	adds	r3, #4
 800431c:	4618      	mov	r0, r3
 800431e:	f7fe fd23 	bl	8002d68 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004322:	4b0d      	ldr	r3, [pc, #52]	; (8004358 <prvCheckTasksWaitingTermination+0x54>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	3b01      	subs	r3, #1
 8004328:	4a0b      	ldr	r2, [pc, #44]	; (8004358 <prvCheckTasksWaitingTermination+0x54>)
 800432a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800432c:	4b0b      	ldr	r3, [pc, #44]	; (800435c <prvCheckTasksWaitingTermination+0x58>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3b01      	subs	r3, #1
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <prvCheckTasksWaitingTermination+0x58>)
 8004334:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004336:	f000 fd81 	bl	8004e3c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f810 	bl	8004360 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004340:	4b06      	ldr	r3, [pc, #24]	; (800435c <prvCheckTasksWaitingTermination+0x58>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d1e1      	bne.n	800430c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004348:	bf00      	nop
 800434a:	bf00      	nop
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20000ef4 	.word	0x20000ef4
 8004358:	20000f20 	.word	0x20000f20
 800435c:	20000f08 	.word	0x20000f08

08004360 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3354      	adds	r3, #84	; 0x54
 800436c:	4618      	mov	r0, r3
 800436e:	f001 f815 	bl	800539c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004378:	2b00      	cmp	r3, #0
 800437a:	d108      	bne.n	800438e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	4618      	mov	r0, r3
 8004382:	f000 feef 	bl	8005164 <vPortFree>
				vPortFree( pxTCB );
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 feec 	bl	8005164 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800438c:	e018      	b.n	80043c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8004394:	2b01      	cmp	r3, #1
 8004396:	d103      	bne.n	80043a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 fee3 	bl	8005164 <vPortFree>
	}
 800439e:	e00f      	b.n	80043c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d00a      	beq.n	80043c0 <prvDeleteTCB+0x60>
	__asm volatile
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	60fb      	str	r3, [r7, #12]
}
 80043bc:	bf00      	nop
 80043be:	e7fe      	b.n	80043be <prvDeleteTCB+0x5e>
	}
 80043c0:	bf00      	nop
 80043c2:	3710      	adds	r7, #16
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043c8:	b480      	push	{r7}
 80043ca:	b083      	sub	sp, #12
 80043cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043ce:	4b0e      	ldr	r3, [pc, #56]	; (8004408 <prvResetNextTaskUnblockTime+0x40>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d101      	bne.n	80043dc <prvResetNextTaskUnblockTime+0x14>
 80043d8:	2301      	movs	r3, #1
 80043da:	e000      	b.n	80043de <prvResetNextTaskUnblockTime+0x16>
 80043dc:	2300      	movs	r3, #0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d004      	beq.n	80043ec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80043e2:	4b0a      	ldr	r3, [pc, #40]	; (800440c <prvResetNextTaskUnblockTime+0x44>)
 80043e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80043e8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80043ea:	e008      	b.n	80043fe <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043ec:	4b06      	ldr	r3, [pc, #24]	; (8004408 <prvResetNextTaskUnblockTime+0x40>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	68db      	ldr	r3, [r3, #12]
 80043f4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	4a04      	ldr	r2, [pc, #16]	; (800440c <prvResetNextTaskUnblockTime+0x44>)
 80043fc:	6013      	str	r3, [r2, #0]
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	bc80      	pop	{r7}
 8004406:	4770      	bx	lr
 8004408:	20000ed8 	.word	0x20000ed8
 800440c:	20000f40 	.word	0x20000f40

08004410 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004416:	4b0b      	ldr	r3, [pc, #44]	; (8004444 <xTaskGetSchedulerState+0x34>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d102      	bne.n	8004424 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800441e:	2301      	movs	r3, #1
 8004420:	607b      	str	r3, [r7, #4]
 8004422:	e008      	b.n	8004436 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004424:	4b08      	ldr	r3, [pc, #32]	; (8004448 <xTaskGetSchedulerState+0x38>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d102      	bne.n	8004432 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800442c:	2302      	movs	r3, #2
 800442e:	607b      	str	r3, [r7, #4]
 8004430:	e001      	b.n	8004436 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004432:	2300      	movs	r3, #0
 8004434:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004436:	687b      	ldr	r3, [r7, #4]
	}
 8004438:	4618      	mov	r0, r3
 800443a:	370c      	adds	r7, #12
 800443c:	46bd      	mov	sp, r7
 800443e:	bc80      	pop	{r7}
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	20000f2c 	.word	0x20000f2c
 8004448:	20000f48 	.word	0x20000f48

0800444c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004458:	2300      	movs	r3, #0
 800445a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d056      	beq.n	8004510 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <xTaskPriorityDisinherit+0xd0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	429a      	cmp	r2, r3
 800446a:	d00a      	beq.n	8004482 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800446c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004470:	f383 8811 	msr	BASEPRI, r3
 8004474:	f3bf 8f6f 	isb	sy
 8004478:	f3bf 8f4f 	dsb	sy
 800447c:	60fb      	str	r3, [r7, #12]
}
 800447e:	bf00      	nop
 8004480:	e7fe      	b.n	8004480 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10a      	bne.n	80044a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800448a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800448e:	f383 8811 	msr	BASEPRI, r3
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	f3bf 8f4f 	dsb	sy
 800449a:	60bb      	str	r3, [r7, #8]
}
 800449c:	bf00      	nop
 800449e:	e7fe      	b.n	800449e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a4:	1e5a      	subs	r2, r3, #1
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d02c      	beq.n	8004510 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d128      	bne.n	8004510 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4618      	mov	r0, r3
 80044c4:	f7fe fc50 	bl	8002d68 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d0:	693b      	ldr	r3, [r7, #16]
 80044d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e0:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <xTaskPriorityDisinherit+0xd4>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d903      	bls.n	80044f0 <xTaskPriorityDisinherit+0xa4>
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ec:	4a0c      	ldr	r2, [pc, #48]	; (8004520 <xTaskPriorityDisinherit+0xd4>)
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044f4:	4613      	mov	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	009b      	lsls	r3, r3, #2
 80044fc:	4a09      	ldr	r2, [pc, #36]	; (8004524 <xTaskPriorityDisinherit+0xd8>)
 80044fe:	441a      	add	r2, r3
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	3304      	adds	r3, #4
 8004504:	4619      	mov	r1, r3
 8004506:	4610      	mov	r0, r2
 8004508:	f7fe fbd3 	bl	8002cb2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800450c:	2301      	movs	r3, #1
 800450e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004510:	697b      	ldr	r3, [r7, #20]
	}
 8004512:	4618      	mov	r0, r3
 8004514:	3718      	adds	r7, #24
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000a4c 	.word	0x20000a4c
 8004520:	20000f28 	.word	0x20000f28
 8004524:	20000a50 	.word	0x20000a50

08004528 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004538:	4b20      	ldr	r3, [pc, #128]	; (80045bc <prvAddCurrentTaskToDelayedList+0x94>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3304      	adds	r3, #4
 800453e:	4618      	mov	r0, r3
 8004540:	f7fe fc12 	bl	8002d68 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800454a:	d10a      	bne.n	8004562 <prvAddCurrentTaskToDelayedList+0x3a>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004552:	4b1a      	ldr	r3, [pc, #104]	; (80045bc <prvAddCurrentTaskToDelayedList+0x94>)
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3304      	adds	r3, #4
 8004558:	4619      	mov	r1, r3
 800455a:	4819      	ldr	r0, [pc, #100]	; (80045c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800455c:	f7fe fba9 	bl	8002cb2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004560:	e026      	b.n	80045b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800456a:	4b14      	ldr	r3, [pc, #80]	; (80045bc <prvAddCurrentTaskToDelayedList+0x94>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68ba      	ldr	r2, [r7, #8]
 8004570:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	429a      	cmp	r2, r3
 8004578:	d209      	bcs.n	800458e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800457a:	4b12      	ldr	r3, [pc, #72]	; (80045c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <prvAddCurrentTaskToDelayedList+0x94>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3304      	adds	r3, #4
 8004584:	4619      	mov	r1, r3
 8004586:	4610      	mov	r0, r2
 8004588:	f7fe fbb6 	bl	8002cf8 <vListInsert>
}
 800458c:	e010      	b.n	80045b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800458e:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <prvAddCurrentTaskToDelayedList+0x94>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f7fe fbac 	bl	8002cf8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80045a0:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d202      	bcs.n	80045b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80045aa:	4a08      	ldr	r2, [pc, #32]	; (80045cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	6013      	str	r3, [r2, #0]
}
 80045b0:	bf00      	nop
 80045b2:	3710      	adds	r7, #16
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	20000f24 	.word	0x20000f24
 80045bc:	20000a4c 	.word	0x20000a4c
 80045c0:	20000f0c 	.word	0x20000f0c
 80045c4:	20000edc 	.word	0x20000edc
 80045c8:	20000ed8 	.word	0x20000ed8
 80045cc:	20000f40 	.word	0x20000f40

080045d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b08a      	sub	sp, #40	; 0x28
 80045d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80045da:	f000 facb 	bl	8004b74 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80045de:	4b1c      	ldr	r3, [pc, #112]	; (8004650 <xTimerCreateTimerTask+0x80>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d021      	beq.n	800462a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80045ee:	1d3a      	adds	r2, r7, #4
 80045f0:	f107 0108 	add.w	r1, r7, #8
 80045f4:	f107 030c 	add.w	r3, r7, #12
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe fb15 	bl	8002c28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	68fa      	ldr	r2, [r7, #12]
 8004604:	9202      	str	r2, [sp, #8]
 8004606:	9301      	str	r3, [sp, #4]
 8004608:	2302      	movs	r3, #2
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2300      	movs	r3, #0
 800460e:	460a      	mov	r2, r1
 8004610:	4910      	ldr	r1, [pc, #64]	; (8004654 <xTimerCreateTimerTask+0x84>)
 8004612:	4811      	ldr	r0, [pc, #68]	; (8004658 <xTimerCreateTimerTask+0x88>)
 8004614:	f7ff f8b6 	bl	8003784 <xTaskCreateStatic>
 8004618:	4603      	mov	r3, r0
 800461a:	4a10      	ldr	r2, [pc, #64]	; (800465c <xTimerCreateTimerTask+0x8c>)
 800461c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800461e:	4b0f      	ldr	r3, [pc, #60]	; (800465c <xTimerCreateTimerTask+0x8c>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d001      	beq.n	800462a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004626:	2301      	movs	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10a      	bne.n	8004646 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	613b      	str	r3, [r7, #16]
}
 8004642:	bf00      	nop
 8004644:	e7fe      	b.n	8004644 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004646:	697b      	ldr	r3, [r7, #20]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	20000f7c 	.word	0x20000f7c
 8004654:	08005584 	.word	0x08005584
 8004658:	0800477d 	.word	0x0800477d
 800465c:	20000f80 	.word	0x20000f80

08004660 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b08a      	sub	sp, #40	; 0x28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
 800466c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10a      	bne.n	800468e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	623b      	str	r3, [r7, #32]
}
 800468a:	bf00      	nop
 800468c:	e7fe      	b.n	800468c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800468e:	4b1a      	ldr	r3, [pc, #104]	; (80046f8 <xTimerGenericCommand+0x98>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d02a      	beq.n	80046ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b05      	cmp	r3, #5
 80046a6:	dc18      	bgt.n	80046da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80046a8:	f7ff feb2 	bl	8004410 <xTaskGetSchedulerState>
 80046ac:	4603      	mov	r3, r0
 80046ae:	2b02      	cmp	r3, #2
 80046b0:	d109      	bne.n	80046c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80046b2:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <xTimerGenericCommand+0x98>)
 80046b4:	6818      	ldr	r0, [r3, #0]
 80046b6:	f107 0110 	add.w	r1, r7, #16
 80046ba:	2300      	movs	r3, #0
 80046bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046be:	f7fe fc7f 	bl	8002fc0 <xQueueGenericSend>
 80046c2:	6278      	str	r0, [r7, #36]	; 0x24
 80046c4:	e012      	b.n	80046ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80046c6:	4b0c      	ldr	r3, [pc, #48]	; (80046f8 <xTimerGenericCommand+0x98>)
 80046c8:	6818      	ldr	r0, [r3, #0]
 80046ca:	f107 0110 	add.w	r1, r7, #16
 80046ce:	2300      	movs	r3, #0
 80046d0:	2200      	movs	r2, #0
 80046d2:	f7fe fc75 	bl	8002fc0 <xQueueGenericSend>
 80046d6:	6278      	str	r0, [r7, #36]	; 0x24
 80046d8:	e008      	b.n	80046ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <xTimerGenericCommand+0x98>)
 80046dc:	6818      	ldr	r0, [r3, #0]
 80046de:	f107 0110 	add.w	r1, r7, #16
 80046e2:	2300      	movs	r3, #0
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	f7fe fd69 	bl	80031bc <xQueueGenericSendFromISR>
 80046ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3728      	adds	r7, #40	; 0x28
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}
 80046f6:	bf00      	nop
 80046f8:	20000f7c 	.word	0x20000f7c

080046fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af02      	add	r7, sp, #8
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004706:	4b1c      	ldr	r3, [pc, #112]	; (8004778 <prvProcessExpiredTimer+0x7c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	3304      	adds	r3, #4
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe fb27 	bl	8002d68 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	69db      	ldr	r3, [r3, #28]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d122      	bne.n	8004768 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	699a      	ldr	r2, [r3, #24]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	18d1      	adds	r1, r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	6978      	ldr	r0, [r7, #20]
 8004730:	f000 f8c8 	bl	80048c4 <prvInsertTimerInActiveList>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	d016      	beq.n	8004768 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800473a:	2300      	movs	r3, #0
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	2300      	movs	r3, #0
 8004740:	687a      	ldr	r2, [r7, #4]
 8004742:	2100      	movs	r1, #0
 8004744:	6978      	ldr	r0, [r7, #20]
 8004746:	f7ff ff8b 	bl	8004660 <xTimerGenericCommand>
 800474a:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60fb      	str	r3, [r7, #12]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	6978      	ldr	r0, [r7, #20]
 800476e:	4798      	blx	r3
}
 8004770:	bf00      	nop
 8004772:	3718      	adds	r7, #24
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	20000f74 	.word	0x20000f74

0800477c <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004784:	f107 0308 	add.w	r3, r7, #8
 8004788:	4618      	mov	r0, r3
 800478a:	f000 f857 	bl	800483c <prvGetNextExpireTime>
 800478e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	4619      	mov	r1, r3
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 f803 	bl	80047a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800479a:	f000 f8d5 	bl	8004948 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800479e:	e7f1      	b.n	8004784 <prvTimerTask+0x8>

080047a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b084      	sub	sp, #16
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80047aa:	f7ff fa3f 	bl	8003c2c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80047ae:	f107 0308 	add.w	r3, r7, #8
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 f866 	bl	8004884 <prvSampleTimeNow>
 80047b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d130      	bne.n	8004822 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10a      	bne.n	80047dc <prvProcessTimerOrBlockTask+0x3c>
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	429a      	cmp	r2, r3
 80047cc:	d806      	bhi.n	80047dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80047ce:	f7ff fa3b 	bl	8003c48 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80047d2:	68f9      	ldr	r1, [r7, #12]
 80047d4:	6878      	ldr	r0, [r7, #4]
 80047d6:	f7ff ff91 	bl	80046fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80047da:	e024      	b.n	8004826 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d008      	beq.n	80047f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80047e2:	4b13      	ldr	r3, [pc, #76]	; (8004830 <prvProcessTimerOrBlockTask+0x90>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80047f4:	4b0f      	ldr	r3, [pc, #60]	; (8004834 <prvProcessTimerOrBlockTask+0x94>)
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	4619      	mov	r1, r3
 8004802:	f7fe ff8b 	bl	800371c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004806:	f7ff fa1f 	bl	8003c48 <xTaskResumeAll>
 800480a:	4603      	mov	r3, r0
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004810:	4b09      	ldr	r3, [pc, #36]	; (8004838 <prvProcessTimerOrBlockTask+0x98>)
 8004812:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	f3bf 8f6f 	isb	sy
}
 8004820:	e001      	b.n	8004826 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004822:	f7ff fa11 	bl	8003c48 <xTaskResumeAll>
}
 8004826:	bf00      	nop
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000f78 	.word	0x20000f78
 8004834:	20000f7c 	.word	0x20000f7c
 8004838:	e000ed04 	.word	0xe000ed04

0800483c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004844:	4b0e      	ldr	r3, [pc, #56]	; (8004880 <prvGetNextExpireTime+0x44>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	2b00      	cmp	r3, #0
 800484c:	bf0c      	ite	eq
 800484e:	2301      	moveq	r3, #1
 8004850:	2300      	movne	r3, #0
 8004852:	b2db      	uxtb	r3, r3
 8004854:	461a      	mov	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d105      	bne.n	800486e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <prvGetNextExpireTime+0x44>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	e001      	b.n	8004872 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004872:	68fb      	ldr	r3, [r7, #12]
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	bc80      	pop	{r7}
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop
 8004880:	20000f74 	.word	0x20000f74

08004884 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b084      	sub	sp, #16
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800488c:	f7ff fa7a 	bl	8003d84 <xTaskGetTickCount>
 8004890:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004892:	4b0b      	ldr	r3, [pc, #44]	; (80048c0 <prvSampleTimeNow+0x3c>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68fa      	ldr	r2, [r7, #12]
 8004898:	429a      	cmp	r2, r3
 800489a:	d205      	bcs.n	80048a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800489c:	f000 f908 	bl	8004ab0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e002      	b.n	80048ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80048ae:	4a04      	ldr	r2, [pc, #16]	; (80048c0 <prvSampleTimeNow+0x3c>)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80048b4:	68fb      	ldr	r3, [r7, #12]
}
 80048b6:	4618      	mov	r0, r3
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	bf00      	nop
 80048c0:	20000f84 	.word	0x20000f84

080048c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	60f8      	str	r0, [r7, #12]
 80048cc:	60b9      	str	r1, [r7, #8]
 80048ce:	607a      	str	r2, [r7, #4]
 80048d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80048d2:	2300      	movs	r3, #0
 80048d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	68ba      	ldr	r2, [r7, #8]
 80048da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	68fa      	ldr	r2, [r7, #12]
 80048e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d812      	bhi.n	8004910 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ea:	687a      	ldr	r2, [r7, #4]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	1ad2      	subs	r2, r2, r3
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	699b      	ldr	r3, [r3, #24]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d302      	bcc.n	80048fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80048f8:	2301      	movs	r3, #1
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e01b      	b.n	8004936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80048fe:	4b10      	ldr	r3, [pc, #64]	; (8004940 <prvInsertTimerInActiveList+0x7c>)
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3304      	adds	r3, #4
 8004906:	4619      	mov	r1, r3
 8004908:	4610      	mov	r0, r2
 800490a:	f7fe f9f5 	bl	8002cf8 <vListInsert>
 800490e:	e012      	b.n	8004936 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	429a      	cmp	r2, r3
 8004916:	d206      	bcs.n	8004926 <prvInsertTimerInActiveList+0x62>
 8004918:	68ba      	ldr	r2, [r7, #8]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	429a      	cmp	r2, r3
 800491e:	d302      	bcc.n	8004926 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004920:	2301      	movs	r3, #1
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e007      	b.n	8004936 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004926:	4b07      	ldr	r3, [pc, #28]	; (8004944 <prvInsertTimerInActiveList+0x80>)
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3304      	adds	r3, #4
 800492e:	4619      	mov	r1, r3
 8004930:	4610      	mov	r0, r2
 8004932:	f7fe f9e1 	bl	8002cf8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004936:	697b      	ldr	r3, [r7, #20]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3718      	adds	r7, #24
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}
 8004940:	20000f78 	.word	0x20000f78
 8004944:	20000f74 	.word	0x20000f74

08004948 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b08e      	sub	sp, #56	; 0x38
 800494c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800494e:	e09d      	b.n	8004a8c <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	da18      	bge.n	8004988 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004956:	1d3b      	adds	r3, r7, #4
 8004958:	3304      	adds	r3, #4
 800495a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800495c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	61fb      	str	r3, [r7, #28]
}
 8004974:	bf00      	nop
 8004976:	e7fe      	b.n	8004976 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800497e:	6850      	ldr	r0, [r2, #4]
 8004980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004982:	6892      	ldr	r2, [r2, #8]
 8004984:	4611      	mov	r1, r2
 8004986:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2b00      	cmp	r3, #0
 800498c:	db7e      	blt.n	8004a8c <prvProcessReceivedCommands+0x144>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d004      	beq.n	80049a4 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800499a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499c:	3304      	adds	r3, #4
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fe f9e2 	bl	8002d68 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80049a4:	463b      	mov	r3, r7
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7ff ff6c 	bl	8004884 <prvSampleTimeNow>
 80049ac:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b09      	cmp	r3, #9
 80049b2:	d86a      	bhi.n	8004a8a <prvProcessReceivedCommands+0x142>
 80049b4:	a201      	add	r2, pc, #4	; (adr r2, 80049bc <prvProcessReceivedCommands+0x74>)
 80049b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049ba:	bf00      	nop
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049e5 	.word	0x080049e5
 80049c4:	080049e5 	.word	0x080049e5
 80049c8:	08004a8d 	.word	0x08004a8d
 80049cc:	08004a41 	.word	0x08004a41
 80049d0:	08004a79 	.word	0x08004a79
 80049d4:	080049e5 	.word	0x080049e5
 80049d8:	080049e5 	.word	0x080049e5
 80049dc:	08004a8d 	.word	0x08004a8d
 80049e0:	08004a41 	.word	0x08004a41
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e8:	699b      	ldr	r3, [r3, #24]
 80049ea:	18d1      	adds	r1, r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f7ff ff67 	bl	80048c4 <prvInsertTimerInActiveList>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d047      	beq.n	8004a8c <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a02:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	69db      	ldr	r3, [r3, #28]
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d13f      	bne.n	8004a8c <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	441a      	add	r2, r3
 8004a14:	2300      	movs	r3, #0
 8004a16:	9300      	str	r3, [sp, #0]
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2100      	movs	r1, #0
 8004a1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a1e:	f7ff fe1f 	bl	8004660 <xTimerGenericCommand>
 8004a22:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004a24:	6a3b      	ldr	r3, [r7, #32]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d130      	bne.n	8004a8c <prvProcessReceivedCommands+0x144>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	61bb      	str	r3, [r7, #24]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d10a      	bne.n	8004a64 <prvProcessReceivedCommands+0x11c>
	__asm volatile
 8004a4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a52:	f383 8811 	msr	BASEPRI, r3
 8004a56:	f3bf 8f6f 	isb	sy
 8004a5a:	f3bf 8f4f 	dsb	sy
 8004a5e:	617b      	str	r3, [r7, #20]
}
 8004a60:	bf00      	nop
 8004a62:	e7fe      	b.n	8004a62 <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a66:	699a      	ldr	r2, [r3, #24]
 8004a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6a:	18d1      	adds	r1, r2, r3
 8004a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a72:	f7ff ff27 	bl	80048c4 <prvInsertTimerInActiveList>
					break;
 8004a76:	e009      	b.n	8004a8c <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a7a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d104      	bne.n	8004a8c <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 8004a82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a84:	f000 fb6e 	bl	8005164 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a88:	e000      	b.n	8004a8c <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
 8004a8a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a8c:	4b07      	ldr	r3, [pc, #28]	; (8004aac <prvProcessReceivedCommands+0x164>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	1d39      	adds	r1, r7, #4
 8004a92:	2200      	movs	r2, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f7fe fc29 	bl	80032ec <xQueueReceive>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f47f af57 	bne.w	8004950 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	3730      	adds	r7, #48	; 0x30
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	20000f7c 	.word	0x20000f7c

08004ab0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b088      	sub	sp, #32
 8004ab4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004ab6:	e045      	b.n	8004b44 <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ab8:	4b2c      	ldr	r3, [pc, #176]	; (8004b6c <prvSwitchTimerLists+0xbc>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	68db      	ldr	r3, [r3, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004ac2:	4b2a      	ldr	r3, [pc, #168]	; (8004b6c <prvSwitchTimerLists+0xbc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	68db      	ldr	r3, [r3, #12]
 8004aca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7fe f949 	bl	8002d68 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	69db      	ldr	r3, [r3, #28]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d12e      	bne.n	8004b44 <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	693a      	ldr	r2, [r7, #16]
 8004aec:	4413      	add	r3, r2
 8004aee:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	429a      	cmp	r2, r3
 8004af6:	d90e      	bls.n	8004b16 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	68ba      	ldr	r2, [r7, #8]
 8004afc:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004b04:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <prvSwitchTimerLists+0xbc>)
 8004b06:	681a      	ldr	r2, [r3, #0]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3304      	adds	r3, #4
 8004b0c:	4619      	mov	r1, r3
 8004b0e:	4610      	mov	r0, r2
 8004b10:	f7fe f8f2 	bl	8002cf8 <vListInsert>
 8004b14:	e016      	b.n	8004b44 <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004b16:	2300      	movs	r3, #0
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	2100      	movs	r1, #0
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f7ff fd9d 	bl	8004660 <xTimerGenericCommand>
 8004b26:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d10a      	bne.n	8004b44 <prvSwitchTimerLists+0x94>
	__asm volatile
 8004b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b32:	f383 8811 	msr	BASEPRI, r3
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	603b      	str	r3, [r7, #0]
}
 8004b40:	bf00      	nop
 8004b42:	e7fe      	b.n	8004b42 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b44:	4b09      	ldr	r3, [pc, #36]	; (8004b6c <prvSwitchTimerLists+0xbc>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1b4      	bne.n	8004ab8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b4e:	4b07      	ldr	r3, [pc, #28]	; (8004b6c <prvSwitchTimerLists+0xbc>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b54:	4b06      	ldr	r3, [pc, #24]	; (8004b70 <prvSwitchTimerLists+0xc0>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a04      	ldr	r2, [pc, #16]	; (8004b6c <prvSwitchTimerLists+0xbc>)
 8004b5a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b5c:	4a04      	ldr	r2, [pc, #16]	; (8004b70 <prvSwitchTimerLists+0xc0>)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	6013      	str	r3, [r2, #0]
}
 8004b62:	bf00      	nop
 8004b64:	3718      	adds	r7, #24
 8004b66:	46bd      	mov	sp, r7
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20000f74 	.word	0x20000f74
 8004b70:	20000f78 	.word	0x20000f78

08004b74 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b7a:	f000 f92f 	bl	8004ddc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b7e:	4b15      	ldr	r3, [pc, #84]	; (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d120      	bne.n	8004bc8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b86:	4814      	ldr	r0, [pc, #80]	; (8004bd8 <prvCheckForValidListAndQueue+0x64>)
 8004b88:	f7fe f868 	bl	8002c5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b8c:	4813      	ldr	r0, [pc, #76]	; (8004bdc <prvCheckForValidListAndQueue+0x68>)
 8004b8e:	f7fe f865 	bl	8002c5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b92:	4b13      	ldr	r3, [pc, #76]	; (8004be0 <prvCheckForValidListAndQueue+0x6c>)
 8004b94:	4a10      	ldr	r2, [pc, #64]	; (8004bd8 <prvCheckForValidListAndQueue+0x64>)
 8004b96:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <prvCheckForValidListAndQueue+0x70>)
 8004b9a:	4a10      	ldr	r2, [pc, #64]	; (8004bdc <prvCheckForValidListAndQueue+0x68>)
 8004b9c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	4b11      	ldr	r3, [pc, #68]	; (8004be8 <prvCheckForValidListAndQueue+0x74>)
 8004ba4:	4a11      	ldr	r2, [pc, #68]	; (8004bec <prvCheckForValidListAndQueue+0x78>)
 8004ba6:	2110      	movs	r1, #16
 8004ba8:	200a      	movs	r0, #10
 8004baa:	f7fe f96f 	bl	8002e8c <xQueueGenericCreateStatic>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004bb2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004bb4:	4b07      	ldr	r3, [pc, #28]	; (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d005      	beq.n	8004bc8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004bbc:	4b05      	ldr	r3, [pc, #20]	; (8004bd4 <prvCheckForValidListAndQueue+0x60>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	490b      	ldr	r1, [pc, #44]	; (8004bf0 <prvCheckForValidListAndQueue+0x7c>)
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe fd82 	bl	80036cc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004bc8:	f000 f938 	bl	8004e3c <vPortExitCritical>
}
 8004bcc:	bf00      	nop
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	bd80      	pop	{r7, pc}
 8004bd2:	bf00      	nop
 8004bd4:	20000f7c 	.word	0x20000f7c
 8004bd8:	20000f4c 	.word	0x20000f4c
 8004bdc:	20000f60 	.word	0x20000f60
 8004be0:	20000f74 	.word	0x20000f74
 8004be4:	20000f78 	.word	0x20000f78
 8004be8:	20001028 	.word	0x20001028
 8004bec:	20000f88 	.word	0x20000f88
 8004bf0:	0800558c 	.word	0x0800558c

08004bf4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	3b04      	subs	r3, #4
 8004c04:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004c0c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b04      	subs	r3, #4
 8004c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f023 0201 	bic.w	r2, r3, #1
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	3b04      	subs	r3, #4
 8004c22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004c24:	4a08      	ldr	r2, [pc, #32]	; (8004c48 <pxPortInitialiseStack+0x54>)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	3b14      	subs	r3, #20
 8004c2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3b20      	subs	r3, #32
 8004c3a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
}
 8004c3e:	4618      	mov	r0, r3
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	bc80      	pop	{r7}
 8004c46:	4770      	bx	lr
 8004c48:	08004c4d 	.word	0x08004c4d

08004c4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004c52:	2300      	movs	r3, #0
 8004c54:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c56:	4b12      	ldr	r3, [pc, #72]	; (8004ca0 <prvTaskExitError+0x54>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c5e:	d00a      	beq.n	8004c76 <prvTaskExitError+0x2a>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <prvTaskExitError+0x28>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	60bb      	str	r3, [r7, #8]
}
 8004c88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c8a:	bf00      	nop
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0fc      	beq.n	8004c8c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c92:	bf00      	nop
 8004c94:	bf00      	nop
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bc80      	pop	{r7}
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	2000000c 	.word	0x2000000c
	...

08004cb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004cb0:	4b07      	ldr	r3, [pc, #28]	; (8004cd0 <pxCurrentTCBConst2>)
 8004cb2:	6819      	ldr	r1, [r3, #0]
 8004cb4:	6808      	ldr	r0, [r1, #0]
 8004cb6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004cba:	f380 8809 	msr	PSP, r0
 8004cbe:	f3bf 8f6f 	isb	sy
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8811 	msr	BASEPRI, r0
 8004cca:	f04e 0e0d 	orr.w	lr, lr, #13
 8004cce:	4770      	bx	lr

08004cd0 <pxCurrentTCBConst2>:
 8004cd0:	20000a4c 	.word	0x20000a4c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cd4:	bf00      	nop
 8004cd6:	bf00      	nop

08004cd8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004cd8:	4806      	ldr	r0, [pc, #24]	; (8004cf4 <prvPortStartFirstTask+0x1c>)
 8004cda:	6800      	ldr	r0, [r0, #0]
 8004cdc:	6800      	ldr	r0, [r0, #0]
 8004cde:	f380 8808 	msr	MSP, r0
 8004ce2:	b662      	cpsie	i
 8004ce4:	b661      	cpsie	f
 8004ce6:	f3bf 8f4f 	dsb	sy
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	df00      	svc	0
 8004cf0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cf2:	bf00      	nop
 8004cf4:	e000ed08 	.word	0xe000ed08

08004cf8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b084      	sub	sp, #16
 8004cfc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004cfe:	4b32      	ldr	r3, [pc, #200]	; (8004dc8 <xPortStartScheduler+0xd0>)
 8004d00:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	22ff      	movs	r2, #255	; 0xff
 8004d0e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	781b      	ldrb	r3, [r3, #0]
 8004d14:	b2db      	uxtb	r3, r3
 8004d16:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d18:	78fb      	ldrb	r3, [r7, #3]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d20:	b2da      	uxtb	r2, r3
 8004d22:	4b2a      	ldr	r3, [pc, #168]	; (8004dcc <xPortStartScheduler+0xd4>)
 8004d24:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d26:	4b2a      	ldr	r3, [pc, #168]	; (8004dd0 <xPortStartScheduler+0xd8>)
 8004d28:	2207      	movs	r2, #7
 8004d2a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d2c:	e009      	b.n	8004d42 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004d2e:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <xPortStartScheduler+0xd8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3b01      	subs	r3, #1
 8004d34:	4a26      	ldr	r2, [pc, #152]	; (8004dd0 <xPortStartScheduler+0xd8>)
 8004d36:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d38:	78fb      	ldrb	r3, [r7, #3]
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	005b      	lsls	r3, r3, #1
 8004d3e:	b2db      	uxtb	r3, r3
 8004d40:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	b2db      	uxtb	r3, r3
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	d0ef      	beq.n	8004d2e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d4e:	4b20      	ldr	r3, [pc, #128]	; (8004dd0 <xPortStartScheduler+0xd8>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f1c3 0307 	rsb	r3, r3, #7
 8004d56:	2b04      	cmp	r3, #4
 8004d58:	d00a      	beq.n	8004d70 <xPortStartScheduler+0x78>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	60bb      	str	r3, [r7, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	e7fe      	b.n	8004d6e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d70:	4b17      	ldr	r3, [pc, #92]	; (8004dd0 <xPortStartScheduler+0xd8>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	021b      	lsls	r3, r3, #8
 8004d76:	4a16      	ldr	r2, [pc, #88]	; (8004dd0 <xPortStartScheduler+0xd8>)
 8004d78:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d7a:	4b15      	ldr	r3, [pc, #84]	; (8004dd0 <xPortStartScheduler+0xd8>)
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004d82:	4a13      	ldr	r2, [pc, #76]	; (8004dd0 <xPortStartScheduler+0xd8>)
 8004d84:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	b2da      	uxtb	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d8e:	4b11      	ldr	r3, [pc, #68]	; (8004dd4 <xPortStartScheduler+0xdc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a10      	ldr	r2, [pc, #64]	; (8004dd4 <xPortStartScheduler+0xdc>)
 8004d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d98:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <xPortStartScheduler+0xdc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a0d      	ldr	r2, [pc, #52]	; (8004dd4 <xPortStartScheduler+0xdc>)
 8004da0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004da4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004da6:	f000 f8b9 	bl	8004f1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004daa:	4b0b      	ldr	r3, [pc, #44]	; (8004dd8 <xPortStartScheduler+0xe0>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004db0:	f7ff ff92 	bl	8004cd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004db4:	f7ff f8b2 	bl	8003f1c <vTaskSwitchContext>
	prvTaskExitError();
 8004db8:	f7ff ff48 	bl	8004c4c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3710      	adds	r7, #16
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	e000e400 	.word	0xe000e400
 8004dcc:	20001078 	.word	0x20001078
 8004dd0:	2000107c 	.word	0x2000107c
 8004dd4:	e000ed20 	.word	0xe000ed20
 8004dd8:	2000000c 	.word	0x2000000c

08004ddc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
	__asm volatile
 8004de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de6:	f383 8811 	msr	BASEPRI, r3
 8004dea:	f3bf 8f6f 	isb	sy
 8004dee:	f3bf 8f4f 	dsb	sy
 8004df2:	607b      	str	r3, [r7, #4]
}
 8004df4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004df6:	4b0f      	ldr	r3, [pc, #60]	; (8004e34 <vPortEnterCritical+0x58>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	4a0d      	ldr	r2, [pc, #52]	; (8004e34 <vPortEnterCritical+0x58>)
 8004dfe:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e00:	4b0c      	ldr	r3, [pc, #48]	; (8004e34 <vPortEnterCritical+0x58>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d10f      	bne.n	8004e28 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e08:	4b0b      	ldr	r3, [pc, #44]	; (8004e38 <vPortEnterCritical+0x5c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d00a      	beq.n	8004e28 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e16:	f383 8811 	msr	BASEPRI, r3
 8004e1a:	f3bf 8f6f 	isb	sy
 8004e1e:	f3bf 8f4f 	dsb	sy
 8004e22:	603b      	str	r3, [r7, #0]
}
 8004e24:	bf00      	nop
 8004e26:	e7fe      	b.n	8004e26 <vPortEnterCritical+0x4a>
	}
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	2000000c 	.word	0x2000000c
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e3c:	b480      	push	{r7}
 8004e3e:	b083      	sub	sp, #12
 8004e40:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e42:	4b11      	ldr	r3, [pc, #68]	; (8004e88 <vPortExitCritical+0x4c>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d10a      	bne.n	8004e60 <vPortExitCritical+0x24>
	__asm volatile
 8004e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4e:	f383 8811 	msr	BASEPRI, r3
 8004e52:	f3bf 8f6f 	isb	sy
 8004e56:	f3bf 8f4f 	dsb	sy
 8004e5a:	607b      	str	r3, [r7, #4]
}
 8004e5c:	bf00      	nop
 8004e5e:	e7fe      	b.n	8004e5e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e60:	4b09      	ldr	r3, [pc, #36]	; (8004e88 <vPortExitCritical+0x4c>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	4a08      	ldr	r2, [pc, #32]	; (8004e88 <vPortExitCritical+0x4c>)
 8004e68:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e6a:	4b07      	ldr	r3, [pc, #28]	; (8004e88 <vPortExitCritical+0x4c>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d105      	bne.n	8004e7e <vPortExitCritical+0x42>
 8004e72:	2300      	movs	r3, #0
 8004e74:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	f383 8811 	msr	BASEPRI, r3
}
 8004e7c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e7e:	bf00      	nop
 8004e80:	370c      	adds	r7, #12
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bc80      	pop	{r7}
 8004e86:	4770      	bx	lr
 8004e88:	2000000c 	.word	0x2000000c
 8004e8c:	00000000 	.word	0x00000000

08004e90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e90:	f3ef 8009 	mrs	r0, PSP
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	4b0d      	ldr	r3, [pc, #52]	; (8004ed0 <pxCurrentTCBConst>)
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ea0:	6010      	str	r0, [r2, #0]
 8004ea2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004ea6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004eaa:	f380 8811 	msr	BASEPRI, r0
 8004eae:	f7ff f835 	bl	8003f1c <vTaskSwitchContext>
 8004eb2:	f04f 0000 	mov.w	r0, #0
 8004eb6:	f380 8811 	msr	BASEPRI, r0
 8004eba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004ebe:	6819      	ldr	r1, [r3, #0]
 8004ec0:	6808      	ldr	r0, [r1, #0]
 8004ec2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004ec6:	f380 8809 	msr	PSP, r0
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	4770      	bx	lr

08004ed0 <pxCurrentTCBConst>:
 8004ed0:	20000a4c 	.word	0x20000a4c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ed4:	bf00      	nop
 8004ed6:	bf00      	nop

08004ed8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	607b      	str	r3, [r7, #4]
}
 8004ef0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ef2:	f7fe ff55 	bl	8003da0 <xTaskIncrementTick>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d003      	beq.n	8004f04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004efc:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <xPortSysTickHandler+0x40>)
 8004efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f02:	601a      	str	r2, [r3, #0]
 8004f04:	2300      	movs	r3, #0
 8004f06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	f383 8811 	msr	BASEPRI, r3
}
 8004f0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f10:	bf00      	nop
 8004f12:	3708      	adds	r7, #8
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f20:	4b0a      	ldr	r3, [pc, #40]	; (8004f4c <vPortSetupTimerInterrupt+0x30>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <vPortSetupTimerInterrupt+0x34>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f2c:	4b09      	ldr	r3, [pc, #36]	; (8004f54 <vPortSetupTimerInterrupt+0x38>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a09      	ldr	r2, [pc, #36]	; (8004f58 <vPortSetupTimerInterrupt+0x3c>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	4a08      	ldr	r2, [pc, #32]	; (8004f5c <vPortSetupTimerInterrupt+0x40>)
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f3e:	4b03      	ldr	r3, [pc, #12]	; (8004f4c <vPortSetupTimerInterrupt+0x30>)
 8004f40:	2207      	movs	r2, #7
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr
 8004f4c:	e000e010 	.word	0xe000e010
 8004f50:	e000e018 	.word	0xe000e018
 8004f54:	20000000 	.word	0x20000000
 8004f58:	10624dd3 	.word	0x10624dd3
 8004f5c:	e000e014 	.word	0xe000e014

08004f60 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f60:	b480      	push	{r7}
 8004f62:	b085      	sub	sp, #20
 8004f64:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f66:	f3ef 8305 	mrs	r3, IPSR
 8004f6a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2b0f      	cmp	r3, #15
 8004f70:	d914      	bls.n	8004f9c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f72:	4a16      	ldr	r2, [pc, #88]	; (8004fcc <vPortValidateInterruptPriority+0x6c>)
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f7c:	4b14      	ldr	r3, [pc, #80]	; (8004fd0 <vPortValidateInterruptPriority+0x70>)
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	7afa      	ldrb	r2, [r7, #11]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d20a      	bcs.n	8004f9c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	607b      	str	r3, [r7, #4]
}
 8004f98:	bf00      	nop
 8004f9a:	e7fe      	b.n	8004f9a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f9c:	4b0d      	ldr	r3, [pc, #52]	; (8004fd4 <vPortValidateInterruptPriority+0x74>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <vPortValidateInterruptPriority+0x78>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d90a      	bls.n	8004fc2 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004fac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb0:	f383 8811 	msr	BASEPRI, r3
 8004fb4:	f3bf 8f6f 	isb	sy
 8004fb8:	f3bf 8f4f 	dsb	sy
 8004fbc:	603b      	str	r3, [r7, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	e7fe      	b.n	8004fc0 <vPortValidateInterruptPriority+0x60>
	}
 8004fc2:	bf00      	nop
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	bc80      	pop	{r7}
 8004fca:	4770      	bx	lr
 8004fcc:	e000e3f0 	.word	0xe000e3f0
 8004fd0:	20001078 	.word	0x20001078
 8004fd4:	e000ed0c 	.word	0xe000ed0c
 8004fd8:	2000107c 	.word	0x2000107c

08004fdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08a      	sub	sp, #40	; 0x28
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fe8:	f7fe fe20 	bl	8003c2c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fec:	4b58      	ldr	r3, [pc, #352]	; (8005150 <pvPortMalloc+0x174>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004ff4:	f000 f910 	bl	8005218 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ff8:	4b56      	ldr	r3, [pc, #344]	; (8005154 <pvPortMalloc+0x178>)
 8004ffa:	681a      	ldr	r2, [r3, #0]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4013      	ands	r3, r2
 8005000:	2b00      	cmp	r3, #0
 8005002:	f040 808e 	bne.w	8005122 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d01d      	beq.n	8005048 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800500c:	2208      	movs	r2, #8
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	2b00      	cmp	r3, #0
 800501c:	d014      	beq.n	8005048 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f023 0307 	bic.w	r3, r3, #7
 8005024:	3308      	adds	r3, #8
 8005026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f003 0307 	and.w	r3, r3, #7
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00a      	beq.n	8005048 <pvPortMalloc+0x6c>
	__asm volatile
 8005032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	617b      	str	r3, [r7, #20]
}
 8005044:	bf00      	nop
 8005046:	e7fe      	b.n	8005046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d069      	beq.n	8005122 <pvPortMalloc+0x146>
 800504e:	4b42      	ldr	r3, [pc, #264]	; (8005158 <pvPortMalloc+0x17c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	687a      	ldr	r2, [r7, #4]
 8005054:	429a      	cmp	r2, r3
 8005056:	d864      	bhi.n	8005122 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005058:	4b40      	ldr	r3, [pc, #256]	; (800515c <pvPortMalloc+0x180>)
 800505a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800505c:	4b3f      	ldr	r3, [pc, #252]	; (800515c <pvPortMalloc+0x180>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005062:	e004      	b.n	800506e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d903      	bls.n	8005080 <pvPortMalloc+0xa4>
 8005078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1f1      	bne.n	8005064 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005080:	4b33      	ldr	r3, [pc, #204]	; (8005150 <pvPortMalloc+0x174>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005086:	429a      	cmp	r2, r3
 8005088:	d04b      	beq.n	8005122 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800508a:	6a3b      	ldr	r3, [r7, #32]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2208      	movs	r2, #8
 8005090:	4413      	add	r3, r2
 8005092:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800509c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	1ad2      	subs	r2, r2, r3
 80050a4:	2308      	movs	r3, #8
 80050a6:	005b      	lsls	r3, r3, #1
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d91f      	bls.n	80050ec <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4413      	add	r3, r2
 80050b2:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <pvPortMalloc+0xf8>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	613b      	str	r3, [r7, #16]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d6:	685a      	ldr	r2, [r3, #4]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	1ad2      	subs	r2, r2, r3
 80050dc:	69bb      	ldr	r3, [r7, #24]
 80050de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050e6:	69b8      	ldr	r0, [r7, #24]
 80050e8:	f000 f8f8 	bl	80052dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050ec:	4b1a      	ldr	r3, [pc, #104]	; (8005158 <pvPortMalloc+0x17c>)
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	4a18      	ldr	r2, [pc, #96]	; (8005158 <pvPortMalloc+0x17c>)
 80050f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050fa:	4b17      	ldr	r3, [pc, #92]	; (8005158 <pvPortMalloc+0x17c>)
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	4b18      	ldr	r3, [pc, #96]	; (8005160 <pvPortMalloc+0x184>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	429a      	cmp	r2, r3
 8005104:	d203      	bcs.n	800510e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005106:	4b14      	ldr	r3, [pc, #80]	; (8005158 <pvPortMalloc+0x17c>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a15      	ldr	r2, [pc, #84]	; (8005160 <pvPortMalloc+0x184>)
 800510c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800510e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	4b10      	ldr	r3, [pc, #64]	; (8005154 <pvPortMalloc+0x178>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	431a      	orrs	r2, r3
 8005118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800511c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511e:	2200      	movs	r2, #0
 8005120:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005122:	f7fe fd91 	bl	8003c48 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f003 0307 	and.w	r3, r3, #7
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <pvPortMalloc+0x16a>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60fb      	str	r3, [r7, #12]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <pvPortMalloc+0x168>
	return pvReturn;
 8005146:	69fb      	ldr	r3, [r7, #28]
}
 8005148:	4618      	mov	r0, r3
 800514a:	3728      	adds	r7, #40	; 0x28
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20001c88 	.word	0x20001c88
 8005154:	20001c94 	.word	0x20001c94
 8005158:	20001c8c 	.word	0x20001c8c
 800515c:	20001c80 	.word	0x20001c80
 8005160:	20001c90 	.word	0x20001c90

08005164 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d048      	beq.n	8005208 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005176:	2308      	movs	r3, #8
 8005178:	425b      	negs	r3, r3
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	4413      	add	r3, r2
 800517e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	685a      	ldr	r2, [r3, #4]
 8005188:	4b21      	ldr	r3, [pc, #132]	; (8005210 <vPortFree+0xac>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4013      	ands	r3, r2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d10a      	bne.n	80051a8 <vPortFree+0x44>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	60fb      	str	r3, [r7, #12]
}
 80051a4:	bf00      	nop
 80051a6:	e7fe      	b.n	80051a6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <vPortFree+0x62>
	__asm volatile
 80051b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051b4:	f383 8811 	msr	BASEPRI, r3
 80051b8:	f3bf 8f6f 	isb	sy
 80051bc:	f3bf 8f4f 	dsb	sy
 80051c0:	60bb      	str	r3, [r7, #8]
}
 80051c2:	bf00      	nop
 80051c4:	e7fe      	b.n	80051c4 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	4b11      	ldr	r3, [pc, #68]	; (8005210 <vPortFree+0xac>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4013      	ands	r3, r2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d019      	beq.n	8005208 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d115      	bne.n	8005208 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051dc:	693b      	ldr	r3, [r7, #16]
 80051de:	685a      	ldr	r2, [r3, #4]
 80051e0:	4b0b      	ldr	r3, [pc, #44]	; (8005210 <vPortFree+0xac>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	43db      	mvns	r3, r3
 80051e6:	401a      	ands	r2, r3
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051ec:	f7fe fd1e 	bl	8003c2c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051f0:	693b      	ldr	r3, [r7, #16]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	4b07      	ldr	r3, [pc, #28]	; (8005214 <vPortFree+0xb0>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4413      	add	r3, r2
 80051fa:	4a06      	ldr	r2, [pc, #24]	; (8005214 <vPortFree+0xb0>)
 80051fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051fe:	6938      	ldr	r0, [r7, #16]
 8005200:	f000 f86c 	bl	80052dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005204:	f7fe fd20 	bl	8003c48 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005208:	bf00      	nop
 800520a:	3718      	adds	r7, #24
 800520c:	46bd      	mov	sp, r7
 800520e:	bd80      	pop	{r7, pc}
 8005210:	20001c94 	.word	0x20001c94
 8005214:	20001c8c 	.word	0x20001c8c

08005218 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005218:	b480      	push	{r7}
 800521a:	b085      	sub	sp, #20
 800521c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800521e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005222:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005224:	4b27      	ldr	r3, [pc, #156]	; (80052c4 <prvHeapInit+0xac>)
 8005226:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00c      	beq.n	800524c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3307      	adds	r3, #7
 8005236:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f023 0307 	bic.w	r3, r3, #7
 800523e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005240:	68ba      	ldr	r2, [r7, #8]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	4a1f      	ldr	r2, [pc, #124]	; (80052c4 <prvHeapInit+0xac>)
 8005248:	4413      	add	r3, r2
 800524a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005250:	4a1d      	ldr	r2, [pc, #116]	; (80052c8 <prvHeapInit+0xb0>)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005256:	4b1c      	ldr	r3, [pc, #112]	; (80052c8 <prvHeapInit+0xb0>)
 8005258:	2200      	movs	r2, #0
 800525a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	68ba      	ldr	r2, [r7, #8]
 8005260:	4413      	add	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005264:	2208      	movs	r2, #8
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	1a9b      	subs	r3, r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0307 	bic.w	r3, r3, #7
 8005272:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4a15      	ldr	r2, [pc, #84]	; (80052cc <prvHeapInit+0xb4>)
 8005278:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800527a:	4b14      	ldr	r3, [pc, #80]	; (80052cc <prvHeapInit+0xb4>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	2200      	movs	r2, #0
 8005280:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005282:	4b12      	ldr	r3, [pc, #72]	; (80052cc <prvHeapInit+0xb4>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	68fa      	ldr	r2, [r7, #12]
 8005292:	1ad2      	subs	r2, r2, r3
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005298:	4b0c      	ldr	r3, [pc, #48]	; (80052cc <prvHeapInit+0xb4>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	4a0a      	ldr	r2, [pc, #40]	; (80052d0 <prvHeapInit+0xb8>)
 80052a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	685b      	ldr	r3, [r3, #4]
 80052ac:	4a09      	ldr	r2, [pc, #36]	; (80052d4 <prvHeapInit+0xbc>)
 80052ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052b0:	4b09      	ldr	r3, [pc, #36]	; (80052d8 <prvHeapInit+0xc0>)
 80052b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052b6:	601a      	str	r2, [r3, #0]
}
 80052b8:	bf00      	nop
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	bc80      	pop	{r7}
 80052c0:	4770      	bx	lr
 80052c2:	bf00      	nop
 80052c4:	20001080 	.word	0x20001080
 80052c8:	20001c80 	.word	0x20001c80
 80052cc:	20001c88 	.word	0x20001c88
 80052d0:	20001c90 	.word	0x20001c90
 80052d4:	20001c8c 	.word	0x20001c8c
 80052d8:	20001c94 	.word	0x20001c94

080052dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052dc:	b480      	push	{r7}
 80052de:	b085      	sub	sp, #20
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052e4:	4b27      	ldr	r3, [pc, #156]	; (8005384 <prvInsertBlockIntoFreeList+0xa8>)
 80052e6:	60fb      	str	r3, [r7, #12]
 80052e8:	e002      	b.n	80052f0 <prvInsertBlockIntoFreeList+0x14>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d8f7      	bhi.n	80052ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	4413      	add	r3, r2
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	429a      	cmp	r2, r3
 800530a:	d108      	bne.n	800531e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	685a      	ldr	r2, [r3, #4]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	441a      	add	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	441a      	add	r2, r3
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	429a      	cmp	r2, r3
 8005330:	d118      	bne.n	8005364 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	4b14      	ldr	r3, [pc, #80]	; (8005388 <prvInsertBlockIntoFreeList+0xac>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	429a      	cmp	r2, r3
 800533c:	d00d      	beq.n	800535a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685a      	ldr	r2, [r3, #4]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	441a      	add	r2, r3
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	601a      	str	r2, [r3, #0]
 8005358:	e008      	b.n	800536c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800535a:	4b0b      	ldr	r3, [pc, #44]	; (8005388 <prvInsertBlockIntoFreeList+0xac>)
 800535c:	681a      	ldr	r2, [r3, #0]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e003      	b.n	800536c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	429a      	cmp	r2, r3
 8005372:	d002      	beq.n	800537a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr
 8005384:	20001c80 	.word	0x20001c80
 8005388:	20001c88 	.word	0x20001c88

0800538c <memset>:
 800538c:	4603      	mov	r3, r0
 800538e:	4402      	add	r2, r0
 8005390:	4293      	cmp	r3, r2
 8005392:	d100      	bne.n	8005396 <memset+0xa>
 8005394:	4770      	bx	lr
 8005396:	f803 1b01 	strb.w	r1, [r3], #1
 800539a:	e7f9      	b.n	8005390 <memset+0x4>

0800539c <_reclaim_reent>:
 800539c:	4b29      	ldr	r3, [pc, #164]	; (8005444 <_reclaim_reent+0xa8>)
 800539e:	b570      	push	{r4, r5, r6, lr}
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4604      	mov	r4, r0
 80053a4:	4283      	cmp	r3, r0
 80053a6:	d04b      	beq.n	8005440 <_reclaim_reent+0xa4>
 80053a8:	69c3      	ldr	r3, [r0, #28]
 80053aa:	b143      	cbz	r3, 80053be <_reclaim_reent+0x22>
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d144      	bne.n	800543c <_reclaim_reent+0xa0>
 80053b2:	69e3      	ldr	r3, [r4, #28]
 80053b4:	6819      	ldr	r1, [r3, #0]
 80053b6:	b111      	cbz	r1, 80053be <_reclaim_reent+0x22>
 80053b8:	4620      	mov	r0, r4
 80053ba:	f000 f879 	bl	80054b0 <_free_r>
 80053be:	6961      	ldr	r1, [r4, #20]
 80053c0:	b111      	cbz	r1, 80053c8 <_reclaim_reent+0x2c>
 80053c2:	4620      	mov	r0, r4
 80053c4:	f000 f874 	bl	80054b0 <_free_r>
 80053c8:	69e1      	ldr	r1, [r4, #28]
 80053ca:	b111      	cbz	r1, 80053d2 <_reclaim_reent+0x36>
 80053cc:	4620      	mov	r0, r4
 80053ce:	f000 f86f 	bl	80054b0 <_free_r>
 80053d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80053d4:	b111      	cbz	r1, 80053dc <_reclaim_reent+0x40>
 80053d6:	4620      	mov	r0, r4
 80053d8:	f000 f86a 	bl	80054b0 <_free_r>
 80053dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80053de:	b111      	cbz	r1, 80053e6 <_reclaim_reent+0x4a>
 80053e0:	4620      	mov	r0, r4
 80053e2:	f000 f865 	bl	80054b0 <_free_r>
 80053e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80053e8:	b111      	cbz	r1, 80053f0 <_reclaim_reent+0x54>
 80053ea:	4620      	mov	r0, r4
 80053ec:	f000 f860 	bl	80054b0 <_free_r>
 80053f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80053f2:	b111      	cbz	r1, 80053fa <_reclaim_reent+0x5e>
 80053f4:	4620      	mov	r0, r4
 80053f6:	f000 f85b 	bl	80054b0 <_free_r>
 80053fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80053fc:	b111      	cbz	r1, 8005404 <_reclaim_reent+0x68>
 80053fe:	4620      	mov	r0, r4
 8005400:	f000 f856 	bl	80054b0 <_free_r>
 8005404:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8005406:	b111      	cbz	r1, 800540e <_reclaim_reent+0x72>
 8005408:	4620      	mov	r0, r4
 800540a:	f000 f851 	bl	80054b0 <_free_r>
 800540e:	6a23      	ldr	r3, [r4, #32]
 8005410:	b1b3      	cbz	r3, 8005440 <_reclaim_reent+0xa4>
 8005412:	4620      	mov	r0, r4
 8005414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005418:	4718      	bx	r3
 800541a:	5949      	ldr	r1, [r1, r5]
 800541c:	b941      	cbnz	r1, 8005430 <_reclaim_reent+0x94>
 800541e:	3504      	adds	r5, #4
 8005420:	69e3      	ldr	r3, [r4, #28]
 8005422:	2d80      	cmp	r5, #128	; 0x80
 8005424:	68d9      	ldr	r1, [r3, #12]
 8005426:	d1f8      	bne.n	800541a <_reclaim_reent+0x7e>
 8005428:	4620      	mov	r0, r4
 800542a:	f000 f841 	bl	80054b0 <_free_r>
 800542e:	e7c0      	b.n	80053b2 <_reclaim_reent+0x16>
 8005430:	680e      	ldr	r6, [r1, #0]
 8005432:	4620      	mov	r0, r4
 8005434:	f000 f83c 	bl	80054b0 <_free_r>
 8005438:	4631      	mov	r1, r6
 800543a:	e7ef      	b.n	800541c <_reclaim_reent+0x80>
 800543c:	2500      	movs	r5, #0
 800543e:	e7ef      	b.n	8005420 <_reclaim_reent+0x84>
 8005440:	bd70      	pop	{r4, r5, r6, pc}
 8005442:	bf00      	nop
 8005444:	2000005c 	.word	0x2000005c

08005448 <__libc_init_array>:
 8005448:	b570      	push	{r4, r5, r6, lr}
 800544a:	2600      	movs	r6, #0
 800544c:	4d0c      	ldr	r5, [pc, #48]	; (8005480 <__libc_init_array+0x38>)
 800544e:	4c0d      	ldr	r4, [pc, #52]	; (8005484 <__libc_init_array+0x3c>)
 8005450:	1b64      	subs	r4, r4, r5
 8005452:	10a4      	asrs	r4, r4, #2
 8005454:	42a6      	cmp	r6, r4
 8005456:	d109      	bne.n	800546c <__libc_init_array+0x24>
 8005458:	f000 f87e 	bl	8005558 <_init>
 800545c:	2600      	movs	r6, #0
 800545e:	4d0a      	ldr	r5, [pc, #40]	; (8005488 <__libc_init_array+0x40>)
 8005460:	4c0a      	ldr	r4, [pc, #40]	; (800548c <__libc_init_array+0x44>)
 8005462:	1b64      	subs	r4, r4, r5
 8005464:	10a4      	asrs	r4, r4, #2
 8005466:	42a6      	cmp	r6, r4
 8005468:	d105      	bne.n	8005476 <__libc_init_array+0x2e>
 800546a:	bd70      	pop	{r4, r5, r6, pc}
 800546c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005470:	4798      	blx	r3
 8005472:	3601      	adds	r6, #1
 8005474:	e7ee      	b.n	8005454 <__libc_init_array+0xc>
 8005476:	f855 3b04 	ldr.w	r3, [r5], #4
 800547a:	4798      	blx	r3
 800547c:	3601      	adds	r6, #1
 800547e:	e7f2      	b.n	8005466 <__libc_init_array+0x1e>
 8005480:	080055e4 	.word	0x080055e4
 8005484:	080055e4 	.word	0x080055e4
 8005488:	080055e4 	.word	0x080055e4
 800548c:	080055e8 	.word	0x080055e8

08005490 <__retarget_lock_acquire_recursive>:
 8005490:	4770      	bx	lr

08005492 <__retarget_lock_release_recursive>:
 8005492:	4770      	bx	lr

08005494 <memcpy>:
 8005494:	440a      	add	r2, r1
 8005496:	4291      	cmp	r1, r2
 8005498:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800549c:	d100      	bne.n	80054a0 <memcpy+0xc>
 800549e:	4770      	bx	lr
 80054a0:	b510      	push	{r4, lr}
 80054a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80054a6:	4291      	cmp	r1, r2
 80054a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80054ac:	d1f9      	bne.n	80054a2 <memcpy+0xe>
 80054ae:	bd10      	pop	{r4, pc}

080054b0 <_free_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4605      	mov	r5, r0
 80054b4:	2900      	cmp	r1, #0
 80054b6:	d040      	beq.n	800553a <_free_r+0x8a>
 80054b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054bc:	1f0c      	subs	r4, r1, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	bfb8      	it	lt
 80054c2:	18e4      	addlt	r4, r4, r3
 80054c4:	f000 f83c 	bl	8005540 <__malloc_lock>
 80054c8:	4a1c      	ldr	r2, [pc, #112]	; (800553c <_free_r+0x8c>)
 80054ca:	6813      	ldr	r3, [r2, #0]
 80054cc:	b933      	cbnz	r3, 80054dc <_free_r+0x2c>
 80054ce:	6063      	str	r3, [r4, #4]
 80054d0:	6014      	str	r4, [r2, #0]
 80054d2:	4628      	mov	r0, r5
 80054d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054d8:	f000 b838 	b.w	800554c <__malloc_unlock>
 80054dc:	42a3      	cmp	r3, r4
 80054de:	d908      	bls.n	80054f2 <_free_r+0x42>
 80054e0:	6820      	ldr	r0, [r4, #0]
 80054e2:	1821      	adds	r1, r4, r0
 80054e4:	428b      	cmp	r3, r1
 80054e6:	bf01      	itttt	eq
 80054e8:	6819      	ldreq	r1, [r3, #0]
 80054ea:	685b      	ldreq	r3, [r3, #4]
 80054ec:	1809      	addeq	r1, r1, r0
 80054ee:	6021      	streq	r1, [r4, #0]
 80054f0:	e7ed      	b.n	80054ce <_free_r+0x1e>
 80054f2:	461a      	mov	r2, r3
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	b10b      	cbz	r3, 80054fc <_free_r+0x4c>
 80054f8:	42a3      	cmp	r3, r4
 80054fa:	d9fa      	bls.n	80054f2 <_free_r+0x42>
 80054fc:	6811      	ldr	r1, [r2, #0]
 80054fe:	1850      	adds	r0, r2, r1
 8005500:	42a0      	cmp	r0, r4
 8005502:	d10b      	bne.n	800551c <_free_r+0x6c>
 8005504:	6820      	ldr	r0, [r4, #0]
 8005506:	4401      	add	r1, r0
 8005508:	1850      	adds	r0, r2, r1
 800550a:	4283      	cmp	r3, r0
 800550c:	6011      	str	r1, [r2, #0]
 800550e:	d1e0      	bne.n	80054d2 <_free_r+0x22>
 8005510:	6818      	ldr	r0, [r3, #0]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4408      	add	r0, r1
 8005516:	6010      	str	r0, [r2, #0]
 8005518:	6053      	str	r3, [r2, #4]
 800551a:	e7da      	b.n	80054d2 <_free_r+0x22>
 800551c:	d902      	bls.n	8005524 <_free_r+0x74>
 800551e:	230c      	movs	r3, #12
 8005520:	602b      	str	r3, [r5, #0]
 8005522:	e7d6      	b.n	80054d2 <_free_r+0x22>
 8005524:	6820      	ldr	r0, [r4, #0]
 8005526:	1821      	adds	r1, r4, r0
 8005528:	428b      	cmp	r3, r1
 800552a:	bf01      	itttt	eq
 800552c:	6819      	ldreq	r1, [r3, #0]
 800552e:	685b      	ldreq	r3, [r3, #4]
 8005530:	1809      	addeq	r1, r1, r0
 8005532:	6021      	streq	r1, [r4, #0]
 8005534:	6063      	str	r3, [r4, #4]
 8005536:	6054      	str	r4, [r2, #4]
 8005538:	e7cb      	b.n	80054d2 <_free_r+0x22>
 800553a:	bd38      	pop	{r3, r4, r5, pc}
 800553c:	20001dd4 	.word	0x20001dd4

08005540 <__malloc_lock>:
 8005540:	4801      	ldr	r0, [pc, #4]	; (8005548 <__malloc_lock+0x8>)
 8005542:	f7ff bfa5 	b.w	8005490 <__retarget_lock_acquire_recursive>
 8005546:	bf00      	nop
 8005548:	20001dd0 	.word	0x20001dd0

0800554c <__malloc_unlock>:
 800554c:	4801      	ldr	r0, [pc, #4]	; (8005554 <__malloc_unlock+0x8>)
 800554e:	f7ff bfa0 	b.w	8005492 <__retarget_lock_release_recursive>
 8005552:	bf00      	nop
 8005554:	20001dd0 	.word	0x20001dd0

08005558 <_init>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr

08005564 <_fini>:
 8005564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005566:	bf00      	nop
 8005568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556a:	bc08      	pop	{r3}
 800556c:	469e      	mov	lr, r3
 800556e:	4770      	bx	lr
